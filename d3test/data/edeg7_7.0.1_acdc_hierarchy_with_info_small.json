{
  "children": [
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$1.onLooperPrepared()",
            "com.android.server.lights.LightsService$1.this$0",
            "com.android.server.lights.LightsService$1.LightsService$1(com.android.server.lights.LightsService, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService.SVCLED_MODE_CHARGING",
            "com.android.server.lights.LightsService.mUseSoftwareAutoBrightness",
            "com.android.server.lights.LightsService.SVCLED_MODE_OTHERS",
            "com.android.server.lights.LightsService.access$2602(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "com.android.server.lights.LightsService.mLightSensor",
            "com.android.server.lights.LightsService.mUpdateSvcLEDDelay",
            "com.android.server.lights.LightsService.access$3000(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.finalize()",
            "com.android.server.lights.LightsService.mLights",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH_CHARGING",
            "com.android.server.lights.LightsService.SVCLED_MODE_FULLY_CHARGED",
            "com.android.server.lights.LightsService.SVCLED_OFF",
            "com.android.server.lights.LightsService.access$1702(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.SVCLED_OTHERS",
            "com.android.server.lights.LightsService.systemReady()",
            "com.android.server.lights.LightsService.access$1200()",
            "com.android.server.lights.LightsService.SVCLED_CHARGING",
            "com.android.server.lights.LightsService.access$2000()",
            "com.android.server.lights.LightsService.access$002(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.access$600(com.android.server.lights.LightsService, int, int, int, int, int, boolean)",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH",
            "com.android.server.lights.LightsService.LightsService(android.content.Context)",
            "com.android.server.lights.LightsService.mSvcLedMode",
            "com.android.server.lights.LightsService.mCoverManager",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH_LOW_BATTERY",
            "com.android.server.lights.LightsService.access$1400(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SVCLED_MODE_LOW_BATTERY",
            "com.android.server.lights.LightsService.mCoverNotiLight",
            "com.android.server.lights.LightsService.TAG_API",
            "com.android.server.lights.LightsService.clearSvcLedStateLocked(int)",
            "com.android.server.lights.LightsService.mCoverStateListener",
            "com.android.server.lights.LightsService.mCoverType",
            "com.android.server.lights.LightsService.SVCLED_LED_SERVICE_MASK",
            "com.android.server.lights.LightsService.mLightListener",
            "com.android.server.lights.LightsService.SVCLED_MODE_COUNT",
            "com.android.server.lights.LightsService.access$800(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH_CHARGING_ERROR",
            "com.android.server.lights.LightsService.access$1302(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.mInitializedWakeLockPath",
            "com.android.server.lights.LightsService.access$1800()",
            "com.android.server.lights.LightsService.handleForcedSvcLEDTask()",
            "com.android.server.lights.LightsService.initializeWakeLockPath()",
            "com.android.server.lights.LightsService.access$802(com.android.server.lights.LightsService, com.android.server.lights.LightsService$SvcLEDHandler)",
            "com.android.server.lights.LightsService.mSvcLedColor",
            "com.android.server.lights.LightsService.publishLocalService(java.lang.Class, java.lang.Object)",
            "com.android.server.lights.LightsService.mUseLEDAutoBrightness",
            "com.android.server.lights.LightsService.mCoverBatteryLight",
            "com.android.server.lights.LightsService.fileWriteInt(java.lang.String, int)",
            "com.android.server.lights.LightsService.model",
            "com.android.server.lights.LightsService.mWakeLockPath",
            "com.android.server.lights.LightsService.access$3300(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.access$500(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.init_native()",
            "com.android.server.lights.LightsService.TAG_LED",
            "com.android.server.lights.LightsService.access$2700(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.access$302(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.access$2502(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "com.android.server.lights.LightsService.acquireWakeLockForLED()",
            "com.android.server.lights.LightsService.mService",
            "com.android.server.lights.LightsService.access$100()",
            "com.android.server.lights.LightsService.access$200(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SVCLED_BATTERY_MASK",
            "com.android.server.lights.LightsService.SVCLED_MODE_CHARGING_ERROR",
            "com.android.server.lights.LightsService.mSensorManager",
            "com.android.server.lights.LightsService.getLocalService(java.lang.Class)",
            "com.android.server.lights.LightsService.SVCLED_LED_SERVICE",
            "com.android.server.lights.LightsService.mInitCompleteForSvcLED",
            "com.android.server.lights.LightsService.static {}",
            "com.android.server.lights.LightsService.mSvcLedState",
            "com.android.server.lights.LightsService.SVCLED_MISSED_NOTIFICATION",
            "com.android.server.lights.LightsService.PRODUCT_NAME",
            "com.android.server.lights.LightsService.mSvcLedOnMS",
            "com.android.server.lights.LightsService.access$900(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SUPPORT_LED_INDICATOR",
            "com.android.server.lights.LightsService.mUsePatternLED",
            "com.android.server.lights.LightsService.TAG",
            "com.android.server.lights.LightsService.access$1902(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.finalize_native(long)",
            "com.android.server.lights.LightsService.setLight_native(long, int, int, int, int, int, int)",
            "com.android.server.lights.LightsService.access$000(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.mSvcLEDThread",
            "com.android.server.lights.LightsService.setSvcLedStateLocked(int, int, int, int, int, boolean)",
            "com.android.server.lights.LightsService.access$700(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.mWakeLockAcquired",
            "com.android.server.lights.LightsService.access$2400(com.android.server.lights.LightsService, java.lang.Class)",
            "com.android.server.lights.LightsService.access$1300(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.mCoverOpened",
            "com.android.server.lights.LightsService.mH",
            "com.android.server.lights.LightsService.onBootPhase(int)",
            "com.android.server.lights.LightsService.mWakeUnlockPath",
            "com.android.server.lights.LightsService.releaseWakeLockForLED()",
            "com.android.server.lights.LightsService.mNewWakeLockPaths",
            "com.android.server.lights.LightsService.mLedLowPower",
            "com.android.server.lights.LightsService.access$2500(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SVCLED_MODE_LED_SERVICE",
            "com.android.server.lights.LightsService.access$1700(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.mSvcLEDHandler",
            "com.android.server.lights.LightsService.access$1502(com.android.server.lights.LightsService, boolean)",
            "com.android.server.lights.LightsService.access$3100(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.enableSvcLEDLightSensorLocked(boolean)",
            "com.android.server.lights.LightsService.access$1100(com.android.server.lights.LightsService, int)",
            "com.android.server.lights.LightsService.MSG_FORCEDSVCLEDTASK",
            "com.android.server.lights.LightsService.access$202(com.android.server.lights.LightsService, int)",
            "com.android.server.lights.LightsService.initCoverState()",
            "com.android.server.lights.LightsService.fileWriteString(java.lang.String, java.lang.String)",
            "com.android.server.lights.LightsService.access$400(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.mAlarmManagerForSvcLED",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH_MISSED_NOTIFICATION",
            "com.android.server.lights.LightsService.access$1900(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.access$2600(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.access$2800(com.android.server.lights.LightsService, int)",
            "com.android.server.lights.LightsService.getLight(int)",
            "com.android.server.lights.LightsService.access$1000(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.access$300(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SVCLED_MODE_MISSED_NOTIFICATION",
            "com.android.server.lights.LightsService.SVCLED_CHARGING_ERROR",
            "com.android.server.lights.LightsService.SVCLED_LOW_BATTERY",
            "com.android.server.lights.LightsService.SVCLED_NOTIFICATIONS_MASK",
            "com.android.server.lights.LightsService.onStart()",
            "com.android.server.lights.LightsService.mUpdateSvcLEDPendingIntent",
            "com.android.server.lights.LightsService.mLedLowPowerPath",
            "com.android.server.lights.LightsService.access$2900(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.SVCLED_FULLY_CHARGED",
            "com.android.server.lights.LightsService.mPrevSvcLedState",
            "com.android.server.lights.LightsService.access$1600(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService.isLightSensorEnabled",
            "com.android.server.lights.LightsService.NOVEL_PROJECT",
            "com.android.server.lights.LightsService.mLastSvcLedId",
            "com.android.server.lights.LightsService.ACTION_UPDATE_SVC_LED",
            "com.android.server.lights.LightsService.DEBUG",
            "com.android.server.lights.LightsService.access$2702(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "com.android.server.lights.LightsService.access$902(com.android.server.lights.LightsService, int)",
            "com.android.server.lights.LightsService.mContext",
            "com.android.server.lights.LightsService.mIsLEDChanged",
            "com.android.server.lights.LightsService.setSvcLedLightLocked(int)",
            "com.android.server.lights.LightsService.mDelayForcedSvcLEDTask",
            "com.android.server.lights.LightsService.mNativePointer",
            "com.android.server.lights.LightsService.mSvcLedOffMS",
            "com.android.server.lights.LightsService.callerInfoToString()",
            "com.android.server.lights.LightsService.LIGHT_SEC_FLASH_FULLY_CHARGED",
            "com.android.server.lights.LightsService.mCoverServLight"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$2.getLight(int)",
            "com.android.server.lights.LightsService$2.LightsService$2(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService$2.this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$5.onSensorChanged(android.hardware.SensorEvent)",
            "com.android.server.lights.LightsService$5.LightsService$5(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService$5.onAccuracyChanged(android.hardware.Sensor, int)",
            "com.android.server.lights.LightsService$5.this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$SvcLEDHandler.this$0",
            "com.android.server.lights.LightsService$SvcLEDHandler.sendMessage(android.os.Message)",
            "com.android.server.lights.LightsService$SvcLEDHandler.LightsService$SvcLEDHandler(com.android.server.lights.LightsService, android.os.Looper)",
            "com.android.server.lights.LightsService$SvcLEDHandler.handleMessage(android.os.Message)",
            "com.android.server.lights.LightsService$SvcLEDHandler.sendMessageDelayed(android.os.Message, long)",
            "com.android.server.lights.LightsService$SvcLEDHandler.hasMessages(int)",
            "com.android.server.lights.LightsService$SvcLEDHandler.obtainMessage(int)",
            "com.android.server.lights.LightsService$SvcLEDHandler.removeMessages(int)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$SvcLEDHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$4.LightsService$4(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService$4.onCoverStateChanged(com.samsung.android.cover.CoverState)",
            "com.android.server.lights.LightsService$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$3.handleMessage(android.os.Message)",
            "com.android.server.lights.LightsService$3.this$0",
            "com.android.server.lights.LightsService$3.LightsService$3(com.android.server.lights.LightsService)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$SvcLEDReceiver.LightsService$SvcLEDReceiver(com.android.server.lights.LightsService, com.android.server.lights.LightsService$1)",
            "com.android.server.lights.LightsService$SvcLEDReceiver.LightsService$SvcLEDReceiver(com.android.server.lights.LightsService)",
            "com.android.server.lights.LightsService$SvcLEDReceiver.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.lights.LightsService$SvcLEDReceiver.this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$SvcLEDReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsService$LightImpl.LightsService$LightImpl(com.android.server.lights.LightsService, int, com.android.server.lights.LightsService$1)",
            "com.android.server.lights.LightsService$LightImpl.mMode",
            "com.android.server.lights.LightsService$LightImpl.pulse()",
            "com.android.server.lights.LightsService$LightImpl.stopFlashing()",
            "com.android.server.lights.LightsService$LightImpl.setBrightness(int)",
            "com.android.server.lights.LightsService$LightImpl.mOnMS",
            "com.android.server.lights.LightsService$LightImpl.setColor(int)",
            "com.android.server.lights.LightsService$LightImpl.pulse(int, int)",
            "com.android.server.lights.LightsService$LightImpl.access$3200(com.android.server.lights.LightsService$LightImpl, int, int, int, int, int)",
            "com.android.server.lights.LightsService$LightImpl.mColor",
            "com.android.server.lights.LightsService$LightImpl.mId",
            "com.android.server.lights.LightsService$LightImpl.access$2200(com.android.server.lights.LightsService$LightImpl)",
            "com.android.server.lights.LightsService$LightImpl.mOffMS",
            "com.android.server.lights.LightsService$LightImpl.setFlashing(int, int, int, int)",
            "com.android.server.lights.LightsService$LightImpl.mIsIDUsingPatternLED",
            "com.android.server.lights.LightsService$LightImpl.LightsService$LightImpl(com.android.server.lights.LightsService, int)",
            "com.android.server.lights.LightsService$LightImpl.setLightLocked(int, int, int, int, int)",
            "com.android.server.lights.LightsService$LightImpl.setBrightness(int, int)",
            "com.android.server.lights.LightsService$LightImpl.mFlashing",
            "com.android.server.lights.LightsService$LightImpl.this$0",
            "com.android.server.lights.LightsService$LightImpl.turnOff()"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$LightImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.LightsManager.LIGHT_ID_ATTENTION",
            "com.android.server.lights.LightsManager.LIGHT_ID_BUTTONS_SUB",
            "com.android.server.lights.LightsManager.LIGHT_ID_BLUETOOTH",
            "com.android.server.lights.LightsManager.LIGHT_ID_KEYBOARD",
            "com.android.server.lights.LightsManager.LIGHT_ID_NOTIFICATIONS",
            "com.android.server.lights.LightsManager.LIGHT_ID_LED_SERVICE",
            "com.android.server.lights.LightsManager.LightsManager()",
            "com.android.server.lights.LightsManager.LIGHT_ID_BUTTONS",
            "com.android.server.lights.LightsManager.LIGHT_ID_VOLUME",
            "com.android.server.lights.LightsManager.LIGHT_ID_BACKLIGHT",
            "com.android.server.lights.LightsManager.LIGHT_ID_BACKLIGHT_SUB",
            "com.android.server.lights.LightsManager.LIGHT_ID_CONNECTIVITY",
            "com.android.server.lights.LightsManager.LIGHT_ID_COUNT",
            "com.android.server.lights.LightsManager.getLight(int)",
            "com.android.server.lights.LightsManager.LIGHT_ID_BATTERY",
            "com.android.server.lights.LightsManager.LIGHT_ID_WIFI"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.lights.Light.LIGHT_FLASH_TIMED",
            "com.android.server.lights.Light.setBrightness(int)",
            "com.android.server.lights.Light.BRIGHTNESS_MODE_USER",
            "com.android.server.lights.Light.Light()",
            "com.android.server.lights.Light.setBrightness(int, int)",
            "com.android.server.lights.Light.BRIGHTNESS_MODE_SENSOR",
            "com.android.server.lights.Light.LIGHT_FLASH_HARDWARE",
            "com.android.server.lights.Light.pulse(int, int)",
            "com.android.server.lights.Light.setColor(int)",
            "com.android.server.lights.Light.turnOff()",
            "com.android.server.lights.Light.pulse()",
            "com.android.server.lights.Light.LIGHT_FLASH_NONE",
            "com.android.server.lights.Light.setFlashing(int, int, int, int)"
          ],
          "added": [],
          "name": "com.android.server.lights.Light",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.os.HandlerThread.getLooper()",
            "android.os.HandlerThread.HandlerThread(java.lang.String)",
            "android.os.HandlerThread.HandlerThread(java.lang.String, int)",
            "android.os.HandlerThread.interrupt()",
            "android.os.HandlerThread.run()",
            "android.os.HandlerThread.getId()",
            "android.os.HandlerThread.start()"
          ],
          "added": [],
          "name": "android.os.HandlerThread",
          "change_type": 2
        }
      ],
      "name": "com.android.server.lights.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.SmartCoverAppController$1.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.cover.SmartCoverAppController$1.SmartCoverAppController$1()"
          ],
          "added": [],
          "name": "com.android.server.cover.SmartCoverAppController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.SmartCoverAppController.smartCoverAttachStateChanged(boolean, java.lang.String)",
            "com.android.server.cover.SmartCoverAppController.mContext",
            "com.android.server.cover.SmartCoverAppController.PATH_PLAYSTORE",
            "com.android.server.cover.SmartCoverAppController.SmartCoverAppController(android.content.Context)",
            "com.android.server.cover.SmartCoverAppController.mIsRegisterReceiver",
            "com.android.server.cover.SmartCoverAppController.TAG",
            "com.android.server.cover.SmartCoverAppController.SMARTCOVER_CATEGORY",
            "com.android.server.cover.SmartCoverAppController.static {}",
            "com.android.server.cover.SmartCoverAppController.access$100()",
            "com.android.server.cover.SmartCoverAppController.SAFE_DEBUG",
            "com.android.server.cover.SmartCoverAppController.access$200()",
            "com.android.server.cover.SmartCoverAppController.mSmartCoverPackageName",
            "com.android.server.cover.SmartCoverAppController.startSmartCoverService()",
            "com.android.server.cover.SmartCoverAppController.PATH_SAMSUNGAPPS",
            "com.android.server.cover.SmartCoverAppController.startCoverService(boolean, java.lang.String)",
            "com.android.server.cover.SmartCoverAppController.mSmartCoverServiceIntent",
            "com.android.server.cover.SmartCoverAppController.access$000()",
            "com.android.server.cover.SmartCoverAppController.stopSmartCoverService()",
            "com.android.server.cover.SmartCoverAppController.controlCoverService(boolean)",
            "com.android.server.cover.SmartCoverAppController.packageChangeIntentReceiver",
            "com.android.server.cover.SmartCoverAppController.getSmartCoverPackageName(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cover.SmartCoverAppController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverTestModeUtils$2.CoverTestModeUtils$2(com.android.server.cover.CoverTestModeUtils, android.os.Handler)",
            "com.android.server.cover.CoverTestModeUtils$2.onChange(boolean, android.net.Uri)",
            "com.android.server.cover.CoverTestModeUtils$2.this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverTestModeUtils$1.handleMessage(android.os.Message)",
            "com.android.server.cover.CoverTestModeUtils$1.this$0",
            "com.android.server.cover.CoverTestModeUtils$1.CoverTestModeUtils$1(com.android.server.cover.CoverTestModeUtils)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverTestModeUtils.access$200(com.android.server.cover.CoverTestModeUtils)",
            "com.android.server.cover.CoverTestModeUtils.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.CoverTestModeUtils.SHIPPED",
            "com.android.server.cover.CoverTestModeUtils.access$400(com.android.server.cover.CoverTestModeUtils, int)",
            "com.android.server.cover.CoverTestModeUtils.mCallback",
            "com.android.server.cover.CoverTestModeUtils.CoverTestModeUtils(android.content.Context, com.android.server.cover.CoverTestModeUtils$OnCoverTestModeChanged)",
            "com.android.server.cover.CoverTestModeUtils.TEST_MODE_NONE",
            "com.android.server.cover.CoverTestModeUtils.getTestModeFromSetting()",
            "com.android.server.cover.CoverTestModeUtils.access$300(com.android.server.cover.CoverTestModeUtils)",
            "com.android.server.cover.CoverTestModeUtils.static {}",
            "com.android.server.cover.CoverTestModeUtils.COVER_TEST_MODE",
            "com.android.server.cover.CoverTestModeUtils.access$000()",
            "com.android.server.cover.CoverTestModeUtils.mTestModeChangeHandler",
            "com.android.server.cover.CoverTestModeUtils.mObserver",
            "com.android.server.cover.CoverTestModeUtils.sCurrentTestMode",
            "com.android.server.cover.CoverTestModeUtils.mContext",
            "com.android.server.cover.CoverTestModeUtils.access$100(com.android.server.cover.CoverTestModeUtils)",
            "com.android.server.cover.CoverTestModeUtils.getTestCoverType()",
            "com.android.server.cover.CoverTestModeUtils.TAG",
            "com.android.server.cover.CoverTestModeUtils.updateCoverTestMode(int)",
            "com.android.server.cover.CoverTestModeUtils.isTestMode()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverTestModeUtils$OnCoverTestModeChanged.onCoverTestModeChanged(int, boolean)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$OnCoverTestModeChanged",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverDisabler.CoverDisabler(android.os.Looper, android.content.Context)",
            "com.android.server.cover.CoverDisabler.mCoverManagerDisabled",
            "com.android.server.cover.CoverDisabler.mHandler",
            "com.android.server.cover.CoverDisabler.mLock",
            "com.android.server.cover.CoverDisabler.isCoverManagerDisabled()",
            "com.android.server.cover.CoverDisabler.disableCoverManager(boolean, android.os.IBinder, java.lang.String)",
            "com.android.server.cover.CoverDisabler.SAFE_DEBUG",
            "com.android.server.cover.CoverDisabler.mPowerManager",
            "com.android.server.cover.CoverDisabler.manageDisableListLocked(boolean, android.os.IBinder, java.lang.String)",
            "com.android.server.cover.CoverDisabler.gatherDisableLocked()",
            "com.android.server.cover.CoverDisabler.handleDisableCoverManagerLocked(boolean)",
            "com.android.server.cover.CoverDisabler.MSG_DISABLE_COVER_MANAGER",
            "com.android.server.cover.CoverDisabler.disableCoverManagerLocked(boolean, android.os.IBinder, java.lang.String)",
            "com.android.server.cover.CoverDisabler.mDisableCoverManagerWakeLock",
            "com.android.server.cover.CoverDisabler.TAG",
            "com.android.server.cover.CoverDisabler.access$100(com.android.server.cover.CoverDisabler, boolean, android.os.IBinder, java.lang.String)",
            "com.android.server.cover.CoverDisabler.mContext",
            "com.android.server.cover.CoverDisabler.mDisableRecords",
            "com.android.server.cover.CoverDisabler.access$000(com.android.server.cover.CoverDisabler, boolean)",
            "com.android.server.cover.CoverDisabler.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.CoverDisabler.DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverDisabler$DisableRecord.CoverDisabler$DisableRecord(com.android.server.cover.CoverDisabler)",
            "com.android.server.cover.CoverDisabler$DisableRecord.token",
            "com.android.server.cover.CoverDisabler$DisableRecord.disable",
            "com.android.server.cover.CoverDisabler$DisableRecord.CoverDisabler$DisableRecord(com.android.server.cover.CoverDisabler, com.android.server.cover.CoverDisabler$1)",
            "com.android.server.cover.CoverDisabler$DisableRecord.this$0",
            "com.android.server.cover.CoverDisabler$DisableRecord.binderDied()",
            "com.android.server.cover.CoverDisabler$DisableRecord.pkg"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$DisableRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverDisabler$CoverDisablerHandler.handleMessage(android.os.Message)",
            "com.android.server.cover.CoverDisabler$CoverDisablerHandler.CoverDisabler$CoverDisablerHandler(com.android.server.cover.CoverDisabler, android.os.Looper)",
            "com.android.server.cover.CoverDisabler$CoverDisablerHandler.this$0",
            "com.android.server.cover.CoverDisabler$CoverDisablerHandler.sendMessage(android.os.Message)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$CoverDisablerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverHideAnimator$3.CoverHideAnimator$3(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator$3.this$0",
            "com.android.server.cover.CoverHideAnimator$3.onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.animation.AnimatorListenerAdapter.AnimatorListenerAdapter()",
            "android.animation.AnimatorListenerAdapter.onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "android.animation.AnimatorListenerAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverHideAnimator$1.this$0",
            "com.android.server.cover.CoverHideAnimator$1.handleMessage(android.os.Message)",
            "com.android.server.cover.CoverHideAnimator$1.CoverHideAnimator$1(com.android.server.cover.CoverHideAnimator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverHideAnimator.MSG_SEND_COVER_CANCEL_ANIMATION",
            "com.android.server.cover.CoverHideAnimator.mAnimationInterpolator",
            "com.android.server.cover.CoverHideAnimator.handleStartAnimation()",
            "com.android.server.cover.CoverHideAnimator.FADE_OUT_ANIMATION_START_DELAY",
            "com.android.server.cover.CoverHideAnimator.CoverHideAnimator(android.content.Context)",
            "com.android.server.cover.CoverHideAnimator.removeViewFromWindow()",
            "com.android.server.cover.CoverHideAnimator.mFadeInAnimatorListener",
            "com.android.server.cover.CoverHideAnimator.access$700(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$300(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.FADE_IN_ANIMATION_DURATION",
            "com.android.server.cover.CoverHideAnimator.FADE_OUT_ANIMATION_DURATION",
            "com.android.server.cover.CoverHideAnimator.access$600(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$400(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.mCallbackRunnable",
            "com.android.server.cover.CoverHideAnimator.mWindowLP",
            "com.android.server.cover.CoverHideAnimator.TAG",
            "com.android.server.cover.CoverHideAnimator.cancelHideAnimation()",
            "com.android.server.cover.CoverHideAnimator.access$500(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$302(com.android.server.cover.CoverHideAnimator, java.lang.Runnable)",
            "com.android.server.cover.CoverHideAnimator.MSG_SEND_COVER_START_ANIMATION",
            "com.android.server.cover.CoverHideAnimator.mFadeOutAnimatorListener",
            "com.android.server.cover.CoverHideAnimator.access$000(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$100(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$200(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.access$800(com.android.server.cover.CoverHideAnimator)",
            "com.android.server.cover.CoverHideAnimator.mHandler",
            "com.android.server.cover.CoverHideAnimator.handleCancelAnimation()",
            "com.android.server.cover.CoverHideAnimator.mWm",
            "com.android.server.cover.CoverHideAnimator.mCoverHideView",
            "com.android.server.cover.CoverHideAnimator.mContext",
            "com.android.server.cover.CoverHideAnimator.playCoverHideAnimation(java.lang.Runnable)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverHideAnimator$2.this$0",
            "com.android.server.cover.CoverHideAnimator$2.onAnimationEnd(android.animation.Animator)",
            "com.android.server.cover.CoverHideAnimator$2.CoverHideAnimator$2(com.android.server.cover.CoverHideAnimator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.animation.TimeInterpolator",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.SViewCoverBaseServiceDelegate.onCoverAppCovered(boolean)",
            "com.samsung.android.cover.SViewCoverBaseServiceDelegate.updateCoverState(com.samsung.android.cover.CoverState)",
            "com.samsung.android.cover.SViewCoverBaseServiceDelegate.onUnbindSViewCoverService()",
            "com.samsung.android.cover.SViewCoverBaseServiceDelegate.onBindSViewCoverService()",
            "com.samsung.android.cover.SViewCoverBaseServiceDelegate.SViewCoverBaseServiceDelegate(android.content.Context)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.SViewCoverBaseServiceDelegate",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.StateNotifier.StateNotifier(android.os.Looper, android.content.Context)",
            "com.android.server.cover.StateNotifier.handleSendCoverAttachState(boolean)",
            "com.android.server.cover.StateNotifier.updateCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState, boolean)",
            "com.android.server.cover.StateNotifier.DEBUG",
            "com.android.server.cover.StateNotifier.createCoverServiceConnectionLocked()",
            "com.android.server.cover.StateNotifier.mContext",
            "com.android.server.cover.StateNotifier.mSViewCoverBaseServiceDelegate",
            "com.android.server.cover.StateNotifier.MSG_SEND_COVER_ATTACH_STATE",
            "com.android.server.cover.StateNotifier.checkSystemFeatureForCoverType(com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier.registerListenerCallback(android.os.IBinder, android.content.ComponentName, int)",
            "com.android.server.cover.StateNotifier.updatePowerStateLocked(com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier.SAFE_DEBUG",
            "com.android.server.cover.StateNotifier.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.StateNotifier.mAttached",
            "com.android.server.cover.StateNotifier.sendCoverAttachStateLocked(boolean)",
            "com.android.server.cover.StateNotifier.mSendCoverVerifyAndAttachStateWakeLock",
            "com.android.server.cover.StateNotifier.TYPE_COVER_WINDOW_STATE_LISTENER",
            "com.android.server.cover.StateNotifier.access$300(com.android.server.cover.StateNotifier)",
            "com.android.server.cover.StateNotifier.access$400(com.android.server.cover.StateNotifier)",
            "com.android.server.cover.StateNotifier.mLock",
            "com.android.server.cover.StateNotifier.MSG_UPDATE_SVIEW_COVER_STATE",
            "com.android.server.cover.StateNotifier.updateSViewCoverServiceLocked(com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier.MSG_SEND_COVER_SWITCH_STATE",
            "com.android.server.cover.StateNotifier.handleSendCoverSwitchState(com.samsung.android.cover.CoverState, boolean)",
            "com.android.server.cover.StateNotifier.mSendCoverSwitchStateWakeLock",
            "com.android.server.cover.StateNotifier.onCoverAppCovered(boolean)",
            "com.android.server.cover.StateNotifier.unregisterCallback(android.os.IBinder)",
            "com.android.server.cover.StateNotifier.sendCoverSwitchStateLocked(com.samsung.android.cover.CoverState, boolean)",
            "com.android.server.cover.StateNotifier.TAG",
            "com.android.server.cover.StateNotifier.access$200(com.android.server.cover.StateNotifier, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier.mHandler",
            "com.android.server.cover.StateNotifier.access$100(com.android.server.cover.StateNotifier, boolean)",
            "com.android.server.cover.StateNotifier.updateCoverSwitchStateLocked(com.samsung.android.cover.CoverState, boolean)",
            "com.android.server.cover.StateNotifier.handleUpdateSViewCoverService(com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier.mListeners",
            "com.android.server.cover.StateNotifier.mRunnableForSviewCoverWakeLock",
            "com.android.server.cover.StateNotifier.TYPE_STATE_LISTENER",
            "com.android.server.cover.StateNotifier.mUpdateSViewCoverWakeLock",
            "com.android.server.cover.StateNotifier.access$000(com.android.server.cover.StateNotifier, com.samsung.android.cover.CoverState, boolean)",
            "com.android.server.cover.StateNotifier.TYPE_COVER_STATE_LISTENER",
            "com.android.server.cover.StateNotifier.updateSViewCoverServiceConnectionLocked(boolean)",
            "com.android.server.cover.StateNotifier.mPowerManager",
            "com.android.server.cover.StateNotifier.mSendCoverStateWakeLock"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.StateNotifier$1.StateNotifier$1(com.android.server.cover.StateNotifier)",
            "com.android.server.cover.StateNotifier$1.this$0",
            "com.android.server.cover.StateNotifier$1.run()"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.StateNotifier$StateNotifierHandler.postDelayed(java.lang.Runnable, long)",
            "com.android.server.cover.StateNotifier$StateNotifierHandler.sendMessage(android.os.Message)",
            "com.android.server.cover.StateNotifier$StateNotifierHandler.this$0",
            "com.android.server.cover.StateNotifier$StateNotifierHandler.StateNotifier$StateNotifierHandler(com.android.server.cover.StateNotifier, android.os.Looper)",
            "com.android.server.cover.StateNotifier$StateNotifierHandler.handleMessage(android.os.Message)",
            "com.android.server.cover.StateNotifier$StateNotifierHandler.removeCallbacks(java.lang.Runnable)"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$StateNotifierHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.handleMessage(android.os.Message)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.removeMessages(int)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.hasCallbacks(java.lang.Runnable)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.sendMessageDelayed(android.os.Message, long)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.this$0",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.LedCoverController$LedCoverControllerHandler(com.android.server.cover.LedCoverController, android.os.Looper)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.hasMessages(int)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.sendMessage(android.os.Message)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.removeCallbacks(java.lang.Runnable)",
            "com.android.server.cover.LedCoverController$LedCoverControllerHandler.postDelayed(java.lang.Runnable, long)"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController$LedCoverControllerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.LedCoverController.getSerialManager(android.content.Context)",
            "com.android.server.cover.LedCoverController.mIsLedCoverPowered",
            "com.android.server.cover.LedCoverController.handleSendDataToLedCover(int, byte[])",
            "com.android.server.cover.LedCoverController.LedCoverController(android.os.Looper, android.content.Context)",
            "com.android.server.cover.LedCoverController.initializeCoverControlPath(android.content.Context)",
            "com.android.server.cover.LedCoverController.LED_COMMAND_BATTERY_CHARGING",
            "com.android.server.cover.LedCoverController.LED_COMMAND_VOLUME",
            "com.android.server.cover.LedCoverController.LED_COMMAND_INCOMING_CALL",
            "com.android.server.cover.LedCoverController.mLedCoverPowerPath",
            "com.android.server.cover.LedCoverController.powerControlLedCover(boolean)",
            "com.android.server.cover.LedCoverController.MSG_SEND_LED_DATA",
            "com.android.server.cover.LedCoverController.LED_COMMAND_BATTERY_CHARGING_END",
            "com.android.server.cover.LedCoverController.mIsLedOn",
            "com.android.server.cover.LedCoverController.sendDataToLedCover(int, byte[])",
            "com.android.server.cover.LedCoverController.LED_COMMAND_BRIGHTNESS",
            "com.android.server.cover.LedCoverController.LED_COMMAND_CALL_END",
            "com.android.server.cover.LedCoverController.LED_COMMAND_CLOCK",
            "com.android.server.cover.LedCoverController.updateLedCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.LedCoverController.LED_COMMAND_REQ_LED_STATUS",
            "com.android.server.cover.LedCoverController.LED_COMMAND_MISSED_CALL_MSG",
            "com.android.server.cover.LedCoverController.mContext",
            "com.android.server.cover.LedCoverController.mSendLedDataWakeLock",
            "com.android.server.cover.LedCoverController.mIsLedCoverAttached",
            "com.android.server.cover.LedCoverController.LED_COMMAND_LED_OFF",
            "com.android.server.cover.LedCoverController.LED_COMMAND_LOW_BATTERY_ALERT",
            "com.android.server.cover.LedCoverController.mCoverColor",
            "com.android.server.cover.LedCoverController.LED_COMMAND_INDICATOR",
            "com.android.server.cover.LedCoverController.access$100(com.android.server.cover.LedCoverController, int, byte[])",
            "com.android.server.cover.LedCoverController.DEBUG",
            "com.android.server.cover.LedCoverController.LED_COMMAND_PEDOMETER",
            "com.android.server.cover.LedCoverController.mSerialManager",
            "com.android.server.cover.LedCoverController.mUpdateAttachStateWakeLock",
            "com.android.server.cover.LedCoverController.writeDataViaSerial(java.lang.String, byte[])",
            "com.android.server.cover.LedCoverController.access$400(com.android.server.cover.LedCoverController)",
            "com.android.server.cover.LedCoverController.LED_COMMAND_COLOR",
            "com.android.server.cover.LedCoverController.LED_COMMAND_LED_ON",
            "com.android.server.cover.LedCoverController.mHandler",
            "com.android.server.cover.LedCoverController.mLedCoverUARTPath",
            "com.android.server.cover.LedCoverController.MSG_UPDATE_COVER_ATTACH_STATE",
            "com.android.server.cover.LedCoverController.LED_COMMAND_POWER_ON_OFF",
            "com.android.server.cover.LedCoverController.access$300(com.android.server.cover.LedCoverController)",
            "com.android.server.cover.LedCoverController.isCoverPowered()",
            "com.android.server.cover.LedCoverController.LED_COMMAND_MUSIC",
            "com.android.server.cover.LedCoverController.mLedOnOffWakeLock",
            "com.android.server.cover.LedCoverController.mPowerManager",
            "com.android.server.cover.LedCoverController.MSG_LED_OFF_BY_SELF",
            "com.android.server.cover.LedCoverController.TAG",
            "com.android.server.cover.LedCoverController.SAFE_DEBUG",
            "com.android.server.cover.LedCoverController.LED_COMMAND_ALARM",
            "com.android.server.cover.LedCoverController.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.LedCoverController.sendPowerKeyToCover()",
            "com.android.server.cover.LedCoverController.access$002(com.android.server.cover.LedCoverController, boolean)",
            "com.android.server.cover.LedCoverController.access$200(com.android.server.cover.LedCoverController, boolean)",
            "com.android.server.cover.LedCoverController.isCoverAttached()",
            "com.android.server.cover.LedCoverController.mRunnable",
            "com.android.server.cover.LedCoverController.handleUpdateLedCoverAttachState(boolean)"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.LedCoverController$1.this$0",
            "com.android.server.cover.LedCoverController$1.LedCoverController$1(com.android.server.cover.LedCoverController)",
            "com.android.server.cover.LedCoverController$1.run()"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.SerialManager.getSerialPorts()",
            "android.hardware.SerialManager.openSerialPort(java.lang.String, int)"
          ],
          "added": [],
          "name": "android.hardware.SerialManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.SerialPort.close()",
            "android.hardware.SerialPort.write(java.nio.ByteBuffer, int)",
            "android.hardware.SerialPort.getName()"
          ],
          "added": [],
          "name": "android.hardware.SerialPort",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.NfcLedCoverController$CallDurationTask.NfcLedCoverController$CallDurationTask(com.android.server.cover.NfcLedCoverController, com.android.server.cover.NfcLedCoverController$1)",
            "com.android.server.cover.NfcLedCoverController$CallDurationTask.prevSecond",
            "com.android.server.cover.NfcLedCoverController$CallDurationTask.NfcLedCoverController$CallDurationTask(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController$CallDurationTask.this$0",
            "com.android.server.cover.NfcLedCoverController$CallDurationTask.run()"
          ],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$CallDurationTask",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.sendMessage(android.os.Message)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.removeMessages(int)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.sendMessageDelayed(android.os.Message, long)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.this$0",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.NfcLedCoverController$NfcLedCoverControllerHandler(com.android.server.cover.NfcLedCoverController, android.os.Looper)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.handleMessage(android.os.Message)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.hasMessages(int)",
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.sendEmptyMessage(int)"
          ],
          "added": [
            "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler.removeCallbacksAndMessages(java.lang.Object)"
          ],
          "name": "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.NfcLedCoverController.CMD_LED_BATTERY_CHARGING_WIRELESS",
            "com.android.server.cover.NfcLedCoverController.access$1400(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_ALARM",
            "com.android.server.cover.NfcLedCoverController.mPollTouchWakeLock",
            "com.android.server.cover.NfcLedCoverController.updateNfcLedCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CALL_END",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CALL_INCOMING",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_MUSIC",
            "com.android.server.cover.NfcLedCoverController.CMD_INTERNAL_LED_REPLY",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CLOCK_TIME_TICK",
            "com.android.server.cover.NfcLedCoverController.scheduleLedOffTimerout(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.mTouchResponseWakeLock",
            "com.android.server.cover.NfcLedCoverController.access$1500(com.android.server.cover.NfcLedCoverController, byte[])",
            "com.android.server.cover.NfcLedCoverController.mPrevCommand",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_VOLUME",
            "com.android.server.cover.NfcLedCoverController.MSG_SEND_NFC_LED_DATA_DELAYED",
            "com.android.server.cover.NfcLedCoverController.mSendDataLock",
            "com.android.server.cover.NfcLedCoverController.MSG_SEND_NFC_LED_DATA",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_FACTORY_MODE",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_NEW_MESSAGE",
            "com.android.server.cover.NfcLedCoverController.sendCurrentClockCommand()",
            "com.android.server.cover.NfcLedCoverController.DEBUG",
            "com.android.server.cover.NfcLedCoverController.NfcLedCoverController(android.os.Looper, android.content.Context)",
            "com.android.server.cover.NfcLedCoverController.SAFE_DEBUG",
            "com.android.server.cover.NfcLedCoverController.access$600(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.access$100(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.EVENT_RESULT_REJECT",
            "com.android.server.cover.NfcLedCoverController.handleSendPowerKeyToCover()",
            "com.android.server.cover.NfcLedCoverController.getCallDuration()",
            "com.android.server.cover.NfcLedCoverController.mResponsePattern",
            "com.android.server.cover.NfcLedCoverController.MSG_SEND_POWER_KEY_TO_COVER",
            "com.android.server.cover.NfcLedCoverController.RESPONSE_COMMAND_POS",
            "com.android.server.cover.NfcLedCoverController.MSG_LED_OFF_BY_SELF",
            "com.android.server.cover.NfcLedCoverController.access$200(com.android.server.cover.NfcLedCoverController, int, byte[])",
            "com.android.server.cover.NfcLedCoverController.registerNfcTouchListenerCallback(int, android.os.IBinder, android.content.ComponentName)",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_MAX",
            "com.android.server.cover.NfcLedCoverController.access$700(com.android.server.cover.NfcLedCoverController, int)",
            "com.android.server.cover.NfcLedCoverController.mPowerManager",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CLEAR_ONGOING_EVENT",
            "com.android.server.cover.NfcLedCoverController.isValidCoverStartData(byte[])",
            "com.android.server.cover.NfcLedCoverController.mLedCoverTransceiveRetryCount",
            "com.android.server.cover.NfcLedCoverController.access$1300(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.handleClearOngoingEvent(int)",
            "com.android.server.cover.NfcLedCoverController.mCallStartTime",
            "com.android.server.cover.NfcLedCoverController.LED_COVER_RETRY_DONE_INTENT_ACTION",
            "com.android.server.cover.NfcLedCoverController.mIsLedOn",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_TIMER",
            "com.android.server.cover.NfcLedCoverController.mContext",
            "com.android.server.cover.NfcLedCoverController.handleInvalidCommand(int, byte[], byte[])",
            "com.android.server.cover.NfcLedCoverController.TAG",
            "com.android.server.cover.NfcLedCoverController.access$500(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_ALARM",
            "com.android.server.cover.NfcLedCoverController.MSG_NFC_LED_HANDLE_EVENT_RESPONSE",
            "com.android.server.cover.NfcLedCoverController.handleSendDataToNfcLedCover(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.mSendLedDataWakeLock",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CLOCK",
            "com.android.server.cover.NfcLedCoverController.RESPONSE_LEN_POS",
            "com.android.server.cover.NfcLedCoverController.mLedOnOffWakeLock",
            "com.android.server.cover.NfcLedCoverController.mCallDurationTimer",
            "com.android.server.cover.NfcLedCoverController.getListenerTypeForCommand(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.getLenByteValue(byte[])",
            "com.android.server.cover.NfcLedCoverController.isValidResponse(int, int, byte[])",
            "com.android.server.cover.NfcLedCoverController.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.NfcLedCoverController.unRegisterNfcTouchListenerCallback(android.os.IBinder)",
            "com.android.server.cover.NfcLedCoverController.access$900(com.android.server.cover.NfcLedCoverController, int)",
            "com.android.server.cover.NfcLedCoverController.sendDataToNfcLedCover(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.mPollingTouchEvents",
            "com.android.server.cover.NfcLedCoverController.access$300(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.CMD_INTERNAL_LED_CALL_INPROGRESS",
            "com.android.server.cover.NfcLedCoverController.handlePollEventTouch(int)",
            "com.android.server.cover.NfcLedCoverController.sendPowerKeyToCover()",
            "com.android.server.cover.NfcLedCoverController.mLedCoverStartRetryCount",
            "com.android.server.cover.NfcLedCoverController.stopCallInProgressDisplayTimer()",
            "com.android.server.cover.NfcLedCoverController.CMD_INTERNAL_LED_ACCEPT_REJECT",
            "com.android.server.cover.NfcLedCoverController.access$1100(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.testCount",
            "com.android.server.cover.NfcLedCoverController.mOngoingEvent",
            "com.android.server.cover.NfcLedCoverController.mHandler",
            "com.android.server.cover.NfcLedCoverController.setOngoingEvent(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.MSG_NFC_LED_POLL_EVENT_TOUCH",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_OFF",
            "com.android.server.cover.NfcLedCoverController.LED_COVER_RETRY_DELAY",
            "com.android.server.cover.NfcLedCoverController.static {}",
            "com.android.server.cover.NfcLedCoverController.mCallInProgressDisplay",
            "com.android.server.cover.NfcLedCoverController.getByteDataString(byte[])",
            "com.android.server.cover.NfcLedCoverController.access$800(com.android.server.cover.NfcLedCoverController, int, int)",
            "com.android.server.cover.NfcLedCoverController.access$402(com.android.server.cover.NfcLedCoverController, int)",
            "com.android.server.cover.NfcLedCoverController.buildNfcCoverLedData(int, byte[])",
            "com.android.server.cover.NfcLedCoverController.isSingleMissedEvent(byte[])",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_CALL",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_INDICATOR",
            "com.android.server.cover.NfcLedCoverController.MSG_CLEAR_ONGOING_EVENT",
            "com.android.server.cover.NfcLedCoverController.LED_COVER_RETRY_COUNT_MAX",
            "com.android.server.cover.NfcLedCoverController.mListeners",
            "com.android.server.cover.NfcLedCoverController.clearOngoingEvent()",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_POWER_ON",
            "com.android.server.cover.NfcLedCoverController.EVENT_RESULT_ACCEPT",
            "com.android.server.cover.NfcLedCoverController.TEST",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_SCHEDULE",
            "com.android.server.cover.NfcLedCoverController.mIsLedCoverAttached",
            "com.android.server.cover.NfcLedCoverController.EVENT_TOUCH_POLL_INTERVAL",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_BATTERY_CHARGING",
            "com.android.server.cover.NfcLedCoverController.isFinishedTouchReply(byte[])",
            "com.android.server.cover.NfcLedCoverController.mCallDurationUpdateTask",
            "com.android.server.cover.NfcLedCoverController.mNfcAdapter",
            "com.android.server.cover.NfcLedCoverController.startCallInProgressDisplayTimer(byte[])",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_BATTERY_LOW",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_BATTERY_CHARGING_WIRELESS_DELAY",
            "com.android.server.cover.NfcLedCoverController.access$000(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.access$1200(com.android.server.cover.NfcLedCoverController)",
            "com.android.server.cover.NfcLedCoverController.handleEventResponse(int, int)",
            "com.android.server.cover.NfcLedCoverController.tryStartLedCover()",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_CALL_INPROGRESS",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_MISSED_EVENT",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_VOICE_RECORDER"
          ],
          "added": [
            "com.android.server.cover.NfcLedCoverController.mCallTimerLock",
            "com.android.server.cover.NfcLedCoverController.notifyLedOffListeners(int)",
            "com.android.server.cover.NfcLedCoverController.access$1600(com.android.server.cover.NfcLedCoverController, byte[])",
            "com.android.server.cover.NfcLedCoverController.SYSTEM_EVENT_LED_OFF",
            "com.android.server.cover.NfcLedCoverController.CMD_LED_VIDEO_CALL_INCOMING",
            "com.android.server.cover.NfcLedCoverController.SYSTEM_EVENT_POWER_BUTTON_ON",
            "com.android.server.cover.NfcLedCoverController.access$1402(com.android.server.cover.NfcLedCoverController, int)",
            "com.android.server.cover.NfcLedCoverController.SYSTEM_EVENT_POWER_BUTTON_OFF",
            "com.android.server.cover.NfcLedCoverController.EVENT_TYPE_SYSTEM_INTERNAL_EVENT",
            "com.android.server.cover.NfcLedCoverController.access$1500(com.android.server.cover.NfcLedCoverController)"
          ],
          "name": "com.android.server.cover.NfcLedCoverController",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.NfcLedCoverController$Command.data",
            "com.android.server.cover.NfcLedCoverController$Command.code",
            "com.android.server.cover.NfcLedCoverController$Command.toString()",
            "com.android.server.cover.NfcLedCoverController$Command.NfcLedCoverController$Command(com.android.server.cover.NfcLedCoverController, int, byte[])",
            "com.android.server.cover.NfcLedCoverController$Command.this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$Command",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.text.format.DateFormat.format(java.lang.CharSequence, long)",
            "android.text.format.DateFormat.is24HourFormat(android.content.Context)",
            "android.text.format.DateFormat.is24HourFormat(android.content.Context, int)",
            "android.text.format.DateFormat.format(java.lang.CharSequence, java.util.Date)",
            "android.text.format.DateFormat.getBestDateTimePattern(java.util.Locale, java.lang.String)"
          ],
          "added": [],
          "name": "android.text.format.DateFormat",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$5.run()",
            "com.android.server.cover.CoverManagerService$5.CoverManagerService$5(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService$5.this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$3.this$0",
            "com.android.server.cover.CoverManagerService$3.CoverManagerService$3(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService$3.run()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$1.CoverManagerService$1(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService$1.run()",
            "com.android.server.cover.CoverManagerService$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$6.this$0",
            "com.android.server.cover.CoverManagerService$6.run()",
            "com.android.server.cover.CoverManagerService$6.CoverManagerService$6(com.android.server.cover.CoverManagerService)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService.notifyCoverSwitchStateChanged(long, boolean)",
            "com.android.server.cover.CoverManagerService.COVER_OPEN",
            "com.android.server.cover.CoverManagerService.mCoverTestModeUtils",
            "com.android.server.cover.CoverManagerService.readTouchChannelCount()",
            "com.android.server.cover.CoverManagerService.SERVICE_VERSION",
            "com.android.server.cover.CoverManagerService.unregisterCallbackForExternal(android.os.IBinder)",
            "com.android.server.cover.CoverManagerService.COVER_CLOSED",
            "com.android.server.cover.CoverManagerService.mCoverState",
            "com.android.server.cover.CoverManagerService.getVersion()",
            "com.android.server.cover.CoverManagerService.mInputManager",
            "com.android.server.cover.CoverManagerService.mSmartCoverAppController",
            "com.android.server.cover.CoverManagerService.MOBILE_KEYBOARD_KOR",
            "com.android.server.cover.CoverManagerService.updateCoverSwitchStateLocked(boolean)",
            "com.android.server.cover.CoverManagerService.access$302(com.android.server.cover.CoverManagerService, boolean)",
            "com.android.server.cover.CoverManagerService.sendCoverSwitchStateLocked(boolean, boolean)",
            "com.android.server.cover.CoverManagerService.mCoverHideAnimator",
            "com.android.server.cover.CoverManagerService.needToBoost()",
            "com.android.server.cover.CoverManagerService.mWindowManager",
            "com.android.server.cover.CoverManagerService.registerListenerCallbackForExternal(android.os.IBinder, android.content.ComponentName, int)",
            "com.android.server.cover.CoverManagerService.onCoverAppCovered(boolean)",
            "com.android.server.cover.CoverManagerService.sendDataToNfcLedCover(int, byte[])",
            "com.android.server.cover.CoverManagerService.sendBackoffRequest(int, boolean)",
            "com.android.server.cover.CoverManagerService.sendTouchRegionForExternal(byte[], int, int)",
            "com.android.server.cover.CoverManagerService.notifyCoverAttachStateChanged(long, boolean)",
            "com.android.server.cover.CoverManagerService.COVER_DETACH",
            "com.android.server.cover.CoverManagerService.mAnimationStartCallback",
            "com.android.server.cover.CoverManagerService.mPackageName",
            "com.android.server.cover.CoverManagerService.mHandler",
            "com.android.server.cover.CoverManagerService.checkNeedThread(byte[], int, int)",
            "com.android.server.cover.CoverManagerService.unregisterCallback(android.os.IBinder, boolean)",
            "com.android.server.cover.CoverManagerService.mNfcLedCoverController",
            "com.android.server.cover.CoverManagerService.notifySmartCoverAttachStateChanged(long, boolean, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.CoverManagerService.updateCoverSwitchState(boolean, boolean)",
            "com.android.server.cover.CoverManagerService.registerCallback(android.os.IBinder, android.content.ComponentName)",
            "com.android.server.cover.CoverManagerService.sendCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.CoverManagerService.mCalledByTestModule",
            "com.android.server.cover.CoverManagerService.sendTouchRegion(byte[], int, int)",
            "com.android.server.cover.CoverManagerService.updateCoverAttachState(boolean, boolean, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.CoverManagerService.updateCoverAttachState(boolean, boolean)",
            "com.android.server.cover.CoverManagerService.systemReady()",
            "com.android.server.cover.CoverManagerService.TRANSMIT_POWER_DEFAULT",
            "com.android.server.cover.CoverManagerService.isThemeCover(java.lang.String)",
            "com.android.server.cover.CoverManagerService.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.CoverManagerService.CoverManagerService(android.content.Context, com.android.server.wm.WindowManagerService, com.android.server.input.InputManagerService)",
            "com.android.server.cover.CoverManagerService.DEBUG",
            "com.android.server.cover.CoverManagerService.mStateNotifier",
            "com.android.server.cover.CoverManagerService.mCoverVerifier",
            "com.android.server.cover.CoverManagerService.getCoverSwitchStateFromInputManager()",
            "com.android.server.cover.CoverManagerService.mCoverManagerWhiteLists",
            "com.android.server.cover.CoverManagerService.mPackageManager",
            "com.android.server.cover.CoverManagerService.TRANSMIT_POWER_HALLIC_REST",
            "com.android.server.cover.CoverManagerService.getCoverState(boolean)",
            "com.android.server.cover.CoverManagerService.isCoverManagerDisabled()",
            "com.android.server.cover.CoverManagerService.registerNfcTouchListenerCallback(int, android.os.IBinder, android.content.ComponentName)",
            "com.android.server.cover.CoverManagerService.TAG",
            "com.android.server.cover.CoverManagerService.disableCoverManager(boolean, android.os.IBinder, java.lang.String)",
            "com.android.server.cover.CoverManagerService.access$000(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService.getCoverState()",
            "com.android.server.cover.CoverManagerService.registerListenerCallback(android.os.IBinder, android.content.ComponentName, int)",
            "com.android.server.cover.CoverManagerService.readTouchChannelCountForExternal()",
            "com.android.server.cover.CoverManagerService.MOBILE_KEYBOARD_US",
            "com.android.server.cover.CoverManagerService.access$200(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService.mLedCoverController",
            "com.android.server.cover.CoverManagerService.mPowerManager",
            "com.android.server.cover.CoverManagerService.COVER_ATTACH",
            "com.android.server.cover.CoverManagerService.mCoverDisabler",
            "com.android.server.cover.CoverManagerService.sendPowerKeyToCover()",
            "com.android.server.cover.CoverManagerService.SAFE_DEBUG",
            "com.android.server.cover.CoverManagerService.unregisterNfcTouchListenerCallback(android.os.IBinder)",
            "com.android.server.cover.CoverManagerService.access$100(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService.TRANSMIT_POWER_HALLIC_LED",
            "com.android.server.cover.CoverManagerService.mContext",
            "com.android.server.cover.CoverManagerService.mThread",
            "com.android.server.cover.CoverManagerService.registerListenerCallback(android.os.IBinder, android.content.ComponentName, int, boolean)",
            "com.android.server.cover.CoverManagerService.sendDataToCover(int, byte[])",
            "com.android.server.cover.CoverManagerService.unregisterCallback(android.os.IBinder)",
            "com.android.server.cover.CoverManagerService.getCoverAttachStateFromInputManager()",
            "com.android.server.cover.CoverManagerService.mSystemReady",
            "com.android.server.cover.CoverManagerService.mNeedBackOffRequest",
            "com.android.server.cover.CoverManagerService.mOnCoverTestModeCallback",
            "com.android.server.cover.CoverManagerService.COVER_ABSENT",
            "com.android.server.cover.CoverManagerService.getCoverStateForExternal()",
            "com.android.server.cover.CoverManagerService.sendCoverSwitchStateLocked(boolean, boolean, boolean, boolean)",
            "com.android.server.cover.CoverManagerService.setCoverPackage(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerWhiteLists.isMatchedSignature(android.content.pm.Signature[], int)",
            "com.android.server.cover.CoverManagerWhiteLists.hasSamsungKey(android.content.pm.Signature[])",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_MSC",
            "com.android.server.cover.CoverManagerWhiteLists.setupSignaturesMap()",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_MOBILEDESK",
            "com.android.server.cover.CoverManagerWhiteLists.mPrefixPackage",
            "com.android.server.cover.CoverManagerWhiteLists.getPackageForPid(android.content.Context, int)",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_SAMSUNG_APPLICATION",
            "com.android.server.cover.CoverManagerWhiteLists.setupWhiteList()",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_LGUUWA",
            "com.android.server.cover.CoverManagerWhiteLists.isAllowedToUse(android.content.Context, int, int)",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_SHEALTH",
            "com.android.server.cover.CoverManagerWhiteLists.TAG",
            "com.android.server.cover.CoverManagerWhiteLists.SAFE_DEBUG",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_CHATONBLUE",
            "com.android.server.cover.CoverManagerWhiteLists.mWhiteList",
            "com.android.server.cover.CoverManagerWhiteLists.mSignaturesMap",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_MAX",
            "com.android.server.cover.CoverManagerWhiteLists.static {}",
            "com.android.server.cover.CoverManagerWhiteLists.CoverManagerWhiteLists()",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_SOUNDPHONE",
            "com.android.server.cover.CoverManagerWhiteLists.getSignatures(int)",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_SAMSUNG_SHARED",
            "com.android.server.cover.CoverManagerWhiteLists.setPrefixPackage()",
            "com.android.server.cover.CoverManagerWhiteLists.getInstance()",
            "com.android.server.cover.CoverManagerWhiteLists.sInstance",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_WHOWHO",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_AMC_1",
            "com.android.server.cover.CoverManagerWhiteLists.convertPackageName(java.lang.String)",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_AMC_2",
            "com.android.server.cover.CoverManagerWhiteLists.SIGNATURE_SAMSUNG_PLATFORM"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerWhiteLists",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$2.onCoverTestModeChanged(int, boolean)",
            "com.android.server.cover.CoverManagerService$2.this$0",
            "com.android.server.cover.CoverManagerService$2.CoverManagerService$2(com.android.server.cover.CoverManagerService)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$CoverManagerHandler.handleMessage(android.os.Message)",
            "com.android.server.cover.CoverManagerService$CoverManagerHandler.this$0",
            "com.android.server.cover.CoverManagerService$CoverManagerHandler.CoverManagerService$CoverManagerHandler(com.android.server.cover.CoverManagerService, android.os.Looper)",
            "com.android.server.cover.CoverManagerService$CoverManagerHandler.post(java.lang.Runnable)",
            "com.android.server.cover.CoverManagerService$CoverManagerHandler.postDelayed(java.lang.Runnable, long)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$CoverManagerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$CoverShapeThread.mPreDefArray",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SMART_COVER_CMD_CHANGE",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.start()",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SMART_COVER_CMD_MODEON",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.sysfsWrite(java.lang.String, java.lang.String)",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.mCoverHeight",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SMART_COVER_CMD_WRITE",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.mCoverWidth",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.NUM_FOR_CMD_DATA",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.CMD_DELAY_TIME",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SYSFS_TSP_CMD",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.CoverManagerService$CoverShapeThread(com.android.server.cover.CoverManagerService, byte[], int, int)",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.mCoverShapeArray",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SMART_COVER_CMD",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.run()",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.this$0",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.getShapeCmdData(int)",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.sleepForCmdDelay(int)",
            "com.android.server.cover.CoverManagerService$CoverShapeThread.SMART_COVER_CMD_CLEAR"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$CoverShapeThread",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverVerifier.onUpdateCoverVerifiedLocked()",
            "com.android.server.cover.CoverVerifier.isCoverVerifiedAndAttached()",
            "com.android.server.cover.CoverVerifier.mIsCoverVerified",
            "com.android.server.cover.CoverVerifier.mDefaultSViewCoverHeight",
            "com.android.server.cover.CoverVerifier.mDefaultCoverModel",
            "com.android.server.cover.CoverVerifier.mDefaultSViewCoverWidth",
            "com.android.server.cover.CoverVerifier.TAG",
            "com.android.server.cover.CoverVerifier.mDefaultClearCoverHeight",
            "com.android.server.cover.CoverVerifier.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.CoverVerifier.DEBUG",
            "com.android.server.cover.CoverVerifier.getSupportSViewCoverWidth(int)",
            "com.android.server.cover.CoverVerifier.mDefaultClearCoverWidth",
            "com.android.server.cover.CoverVerifier.isFactoryMode()",
            "com.android.server.cover.CoverVerifier.mDefaultCoverColor",
            "com.android.server.cover.CoverVerifier.mDefaultMiniSViewCoverWidth",
            "com.android.server.cover.CoverVerifier.onUpdateCoverAttachedLocked(boolean)",
            "com.android.server.cover.CoverVerifier.SAFE_DEBUG",
            "com.android.server.cover.CoverVerifier.mDefaultMiniSViewCoverHeight",
            "com.android.server.cover.CoverVerifier.mIsCoverAttached",
            "com.android.server.cover.CoverVerifier.getSupportSViewCoverHeight(int)",
            "com.android.server.cover.CoverVerifier.initializeDefaultCoverState()",
            "com.android.server.cover.CoverVerifier.isCoverAttached()",
            "com.android.server.cover.CoverVerifier.CoverVerifier(android.content.Context)",
            "com.android.server.cover.CoverVerifier.getDefaultTypeOfCover()",
            "com.android.server.cover.CoverVerifier.updateCoverPropertiesLocked(com.samsung.android.cover.CoverState, com.samsung.android.cover.CoverState)",
            "com.android.server.cover.CoverVerifier.isCoverVerified()",
            "com.android.server.cover.CoverVerifier.mContext"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverVerifier",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerService$4.CoverManagerService$4(com.android.server.cover.CoverManagerService)",
            "com.android.server.cover.CoverManagerService$4.this$0",
            "com.android.server.cover.CoverManagerService$4.run()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.CoverState.setModel(int)",
            "com.samsung.android.cover.CoverState.setFakeCover(boolean)",
            "com.samsung.android.cover.CoverState.setType(int)",
            "com.samsung.android.cover.CoverState.heightPixel",
            "com.samsung.android.cover.CoverState.setWindowWidth(int)",
            "com.samsung.android.cover.CoverState.switchState",
            "com.samsung.android.cover.CoverState.getSmartCoverAppUri()",
            "com.samsung.android.cover.CoverState.copyFrom(com.samsung.android.cover.CoverState)",
            "com.samsung.android.cover.CoverState.type",
            "com.samsung.android.cover.CoverState.model",
            "com.samsung.android.cover.CoverState.CoverState(boolean, int, int, int, int, boolean)",
            "com.samsung.android.cover.CoverState.getAttachState()",
            "com.samsung.android.cover.CoverState.getType()",
            "com.samsung.android.cover.CoverState.getModel()",
            "com.samsung.android.cover.CoverState.setSerialNumber(java.lang.String)",
            "com.samsung.android.cover.CoverState.getSerialNumber()",
            "com.samsung.android.cover.CoverState.widthPixel",
            "com.samsung.android.cover.CoverState.setAttachState(boolean)",
            "com.samsung.android.cover.CoverState.updateCoverState(int, int, int, int, boolean, int)",
            "com.samsung.android.cover.CoverState.setSmartCoverCookie(byte[])",
            "com.samsung.android.cover.CoverState.setColor(int)",
            "com.samsung.android.cover.CoverState.attached",
            "com.samsung.android.cover.CoverState.smartCoverAppUri",
            "com.samsung.android.cover.CoverState.toString()",
            "com.samsung.android.cover.CoverState.setSmartCoverAppUri(java.lang.String)",
            "com.samsung.android.cover.CoverState.CoverState(boolean, int, int, boolean, int, java.lang.String, byte[], java.lang.String, boolean)",
            "com.samsung.android.cover.CoverState.color",
            "com.samsung.android.cover.CoverState.getSwitchState()",
            "com.samsung.android.cover.CoverState.getWindowWidth()",
            "com.samsung.android.cover.CoverState.getColor()",
            "com.samsung.android.cover.CoverState.getWindowHeight()",
            "com.samsung.android.cover.CoverState.setWindowHeight(int)",
            "com.samsung.android.cover.CoverState.CoverState()",
            "com.samsung.android.cover.CoverState.setSwitchState(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.CoverState",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_LED_UART_SLSI",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_VERIFY",
            "com.android.server.cover.CoverManagerUtils.readCmdResult(java.lang.String)",
            "com.android.server.cover.CoverManagerUtils.sendCoverInformationToAgent(android.content.Context, java.lang.String, boolean)",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_LED_UART_QCOM",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_LED_PWR_QCOM",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_LED_PWR_SLSI",
            "com.android.server.cover.CoverManagerUtils.readResult()",
            "com.android.server.cover.CoverManagerUtils.sCoverCoreNumLockHelper",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_SERIAL_NUMBER",
            "com.android.server.cover.CoverManagerUtils.readStatus()",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_COLOR",
            "com.android.server.cover.CoverManagerUtils.getTouchChannelCount(java.lang.String)",
            "com.android.server.cover.CoverManagerUtils.getValueFromSysFS(java.lang.String, java.lang.String)",
            "com.android.server.cover.CoverManagerUtils.isFileExists(java.lang.String)",
            "com.android.server.cover.CoverManagerUtils.sCoverBusBooster",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_TYPE",
            "com.android.server.cover.CoverManagerUtils.SAFE_DEBUG",
            "com.android.server.cover.CoverManagerUtils.getValueFromSysFS(java.lang.String, int)",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_PARTIAL_DISP",
            "com.android.server.cover.CoverManagerUtils.COVER_TOUCH_REGION_Y",
            "com.android.server.cover.CoverManagerUtils.COVER_TOUCH_REGION_X",
            "com.android.server.cover.CoverManagerUtils.setPartialScreen(boolean, int)",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_DETECT",
            "com.android.server.cover.CoverManagerUtils.showRuggedizedPopup(android.content.Context, boolean, boolean)",
            "com.android.server.cover.CoverManagerUtils.BOOSTING_TIMEOUT",
            "com.android.server.cover.CoverManagerUtils.static {}",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_MODEL",
            "com.android.server.cover.CoverManagerUtils.writeCmd(java.lang.String)",
            "com.android.server.cover.CoverManagerUtils.CoverManagerUtils()",
            "com.android.server.cover.CoverManagerUtils.sCoverCpuBooster",
            "com.android.server.cover.CoverManagerUtils.performCPUBoostCover(android.content.Context)",
            "com.android.server.cover.CoverManagerUtils.DEBUG",
            "com.android.server.cover.CoverManagerUtils.TAG",
            "com.android.server.cover.CoverManagerUtils.PATH_FILE_COVER_VERIFY_FAKE"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerUtils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.Feature.isSupportSViewCover()",
            "com.android.server.cover.Feature.sIsSupportFlipCover",
            "com.android.server.cover.Feature.isSupportLEDCoverLSI()",
            "com.android.server.cover.Feature.sIsDeviceSupportVerityCover",
            "com.android.server.cover.Feature.isSupportWindowCover()",
            "com.android.server.cover.Feature.FEATURE_COVER_NFC_AUTHENTICATION",
            "com.android.server.cover.Feature.sIsClearCoverSystemFeatureEnabled",
            "com.android.server.cover.Feature.isSupportNfcLedCover()",
            "com.android.server.cover.Feature.sInstance",
            "com.android.server.cover.Feature.sDeviceTypeProperty",
            "com.android.server.cover.Feature.isSupportLEDCoverQCOM()",
            "com.android.server.cover.Feature.FEATURE_COVER_SVIEWCOVER",
            "com.android.server.cover.Feature.isSupportClearCover()",
            "com.android.server.cover.Feature.sIsDeviceSupportDetectCover",
            "com.android.server.cover.Feature.isSupportVerifyCover()",
            "com.android.server.cover.Feature.static {}",
            "com.android.server.cover.Feature.sIsSupportLEDCoverQCOM",
            "com.android.server.cover.Feature.sIsSupportLEDCover",
            "com.android.server.cover.Feature.sIsSupportSViewCover",
            "com.android.server.cover.Feature.sIsSupportLEDCoverLSI",
            "com.android.server.cover.Feature.Feature(android.content.Context)",
            "com.android.server.cover.Feature.isChinaModel()",
            "com.android.server.cover.Feature.isSupportLEDCover()",
            "com.android.server.cover.Feature.isSupportSmartCover()",
            "com.android.server.cover.Feature.isTablet()",
            "com.android.server.cover.Feature.sHardwareProperty",
            "com.android.server.cover.Feature.TAG",
            "com.android.server.cover.Feature.FEATURE_COVER_NFC_LED_COVER",
            "com.android.server.cover.Feature.FEATURE_COVER_SMARTCOVER",
            "com.android.server.cover.Feature.getSystemProperties()",
            "com.android.server.cover.Feature.sIsDeviceSupportQueried",
            "com.android.server.cover.Feature.updateDeviceSupportFeature()",
            "com.android.server.cover.Feature.isRuggedizedFeatureEnabled()",
            "com.android.server.cover.Feature.FEATURE_COVER_CLEARCOVER",
            "com.android.server.cover.Feature.sIsSupportNfcLedCover",
            "com.android.server.cover.Feature.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.cover.Feature.DEBUG",
            "com.android.server.cover.Feature.SAFE_DEBUG",
            "com.android.server.cover.Feature.isMobileKeyboardFeatureEnabled()",
            "com.android.server.cover.Feature.sIsNfcAuthSystemFeatureEnabled",
            "com.android.server.cover.Feature.getInstance(android.content.Context)",
            "com.android.server.cover.Feature.sIsSystemFeatureQueried",
            "com.android.server.cover.Feature.isSupportDetectCover()",
            "com.android.server.cover.Feature.sIsSmartCoverSystemFeatureEnabled",
            "com.android.server.cover.Feature.sIsSupportWindowCover",
            "com.android.server.cover.Feature.isNfcAuthEnabled()",
            "com.android.server.cover.Feature.isSupportFlipCover()",
            "com.android.server.cover.Feature.updateSystemFeature(android.content.Context)"
          ],
          "added": [],
          "name": "com.android.server.cover.Feature",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.ICoverWindowStateListenerCallback.onCoverAppCovered(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverWindowStateListenerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.ICoverStateListenerCallback.onCoverSwitchStateChanged(boolean)",
            "com.samsung.android.cover.ICoverStateListenerCallback.onCoverAttachStateChanged(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverStateListenerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.this$0",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.type",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.binderDied()",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.pid",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.onCoverSwitchStateChanged(boolean)",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.onCoverSwitchStateChanged(com.samsung.android.cover.CoverState)",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.token",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.onCoverAppCovered(boolean)",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.onCoverAttachStateChanged(boolean)",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.component",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.StateNotifier$CoverStateListenerInfo(com.android.server.cover.StateNotifier, android.os.IBinder, android.content.ComponentName, int, int, int)",
            "com.android.server.cover.StateNotifier$CoverStateListenerInfo.uid"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$CoverStateListenerInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.ICoverManagerCallback.coverCallback(com.samsung.android.cover.CoverState)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverManagerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.ICoverWindowStateListenerCallback$Stub.asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverWindowStateListenerCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.NfcLedCoverController$NfcLedTouchListenerInfo(com.android.server.cover.NfcLedCoverController, android.os.IBinder, android.content.ComponentName, int, int, int)",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.this$0",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.onCoverTouchAccept()",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.type",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.uid",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.component",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.onCoverTouchReject()",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.binderDied()",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.pid",
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.token"
          ],
          "added": [
            "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo.onSystemCoverEvent(int, int[])"
          ],
          "name": "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.android.cover.INfcLedCoverTouchListenerCallback.onCoverTouchAccept()",
            "com.samsung.android.cover.INfcLedCoverTouchListenerCallback.onCoverTouchReject()"
          ],
          "added": [
            "com.samsung.android.cover.INfcLedCoverTouchListenerCallback.onSystemCoverEvent(int, int[])"
          ],
          "name": "com.samsung.android.cover.INfcLedCoverTouchListenerCallback",
          "change_type": 3
        }
      ],
      "name": "com.android.server.cover.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2.CertBlacklister$BlacklistObserver$2(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2.start()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2.this$0",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2.run()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1.this$0",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1.run()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1.CertBlacklister$BlacklistObserver$1(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1.start()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.getValue()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.onChange(boolean)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.mBlacklist",
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.CertBlacklister$AuthenticationSettingObserver(java.lang.String, android.content.ContentResolver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.mContentResolver",
            "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver.mKey"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister.access$400()",
            "com.samsung.accessory.manager.authentication.CertBlacklister.mCertBlacklistListener",
            "com.samsung.accessory.manager.authentication.CertBlacklister.isThisKeyBlacklisted(java.lang.String)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.BLACKLIST_ROOT",
            "com.samsung.accessory.manager.authentication.CertBlacklister.buildAuthenticationSettingObserver(android.content.ContentResolver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.setCertBlacklistListener(com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.CertBlacklister(android.content.Context)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.AUTHENTICATION_BLOCKED_KEY",
            "com.samsung.accessory.manager.authentication.CertBlacklister.PUBKEY_BLACKLIST_KEY",
            "com.samsung.accessory.manager.authentication.CertBlacklister.readFile()",
            "com.samsung.accessory.manager.authentication.CertBlacklister.TAG",
            "com.samsung.accessory.manager.authentication.CertBlacklister.mIsBlocked",
            "com.samsung.accessory.manager.authentication.CertBlacklister.access$000()",
            "com.samsung.accessory.manager.authentication.CertBlacklister.buildPubkeyObserver(android.content.ContentResolver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.static {}",
            "com.samsung.accessory.manager.authentication.CertBlacklister.PUBKEY_PATH",
            "com.samsung.accessory.manager.authentication.CertBlacklister.registerObservers(android.content.ContentResolver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister.isAuthenticationBlocked()",
            "com.samsung.accessory.manager.authentication.CertBlacklister.BLACKLIST_SEPARATOR",
            "com.samsung.accessory.manager.authentication.CertBlacklister.DBG",
            "com.samsung.accessory.manager.authentication.CertBlacklister.mBlacklistObserver",
            "com.samsung.accessory.manager.authentication.CertBlacklister.access$502(boolean)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.access$300(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.access$200(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mBlacklist",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.writeBlacklist()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mPath",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mKey",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mName",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.isThisKeyBlacklisted(java.lang.String)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mTmpDir",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.access$100(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.getValue()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.readFile()",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.access$202(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.mContentResolver",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.onChange(boolean)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver.CertBlacklister$BlacklistObserver(java.lang.String, java.lang.String, java.lang.String, android.content.ContentResolver)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener.onAuthenticationBlocked(boolean)",
            "com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener.onCertBlacklistChanged()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.Authenticator.onAuthenticationChallenge(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "com.samsung.accessory.manager.authentication.Authenticator.setStateChangedCallback(com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback)",
            "com.samsung.accessory.manager.authentication.Authenticator.close()",
            "com.samsung.accessory.manager.authentication.Authenticator.connect()",
            "com.samsung.accessory.manager.authentication.Authenticator.setConnection(com.samsung.accessory.manager.connectivity.Connectivity)",
            "com.samsung.accessory.manager.authentication.Authenticator.mType",
            "com.samsung.accessory.manager.authentication.Authenticator.mContext",
            "com.samsung.accessory.manager.authentication.Authenticator.onInterrupted()",
            "com.samsung.accessory.manager.authentication.Authenticator.getConnectivityType()",
            "com.samsung.accessory.manager.authentication.Authenticator.sendStartAuth()",
            "com.samsung.accessory.manager.authentication.Authenticator.sendStopAuth()",
            "com.samsung.accessory.manager.authentication.Authenticator.sendSynchronously(byte[])",
            "com.samsung.accessory.manager.authentication.Authenticator.getConnectivity()",
            "com.samsung.accessory.manager.authentication.Authenticator.disconnect()",
            "com.samsung.accessory.manager.authentication.Authenticator.Authenticator(android.content.Context)",
            "com.samsung.accessory.manager.authentication.Authenticator.mConnectivity",
            "com.samsung.accessory.manager.authentication.Authenticator.setConnection()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.Authenticator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.AuthenticationSession$1.onConnectionStateChanged(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$1.AuthenticationSession$1(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$1.this$0",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$1.onStateChanged(int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mStateLock",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$400(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_CONNECTED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.setAuthenticationResultCallback(com.samsung.accessory.manager.SAccessoryManager$AuthenticationResultCallback)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.WAITING_FOR_CONNECTIVITY_OFF",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1400(com.samsung.accessory.manager.authentication.AuthenticationSession, boolean)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_NONE",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mInternalState",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.getAuthenticationResult()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.handleTearDown()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.handleSetConnection()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mConnectAfterEnable",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_SESSION_STOP",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.replayAuthfail(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_STARTING",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mSessionThread",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mConnectivityStateCallback",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.getSessionState()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.handleStopSession(boolean)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_STOPPING",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.WAITING_FOR_CONNECTIVITY_ON",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mTeardownRequested",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$100()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_SET_CONNECTION",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.WAITING_FOR_CONNECTIVITY_ON_WHILE_SETUP",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.setState(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.createNewSession(android.content.Context, java.lang.String, int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_ON",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$200(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mContext",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.setSessionCallback(com.samsung.accessory.manager.authentication.AuthenticationSession$SessionEventListener)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mSessionEventListener",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$900(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1300(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mTurnedOffWhileRunning",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_OFF",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_READY",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.run()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1200(com.samsung.accessory.manager.authentication.AuthenticationSession, int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.disconnect()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_TIMEOUT",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.EVENT_SESSION_COMPLETE",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$802(com.samsung.accessory.manager.authentication.AuthenticationSession, boolean)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mSessionHandler",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mHandlerThread",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_SESSION_REQUEST_TEAR_DOWN",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$700(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.startAuthChall()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_DISCONNECTED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.setAuthenticator(android.content.Context, com.samsung.accessory.manager.authentication.Authenticator)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_STARTED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mResult",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mAuthenticator",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_SESSION_TIMEOUT",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mState",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.stopSession()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_STOPPED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_CONNECT",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_SESSION_START",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.connect()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.WAITING_RECEIVED_START_WHILE_STOPPING",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1102(com.samsung.accessory.manager.authentication.AuthenticationSession, java.lang.Thread)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.mAuthResultCallback",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.startSession()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.static {}",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.getConnectivityType()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.SESSION_STATE_ERROR",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1000(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.TAG",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.WAITING_FOR_CONNECTIVITY_OFF_WHILE_STOPPING",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.EVENT_SESSION_STARTED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$502(com.samsung.accessory.manager.authentication.AuthenticationSession, int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_TURNING_OFF",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$000(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.getAuthenticationCallback()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.handleStartSession()",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$1100(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$600(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.AuthenticationSession(android.content.Context, java.lang.String, int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.VDBG",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.EVENT_SESSION_STARTING",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.MSG_CONNECTIVITY_READY",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.EVENT_SESSION_STOPPED",
            "com.samsung.accessory.manager.authentication.AuthenticationSession.access$300(com.samsung.accessory.manager.authentication.AuthenticationSession, int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.hasMessages(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.this$0",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.handleMessage(android.os.Message)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.AuthenticationSession$EventHandler(com.samsung.accessory.manager.authentication.AuthenticationSession, android.os.Looper)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.removeMessages(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.sendEmptyMessage(int)",
            "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler.sendEmptyMessageDelayed(int, long)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.AuthenticationSession$SessionEventListener.onSessionEvent(int, com.samsung.accessory.manager.authentication.AuthenticationSession)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$SessionEventListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.connectivity.Connectivity.TAG",
            "com.samsung.accessory.manager.connectivity.Connectivity.enable()",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_ERROR",
            "com.samsung.accessory.manager.connectivity.Connectivity.NFC_MAX_CONNECTION",
            "com.samsung.accessory.manager.connectivity.Connectivity.BT_MAX_CONNECTION",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_OFF",
            "com.samsung.accessory.manager.connectivity.Connectivity.TYPE_NFC",
            "com.samsung.accessory.manager.connectivity.Connectivity.mStateChangedCallback",
            "com.samsung.accessory.manager.connectivity.Connectivity.sendStopAuth()",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_DISCONNECTED",
            "com.samsung.accessory.manager.connectivity.Connectivity.getMaxConnection(int)",
            "com.samsung.accessory.manager.connectivity.Connectivity.TYPE_USB",
            "com.samsung.accessory.manager.connectivity.Connectivity.Connectivity(android.content.Context)",
            "com.samsung.accessory.manager.connectivity.Connectivity.TYPE_NONE",
            "com.samsung.accessory.manager.connectivity.Connectivity.setStateChangedCallback(com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback)",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_CONNECTED",
            "com.samsung.accessory.manager.connectivity.Connectivity.TYPE_BT",
            "com.samsung.accessory.manager.connectivity.Connectivity.sendStartAuth()",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_TURNING_OFF",
            "com.samsung.accessory.manager.connectivity.Connectivity.close()",
            "com.samsung.accessory.manager.connectivity.Connectivity.isEnabledInternally()",
            "com.samsung.accessory.manager.connectivity.Connectivity.sendSynchronously(byte[])",
            "com.samsung.accessory.manager.connectivity.Connectivity.isEnabled()",
            "com.samsung.accessory.manager.connectivity.Connectivity.mContext",
            "com.samsung.accessory.manager.connectivity.Connectivity.getOutputStream()",
            "com.samsung.accessory.manager.connectivity.Connectivity.NOT_SUPPORT",
            "com.samsung.accessory.manager.connectivity.Connectivity.disable()",
            "com.samsung.accessory.manager.connectivity.Connectivity.static {}",
            "com.samsung.accessory.manager.connectivity.Connectivity.mEnabledInternal",
            "com.samsung.accessory.manager.connectivity.Connectivity.connect(java.lang.String)",
            "com.samsung.accessory.manager.connectivity.Connectivity.getInputStream()",
            "com.samsung.accessory.manager.connectivity.Connectivity.STATE_ON",
            "com.samsung.accessory.manager.connectivity.Connectivity.disconnect()",
            "com.samsung.accessory.manager.connectivity.Connectivity.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.connectivity.Connectivity",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback.onConnectionStateChanged(int)",
            "com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback.onStateChanged(int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getReqFirmwareVersion()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.randNum",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.mMsgHelper",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.MsgBuilder()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.makeRandomNumber()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getWriteCoverId(byte[])",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getReadCoverId()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getReqPubKey()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getDataVerification()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getReqUrl()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getKeyChange()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.getRandNum()",
            "com.samsung.accessory.manager.authentication.msg.MsgBuilder.mMsg"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.msg.MsgBuilder",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.authNFC(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.mType",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.mMsgParser",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_ATQS",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.randNum",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_REQURL",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_WRITE_ID",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_SEC_PUB_KEY",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.TAG",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.statusWord",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_READ_ID",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.mConnectivity",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.onInterrupted()",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.sendStartAuth()",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.sendSynchronously(byte[])",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.sendCommand(com.samsung.accessory.manager.authentication.AuthenticationResult, int)",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.RETRY_TIME",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.SW_SUCCESS",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.SW_FAIL",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.VDBG",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.onAuthenticationChallenge(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_VERIFICATION",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_PUB_KEY",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.checkError(int, byte[], com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.SW_SECURITY_ATTACK",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_FIRMWARE",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.isInterrupted",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.COMMAND_KEY_CHANGE",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.sendStopAuth()",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.AuthenticatorClientImpl(android.content.Context, int)",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.mMsgBuilder",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.byteArrayToString(byte[])",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.DBG",
            "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl.static {}"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl",
          "change_type": 2
        }
      ],
      "name": "com.samsung.accessory.manager.authentication.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "android.media.midi.IMidiDeviceServer.setDeviceInfo(android.media.midi.MidiDeviceInfo)",
            "android.media.midi.IMidiDeviceServer.getDeviceInfo()",
            "android.media.midi.IMidiDeviceServer.asBinder()",
            "android.media.midi.IMidiDeviceServer.closeDevice()"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceServer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IMidiDeviceOpenCallback.onDeviceOpened(android.media.midi.IMidiDeviceServer, android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceOpenCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IMidiDeviceListener.onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)",
            "android.media.midi.IMidiDeviceListener.onDeviceAdded(android.media.midi.MidiDeviceInfo)",
            "android.media.midi.IMidiDeviceListener.onDeviceRemoved(android.media.midi.MidiDeviceInfo)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$Lifecycle.mMidiService",
            "com.android.server.midi.MidiService$Lifecycle.publishBinderService(java.lang.String, android.os.IBinder)",
            "com.android.server.midi.MidiService$Lifecycle.onStart()",
            "com.android.server.midi.MidiService$Lifecycle.getContext()",
            "com.android.server.midi.MidiService$Lifecycle.MidiService$Lifecycle(android.content.Context)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Lifecycle",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$1.onPackageAdded(java.lang.String, int)",
            "com.android.server.midi.MidiService$1.onPackageModified(java.lang.String)",
            "com.android.server.midi.MidiService$1.MidiService$1(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService$1.this$0",
            "com.android.server.midi.MidiService$1.onPackageRemoved(java.lang.String, int)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$Client.removeDeviceConnection(android.os.IBinder)",
            "com.android.server.midi.MidiService$Client.mUid",
            "com.android.server.midi.MidiService$Client.removeDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "com.android.server.midi.MidiService$Client.mListeners",
            "com.android.server.midi.MidiService$Client.MidiService$Client(com.android.server.midi.MidiService, android.os.IBinder)",
            "com.android.server.midi.MidiService$Client.close()",
            "com.android.server.midi.MidiService$Client.mPid",
            "com.android.server.midi.MidiService$Client.addListener(android.media.midi.IMidiDeviceListener)",
            "com.android.server.midi.MidiService$Client.this$0",
            "com.android.server.midi.MidiService$Client.access$1200(com.android.server.midi.MidiService$Client)",
            "com.android.server.midi.MidiService$Client.addDeviceConnection(com.android.server.midi.MidiService$Device, android.media.midi.IMidiDeviceOpenCallback)",
            "com.android.server.midi.MidiService$Client.mDeviceConnections",
            "com.android.server.midi.MidiService$Client.mToken",
            "com.android.server.midi.MidiService$Client.deviceAdded(com.android.server.midi.MidiService$Device)",
            "com.android.server.midi.MidiService$Client.removeListener(android.media.midi.IMidiDeviceListener)",
            "com.android.server.midi.MidiService$Client.deviceRemoved(com.android.server.midi.MidiService$Device)",
            "com.android.server.midi.MidiService$Client.deviceStatusChanged(com.android.server.midi.MidiService$Device, android.media.midi.MidiDeviceStatus)",
            "com.android.server.midi.MidiService$Client.toString()",
            "com.android.server.midi.MidiService$Client.binderDied()",
            "com.android.server.midi.MidiService$Client.getUid()"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Client",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService.notifyDeviceStatusChanged(com.android.server.midi.MidiService$Device, android.media.midi.MidiDeviceStatus)",
            "com.android.server.midi.MidiService.getDevices()",
            "com.android.server.midi.MidiService.access$1100(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.mNextDeviceId",
            "com.android.server.midi.MidiService.mDevicesByInfo",
            "com.android.server.midi.MidiService.openDevice(android.os.IBinder, android.media.midi.MidiDeviceInfo, android.media.midi.IMidiDeviceOpenCallback)",
            "com.android.server.midi.MidiService.updateStickyDeviceStatus(int, android.media.midi.IMidiDeviceListener)",
            "com.android.server.midi.MidiService.EMPTY_STRING_ARRAY",
            "com.android.server.midi.MidiService.registerDeviceServer(android.media.midi.IMidiDeviceServer, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, int)",
            "com.android.server.midi.MidiService.access$000(com.android.server.midi.MidiService, java.lang.String)",
            "com.android.server.midi.MidiService.addPackageDeviceServers(java.lang.String)",
            "com.android.server.midi.MidiService.EMPTY_DEVICE_INFO_ARRAY",
            "com.android.server.midi.MidiService.closeDevice(android.os.IBinder, android.os.IBinder)",
            "com.android.server.midi.MidiService.registerListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
            "com.android.server.midi.MidiService.addDeviceLocked(int, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, android.media.midi.IMidiDeviceServer, android.content.pm.ServiceInfo, boolean, int)",
            "com.android.server.midi.MidiService.MidiService(android.content.Context)",
            "com.android.server.midi.MidiService.openBluetoothDevice(android.os.IBinder, android.bluetooth.BluetoothDevice, android.media.midi.IMidiDeviceOpenCallback)",
            "com.android.server.midi.MidiService.mBluetoothDevices",
            "com.android.server.midi.MidiService.access$800(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.mClients",
            "com.android.server.midi.MidiService.access$900(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.addPackageDeviceServer(android.content.pm.ServiceInfo)",
            "com.android.server.midi.MidiService.access$300(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.mContext",
            "com.android.server.midi.MidiService.unregisterDeviceServer(android.media.midi.IMidiDeviceServer)",
            "com.android.server.midi.MidiService.access$200(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.mPackageManager",
            "com.android.server.midi.MidiService.getServiceDeviceInfo(java.lang.String, java.lang.String)",
            "com.android.server.midi.MidiService.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.midi.MidiService.TAG",
            "com.android.server.midi.MidiService.mPackageMonitor",
            "com.android.server.midi.MidiService.removeDeviceLocked(com.android.server.midi.MidiService$Device)",
            "com.android.server.midi.MidiService.getDeviceStatus(android.media.midi.MidiDeviceInfo)",
            "com.android.server.midi.MidiService.mBluetoothServiceUid",
            "com.android.server.midi.MidiService.access$100(com.android.server.midi.MidiService, java.lang.String)",
            "com.android.server.midi.MidiService.mDevicesByServer",
            "com.android.server.midi.MidiService.unregisterListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
            "com.android.server.midi.MidiService.getClient(android.os.IBinder)",
            "com.android.server.midi.MidiService.access$400(com.android.server.midi.MidiService)",
            "com.android.server.midi.MidiService.access$1000(com.android.server.midi.MidiService, com.android.server.midi.MidiService$Device)",
            "com.android.server.midi.MidiService.setDeviceStatus(android.media.midi.IMidiDeviceServer, android.media.midi.MidiDeviceStatus)",
            "com.android.server.midi.MidiService.removePackageDeviceServers(java.lang.String)",
            "com.android.server.midi.MidiService.static {}"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IMidiManager$Stub.IMidiManager$Stub()"
          ],
          "added": [],
          "name": "android.media.midi.IMidiManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$DeviceConnection.getClient()",
            "com.android.server.midi.MidiService$DeviceConnection.this$0",
            "com.android.server.midi.MidiService$DeviceConnection.mCallback",
            "com.android.server.midi.MidiService$DeviceConnection.mToken",
            "com.android.server.midi.MidiService$DeviceConnection.getToken()",
            "com.android.server.midi.MidiService$DeviceConnection.getDevice()",
            "com.android.server.midi.MidiService$DeviceConnection.MidiService$DeviceConnection(com.android.server.midi.MidiService, com.android.server.midi.MidiService$Device, com.android.server.midi.MidiService$Client, android.media.midi.IMidiDeviceOpenCallback)",
            "com.android.server.midi.MidiService$DeviceConnection.mDevice",
            "com.android.server.midi.MidiService$DeviceConnection.notifyClient(android.media.midi.IMidiDeviceServer)",
            "com.android.server.midi.MidiService$DeviceConnection.mClient",
            "com.android.server.midi.MidiService$DeviceConnection.toString()"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$DeviceConnection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$Device.getDeviceStatus()",
            "com.android.server.midi.MidiService$Device.mDeviceInfo",
            "com.android.server.midi.MidiService$Device.getUid()",
            "com.android.server.midi.MidiService$Device.setDeviceStatus(android.media.midi.MidiDeviceStatus)",
            "com.android.server.midi.MidiService$Device.this$0",
            "com.android.server.midi.MidiService$Device.MidiService$Device(com.android.server.midi.MidiService, android.bluetooth.BluetoothDevice)",
            "com.android.server.midi.MidiService$Device.removeDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "com.android.server.midi.MidiService$Device.MidiService$Device(com.android.server.midi.MidiService, android.media.midi.IMidiDeviceServer, android.media.midi.MidiDeviceInfo, android.content.pm.ServiceInfo, int)",
            "com.android.server.midi.MidiService$Device.getDeviceInfo()",
            "com.android.server.midi.MidiService$Device.access$702(com.android.server.midi.MidiService$Device, android.content.ServiceConnection)",
            "com.android.server.midi.MidiService$Device.mUid",
            "com.android.server.midi.MidiService$Device.setDeviceServer(android.media.midi.IMidiDeviceServer)",
            "com.android.server.midi.MidiService$Device.closeLocked()",
            "com.android.server.midi.MidiService$Device.access$500(com.android.server.midi.MidiService$Device)",
            "com.android.server.midi.MidiService$Device.access$600(com.android.server.midi.MidiService$Device, android.media.midi.IMidiDeviceServer)",
            "com.android.server.midi.MidiService$Device.getServiceInfo()",
            "com.android.server.midi.MidiService$Device.getPackageName()",
            "com.android.server.midi.MidiService$Device.toString()",
            "com.android.server.midi.MidiService$Device.mDeviceConnections",
            "com.android.server.midi.MidiService$Device.mServiceConnection",
            "com.android.server.midi.MidiService$Device.setDeviceInfo(android.media.midi.MidiDeviceInfo)",
            "com.android.server.midi.MidiService$Device.mServiceInfo",
            "com.android.server.midi.MidiService$Device.isUidAllowed(int)",
            "com.android.server.midi.MidiService$Device.mServer",
            "com.android.server.midi.MidiService$Device.addDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "com.android.server.midi.MidiService$Device.mBluetoothDevice",
            "com.android.server.midi.MidiService$Device.getDeviceServer()",
            "com.android.server.midi.MidiService$Device.binderDied()",
            "com.android.server.midi.MidiService$Device.mDeviceStatus"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Device",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.MidiDeviceInfo.isPrivate()",
            "android.media.midi.MidiDeviceInfo.getId()",
            "android.media.midi.MidiDeviceInfo.getInputPortCount()",
            "android.media.midi.MidiDeviceInfo.MidiDeviceInfo(int, int, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, boolean)",
            "android.media.midi.MidiDeviceInfo.getOutputPortCount()",
            "android.media.midi.MidiDeviceInfo.getProperties()"
          ],
          "added": [],
          "name": "android.media.midi.MidiDeviceInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.MidiDeviceStatus.getOutputPortOpenCount(int)",
            "android.media.midi.MidiDeviceStatus.MidiDeviceStatus(android.media.midi.MidiDeviceInfo)",
            "android.media.midi.MidiDeviceStatus.isInputPortOpen(int)",
            "android.media.midi.MidiDeviceStatus.getDeviceInfo()"
          ],
          "added": [],
          "name": "android.media.midi.MidiDeviceStatus",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IMidiDeviceServer$Stub.asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceServer$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.midi.MidiService$Device$1.onServiceDisconnected(android.content.ComponentName)",
            "com.android.server.midi.MidiService$Device$1.this$1",
            "com.android.server.midi.MidiService$Device$1.onServiceConnected(android.content.ComponentName, android.os.IBinder)",
            "com.android.server.midi.MidiService$Device$1.MidiService$Device$1(com.android.server.midi.MidiService$Device)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Device$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IBluetoothMidiService$Stub.asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IBluetoothMidiService$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.midi.IBluetoothMidiService.addBluetoothDevice(android.bluetooth.BluetoothDevice)"
          ],
          "added": [],
          "name": "android.media.midi.IBluetoothMidiService",
          "change_type": 2
        }
      ],
      "name": "com.android.server.midi.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$2.TwilightService$2(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService$2.this$0",
            "com.android.server.twilight.TwilightService$2.onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$3.onLocationChanged(android.location.Location)",
            "com.android.server.twilight.TwilightService$3.onProviderDisabled(java.lang.String)",
            "com.android.server.twilight.TwilightService$3.TwilightService$3(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService$3.onStatusChanged(java.lang.String, int, android.os.Bundle)",
            "com.android.server.twilight.TwilightService$3.this$0",
            "com.android.server.twilight.TwilightService$3.onProviderEnabled(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService.DEBUG",
            "com.android.server.twilight.TwilightService.TAG",
            "com.android.server.twilight.TwilightService.access$200(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService.mListeners",
            "com.android.server.twilight.TwilightService.mAlarmManager",
            "com.android.server.twilight.TwilightService.onStart()",
            "com.android.server.twilight.TwilightService.setTwilightState(com.android.server.twilight.TwilightState)",
            "com.android.server.twilight.TwilightService.mLocationListener",
            "com.android.server.twilight.TwilightService.mTwilightState",
            "com.android.server.twilight.TwilightService.access$300(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService.getContext()",
            "com.android.server.twilight.TwilightService.access$400(com.android.server.twilight.TwilightService, com.android.server.twilight.TwilightState)",
            "com.android.server.twilight.TwilightService.publishLocalService(java.lang.Class, java.lang.Object)",
            "com.android.server.twilight.TwilightService.mEmptyLocationListener",
            "com.android.server.twilight.TwilightService.ACTION_UPDATE_TWILIGHT_STATE",
            "com.android.server.twilight.TwilightService.mLocationManager",
            "com.android.server.twilight.TwilightService.mUpdateLocationReceiver",
            "com.android.server.twilight.TwilightService.TwilightService(android.content.Context)",
            "com.android.server.twilight.TwilightService.mLocationHandler",
            "com.android.server.twilight.TwilightService.hasMoved(android.location.Location, android.location.Location)",
            "com.android.server.twilight.TwilightService.mLock",
            "com.android.server.twilight.TwilightService.access$100(android.location.Location, android.location.Location)",
            "com.android.server.twilight.TwilightService.mService"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$LocationHandler.setLocation(android.location.Location)",
            "com.android.server.twilight.TwilightService$LocationHandler.FACTOR_GMT_OFFSET_LONGITUDE",
            "com.android.server.twilight.TwilightService$LocationHandler.LOCATION_UPDATE_DISTANCE_METER",
            "com.android.server.twilight.TwilightService$LocationHandler.mPassiveListenerEnabled",
            "com.android.server.twilight.TwilightService$LocationHandler.TwilightService$LocationHandler(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService$LocationHandler.handleMessage(android.os.Message)",
            "com.android.server.twilight.TwilightService$LocationHandler.mTwilightCalculator",
            "com.android.server.twilight.TwilightService$LocationHandler.retrieveLocation()",
            "com.android.server.twilight.TwilightService$LocationHandler.updateTwilightState()",
            "com.android.server.twilight.TwilightService$LocationHandler.MSG_DO_TWILIGHT_UPDATE",
            "com.android.server.twilight.TwilightService$LocationHandler.mLocation",
            "com.android.server.twilight.TwilightService$LocationHandler.LOCATION_UPDATE_ENABLE_INTERVAL_MAX",
            "com.android.server.twilight.TwilightService$LocationHandler.mNetworkListenerEnabled",
            "com.android.server.twilight.TwilightService$LocationHandler.sendEmptyMessage(int)",
            "com.android.server.twilight.TwilightService$LocationHandler.mLastUpdateInterval",
            "com.android.server.twilight.TwilightService$LocationHandler.this$0",
            "com.android.server.twilight.TwilightService$LocationHandler.MSG_GET_NEW_LOCATION_UPDATE",
            "com.android.server.twilight.TwilightService$LocationHandler.requestTwilightUpdate()",
            "com.android.server.twilight.TwilightService$LocationHandler.LOCATION_UPDATE_ENABLE_INTERVAL_MIN",
            "com.android.server.twilight.TwilightService$LocationHandler.mDidFirstInit",
            "com.android.server.twilight.TwilightService$LocationHandler.obtainMessage(int, java.lang.Object)",
            "com.android.server.twilight.TwilightService$LocationHandler.mLastNetworkRegisterTime",
            "com.android.server.twilight.TwilightService$LocationHandler.MSG_ENABLE_LOCATION_UPDATES",
            "com.android.server.twilight.TwilightService$LocationHandler.enableLocationUpdates()",
            "com.android.server.twilight.TwilightService$LocationHandler.MSG_PROCESS_NEW_LOCATION",
            "com.android.server.twilight.TwilightService$LocationHandler.LOCATION_UPDATE_MS",
            "com.android.server.twilight.TwilightService$LocationHandler.TwilightService$LocationHandler(com.android.server.twilight.TwilightService, com.android.server.twilight.TwilightService$1)",
            "com.android.server.twilight.TwilightService$LocationHandler.sendEmptyMessageDelayed(int, long)",
            "com.android.server.twilight.TwilightService$LocationHandler.sendMessage(android.os.Message)",
            "com.android.server.twilight.TwilightService$LocationHandler.MIN_LOCATION_UPDATE_MS",
            "com.android.server.twilight.TwilightService$LocationHandler.processNewLocation(android.location.Location)",
            "com.android.server.twilight.TwilightService$LocationHandler.requestLocationUpdate()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$LocationHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.TwilightCalculator.mSunset",
            "com.android.server.TwilightCalculator.NIGHT",
            "com.android.server.TwilightCalculator.DAY",
            "com.android.server.TwilightCalculator.calculateTwilight(long, double, double)",
            "com.android.server.TwilightCalculator.ALTIDUTE_CORRECTION_CIVIL_TWILIGHT",
            "com.android.server.TwilightCalculator.TwilightCalculator()",
            "com.android.server.TwilightCalculator.C1",
            "com.android.server.TwilightCalculator.UTC_2000",
            "com.android.server.TwilightCalculator.mState",
            "com.android.server.TwilightCalculator.C3",
            "com.android.server.TwilightCalculator.C2",
            "com.android.server.TwilightCalculator.mSunrise",
            "com.android.server.TwilightCalculator.J0",
            "com.android.server.TwilightCalculator.OBLIQUITY",
            "com.android.server.TwilightCalculator.DEGREES_TO_RADIANS"
          ],
          "added": [],
          "name": "com.android.server.TwilightCalculator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$4.onStatusChanged(java.lang.String, int, android.os.Bundle)",
            "com.android.server.twilight.TwilightService$4.onProviderEnabled(java.lang.String)",
            "com.android.server.twilight.TwilightService$4.onLocationChanged(android.location.Location)",
            "com.android.server.twilight.TwilightService$4.onProviderDisabled(java.lang.String)",
            "com.android.server.twilight.TwilightService$4.TwilightService$4(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$1.registerListener(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "com.android.server.twilight.TwilightService$1.getCurrentState()",
            "com.android.server.twilight.TwilightService$1.TwilightService$1(com.android.server.twilight.TwilightService)",
            "com.android.server.twilight.TwilightService$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightService$TwilightListenerRecord.TwilightService$TwilightListenerRecord(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "com.android.server.twilight.TwilightService$TwilightListenerRecord.postUpdate()",
            "com.android.server.twilight.TwilightService$TwilightListenerRecord.mHandler",
            "com.android.server.twilight.TwilightService$TwilightListenerRecord.mListener",
            "com.android.server.twilight.TwilightService$TwilightListenerRecord.run()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$TwilightListenerRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.location.LocationManager.getLastKnownLocation(java.lang.String)",
            "android.location.LocationManager.isProviderEnabled(java.lang.String)",
            "android.location.LocationManager.sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)",
            "android.location.LocationManager.getLastLocation()",
            "android.location.LocationManager.requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper)",
            "android.location.LocationManager.getAllProviders()",
            "android.location.LocationManager.removeUpdates(android.location.LocationListener)",
            "android.location.LocationManager.requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper)",
            "android.location.LocationManager.getProviders(android.location.Criteria, boolean)",
            "android.location.LocationManager.requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper)",
            "android.location.LocationManager.getBestProvider(android.location.Criteria, boolean)",
            "android.location.LocationManager.getProviders(boolean)",
            "android.location.LocationManager.getProvider(java.lang.String)",
            "android.location.LocationManager.requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)",
            "android.location.LocationManager.notifyNSFLP(android.os.Message)"
          ],
          "added": [],
          "name": "android.location.LocationManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.location.LocationListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.location.Criteria.Criteria()",
            "android.location.Criteria.setCostAllowed(boolean)",
            "android.location.Criteria.setAccuracy(int)",
            "android.location.Criteria.setAltitudeRequired(boolean)",
            "android.location.Criteria.setBearingRequired(boolean)",
            "android.location.Criteria.setPowerRequirement(int)"
          ],
          "added": [],
          "name": "android.location.Criteria",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightListener.onTwilightStateChanged()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightManager.registerListener(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "com.android.server.twilight.TwilightManager.getCurrentState()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.twilight.TwilightState.equals(java.lang.Object)",
            "com.android.server.twilight.TwilightState.mIsNight",
            "com.android.server.twilight.TwilightState.isNight()",
            "com.android.server.twilight.TwilightState.getTodaySunset()",
            "com.android.server.twilight.TwilightState.getYesterdaySunset()",
            "com.android.server.twilight.TwilightState.mTodaySunset",
            "com.android.server.twilight.TwilightState.toString()",
            "com.android.server.twilight.TwilightState.mYesterdaySunset",
            "com.android.server.twilight.TwilightState.hashCode()",
            "com.android.server.twilight.TwilightState.mTomorrowSunrise",
            "com.android.server.twilight.TwilightState.equals(com.android.server.twilight.TwilightState)",
            "com.android.server.twilight.TwilightState.getTodaySunrise()",
            "com.android.server.twilight.TwilightState.getTomorrowSunrise()",
            "com.android.server.twilight.TwilightState.mTodaySunrise",
            "com.android.server.twilight.TwilightState.TwilightState(boolean, long, long, long, long)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightState",
          "change_type": 2
        }
      ],
      "name": "com.android.server.twilight.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger.producerQueue",
            "com.android.server.enterprise.log.FileLogger.startLogFileWriter(java.util.concurrent.CountDownLatch)",
            "com.android.server.enterprise.log.FileLogger.log(int, java.lang.String, java.lang.String)",
            "com.android.server.enterprise.log.FileLogger.MSG_WRITE_LOG",
            "com.android.server.enterprise.log.FileLogger.flush()",
            "com.android.server.enterprise.log.FileLogger.access$600(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger.mCalendar",
            "com.android.server.enterprise.log.FileLogger.access$100(com.android.server.enterprise.log.FileLogger, java.util.concurrent.CountDownLatch)",
            "com.android.server.enterprise.log.FileLogger.LIMIT_FOR_LOGS_IN_DAYS",
            "com.android.server.enterprise.log.FileLogger.mLogFileWriter",
            "com.android.server.enterprise.log.FileLogger.access$500(long)",
            "com.android.server.enterprise.log.FileLogger.TAG",
            "com.android.server.enterprise.log.FileLogger.getDayBoundaryTimestamp(long)",
            "com.android.server.enterprise.log.FileLogger.access$702(com.android.server.enterprise.log.FileLogger, com.android.server.enterprise.log.FileLogger$LogFileWriter)",
            "com.android.server.enterprise.log.FileLogger.copyLogs(java.io.FileOutputStream)",
            "com.android.server.enterprise.log.FileLogger.static {}",
            "com.android.server.enterprise.log.FileLogger.LOG_ENTRY_SECTION_SEPARATOR",
            "com.android.server.enterprise.log.FileLogger.LOG_FILES_DIR",
            "com.android.server.enterprise.log.FileLogger.access$300(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger.cleanupLogs()",
            "com.android.server.enterprise.log.FileLogger.MSG_QUEUE_LOG",
            "com.android.server.enterprise.log.FileLogger.mHandler",
            "com.android.server.enterprise.log.FileLogger.DAY_IN_SECONDS",
            "com.android.server.enterprise.log.FileLogger.FileLogger(java.lang.String)",
            "com.android.server.enterprise.log.FileLogger.access$200(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger.consumerQueue"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$3.open()",
            "com.android.server.enterprise.log.FileLogger$3.val$file",
            "com.android.server.enterprise.log.FileLogger$3.close(java.io.FileInputStream)",
            "com.android.server.enterprise.log.FileLogger$3.close(java.lang.Object)",
            "com.android.server.enterprise.log.FileLogger$3.this$0",
            "com.android.server.enterprise.log.FileLogger$3.FileLogger$3(com.android.server.enterprise.log.FileLogger, java.io.File, java.io.FileOutputStream)",
            "com.android.server.enterprise.log.FileLogger$3.val$outFile",
            "com.android.server.enterprise.log.FileLogger$3.process(java.io.FileInputStream)",
            "com.android.server.enterprise.log.FileLogger$3.process(java.lang.Object)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$1.accept(java.io.File, java.lang.String)",
            "com.android.server.enterprise.log.FileLogger$1.FileLogger$1(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.handleMessage(android.os.Message)",
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.sendMessageAtFrontOfQueue(android.os.Message)",
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.FileLogger$FileLoggerHandler(com.android.server.enterprise.log.FileLogger, android.os.Looper)",
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.obtainMessage(int, java.lang.Object)",
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.lb",
            "com.android.server.enterprise.log.FileLogger$FileLoggerHandler.this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$FileLoggerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.val$file",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.close(java.lang.Object)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.FileLogger$LogFileWriter$1(com.android.server.enterprise.log.FileLogger$LogFileWriter, java.io.File)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.this$1",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.flush(java.io.BufferedWriter)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.flush(java.lang.Object)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.process(java.io.BufferedWriter)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.process(java.lang.Object)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.open()",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter$1.close(java.io.BufferedWriter)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogFileWriter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$LogBuffer.entries",
            "com.android.server.enterprise.log.FileLogger$LogBuffer.FileLogger$LogBuffer(com.android.server.enterprise.log.FileLogger$1)",
            "com.android.server.enterprise.log.FileLogger$LogBuffer.lastTimeStamp",
            "com.android.server.enterprise.log.FileLogger$LogBuffer.FileLogger$LogBuffer()",
            "com.android.server.enterprise.log.FileLogger$LogBuffer.CAPACITY"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogBuffer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.FileLogger$LogFileWriter(com.android.server.enterprise.log.FileLogger, com.android.server.enterprise.log.FileLogger$1)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.doInBackground(java.lang.Object[])",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.FileLogger$LogFileWriter(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.execute(java.lang.Object[])",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.this$0",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.getStatus()",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.doInBackground(java.util.concurrent.CountDownLatch[])",
            "com.android.server.enterprise.log.FileLogger$LogFileWriter.lb"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogFileWriter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.FileLogger$2.compare(java.io.File, java.io.File)",
            "com.android.server.enterprise.log.FileLogger$2.this$0",
            "com.android.server.enterprise.log.FileLogger$2.FileLogger$2(com.android.server.enterprise.log.FileLogger)",
            "com.android.server.enterprise.log.FileLogger$2.compare(java.lang.Object, java.lang.Object)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.flush(java.lang.Object)",
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.close(java.lang.Object)",
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.sync(java.lang.Object)",
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.process(java.lang.Object)",
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.open()",
            "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor.IOExceptionHandler$IOProcessor()"
          ],
          "added": [],
          "name": "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.ConsoleLogger.log(int, java.lang.String, java.lang.String)",
            "com.android.server.enterprise.log.ConsoleLogger.TAG",
            "com.android.server.enterprise.log.ConsoleLogger.level",
            "com.android.server.enterprise.log.ConsoleLogger.ConsoleLogger(java.lang.String)",
            "com.android.server.enterprise.log.ConsoleLogger.isLoggable(int)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.ConsoleLogger",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.LogManagerService$2.val$file",
            "com.android.server.enterprise.log.LogManagerService$2.process(java.lang.Object)",
            "com.android.server.enterprise.log.LogManagerService$2.sync(java.lang.Object)",
            "com.android.server.enterprise.log.LogManagerService$2.this$0",
            "com.android.server.enterprise.log.LogManagerService$2.flush(java.lang.Object)",
            "com.android.server.enterprise.log.LogManagerService$2.process(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "com.android.server.enterprise.log.LogManagerService$2.close(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "com.android.server.enterprise.log.LogManagerService$2.open()",
            "com.android.server.enterprise.log.LogManagerService$2.flush(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "com.android.server.enterprise.log.LogManagerService$2.sync(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "com.android.server.enterprise.log.LogManagerService$2.close(java.lang.Object)",
            "com.android.server.enterprise.log.LogManagerService$2.LogManagerService$2(com.android.server.enterprise.log.LogManagerService, android.os.ParcelFileDescriptor)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.LogManagerService.copyLogs(android.os.ParcelFileDescriptor)",
            "com.android.server.enterprise.log.LogManagerService.LogManagerService(android.content.Context, com.android.server.enterprise.EnterpriseDeviceManagerService)",
            "com.android.server.enterprise.log.LogManagerService.getLogger(int)",
            "com.android.server.enterprise.log.LogManagerService.setLogLevel(int, int)",
            "com.android.server.enterprise.log.LogManagerService.TAG",
            "com.android.server.enterprise.log.LogManagerService.LOGGER_NAMES",
            "com.android.server.enterprise.log.LogManagerService.initLog()",
            "com.android.server.enterprise.log.LogManagerService.checkAdminExistsInELMDB(int)",
            "com.android.server.enterprise.log.LogManagerService.mEdms",
            "com.android.server.enterprise.log.LogManagerService.mLogReceiver",
            "com.android.server.enterprise.log.LogManagerService.DISABLED",
            "com.android.server.enterprise.log.LogManagerService.ENABLED",
            "com.android.server.enterprise.log.LogManagerService.enableLogging(int)",
            "com.android.server.enterprise.log.LogManagerService.LOG_CONFIG_FILE",
            "com.android.server.enterprise.log.LogManagerService.isValidLogType(int)",
            "com.android.server.enterprise.log.LogManagerService.disableLogging(int)",
            "com.android.server.enterprise.log.LogManagerService.isValidLogLevel(int)",
            "com.android.server.enterprise.log.LogManagerService.static {}",
            "com.android.server.enterprise.log.LogManagerService.checkCallingUidAccess()",
            "com.android.server.enterprise.log.LogManagerService.getLogLevel(int)",
            "com.android.server.enterprise.log.LogManagerService.isLoggingEnabled(int)",
            "com.android.server.enterprise.log.LogManagerService.LOGGER_TYPES",
            "com.android.server.enterprise.log.LogManagerService.createLogger(int)",
            "com.android.server.enterprise.log.LogManagerService.access$000(com.android.server.enterprise.log.LogManagerService, int)",
            "com.android.server.enterprise.log.LogManagerService.mEdmStorageProvider",
            "com.android.server.enterprise.log.LogManagerService.mContext"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.app.enterprise.ILogManager$Stub.ILogManager$Stub()"
          ],
          "added": [],
          "name": "android.app.enterprise.ILogManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.LogManagerService$1.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.enterprise.log.LogManagerService$1.LogManagerService$1(com.android.server.enterprise.log.LogManagerService)",
            "com.android.server.enterprise.log.LogManagerService$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.enterprise.log.Logger.level",
            "com.android.server.enterprise.log.Logger.flush()",
            "com.android.server.enterprise.log.Logger.log(int, java.lang.String, java.lang.String)",
            "com.android.server.enterprise.log.Logger.loggerName",
            "com.android.server.enterprise.log.Logger.isLoggable(int)",
            "com.android.server.enterprise.log.Logger.Logger(java.lang.String)",
            "com.android.server.enterprise.log.Logger.getLogLevel()",
            "com.android.server.enterprise.log.Logger.setLogLevel(int)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.Logger",
          "change_type": 2
        }
      ],
      "name": "com.android.server.enterprise.log.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.display.CmdInfo.getCmdDetail()",
            "com.android.server.display.CmdInfo.CmdInfo(com.android.server.display.CmdInfo$CmdType, int)",
            "com.android.server.display.CmdInfo.CREATOR",
            "com.android.server.display.CmdInfo.CmdInfo(com.android.server.display.CmdInfo$CmdType)",
            "com.android.server.display.CmdInfo.CmdInfo(android.os.Parcel)",
            "com.android.server.display.CmdInfo.cmdDetail",
            "com.android.server.display.CmdInfo.static {}",
            "com.android.server.display.CmdInfo.describeContents()",
            "com.android.server.display.CmdInfo.CmdInfo(int, int)",
            "com.android.server.display.CmdInfo.writeToParcel(android.os.Parcel, int)",
            "com.android.server.display.CmdInfo.cmdType",
            "com.android.server.display.CmdInfo.CmdInfo(android.os.Parcel, com.android.server.display.CmdInfo$1)",
            "com.android.server.display.CmdInfo.getCmdType()",
            "com.android.server.display.CmdInfo.readFromParcel(android.os.Parcel)",
            "com.android.server.display.CmdInfo.TAG"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.CmdInfo$1.CmdInfo$1()",
            "com.android.server.display.CmdInfo$1.newArray(int)",
            "com.android.server.display.CmdInfo$1.createFromParcel(android.os.Parcel)"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.CmdInfo$CmdType.name()",
            "com.android.server.display.CmdInfo$CmdType.$VALUES",
            "com.android.server.display.CmdInfo$CmdType.SET_IP",
            "com.android.server.display.CmdInfo$CmdType.valueOf(java.lang.String)",
            "com.android.server.display.CmdInfo$CmdType.values()",
            "com.android.server.display.CmdInfo$CmdType.SET_BUSY_FLAG",
            "com.android.server.display.CmdInfo$CmdType.CmdInfo$CmdType(java.lang.String, int)",
            "com.android.server.display.CmdInfo$CmdType.START_PLAYER",
            "com.android.server.display.CmdInfo$CmdType.START_SOURCE",
            "com.android.server.display.CmdInfo$CmdType.ordinal()",
            "com.android.server.display.CmdInfo$CmdType.static {}"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo$CmdType",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.RampAnimator$1.this$0",
            "com.android.server.display.RampAnimator$1.run()",
            "com.android.server.display.RampAnimator$1.RampAnimator$1(com.android.server.display.RampAnimator)"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.RampAnimator.access$1000(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.access$700(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.access$300(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.mTargetValue",
            "com.android.server.display.RampAnimator.cancelAnimationCallback()",
            "com.android.server.display.RampAnimator.access$902(com.android.server.display.RampAnimator, boolean)",
            "com.android.server.display.RampAnimator.access$100(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.access$800(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.mAnimatedValue",
            "com.android.server.display.RampAnimator.TAG",
            "com.android.server.display.RampAnimator.mLastFrameTimeNanos",
            "com.android.server.display.RampAnimator.mListener",
            "com.android.server.display.RampAnimator.RampAnimator(java.lang.Object, android.util.IntProperty)",
            "com.android.server.display.RampAnimator.access$200(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.animateTo(int, int)",
            "com.android.server.display.RampAnimator.reset()",
            "com.android.server.display.RampAnimator.mAnimationCallback",
            "com.android.server.display.RampAnimator.access$000(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.postAnimationCallback()",
            "com.android.server.display.RampAnimator.mAnimating",
            "com.android.server.display.RampAnimator.access$400(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.mProperty",
            "com.android.server.display.RampAnimator.mRate",
            "com.android.server.display.RampAnimator.mFirstTime",
            "com.android.server.display.RampAnimator.access$102(com.android.server.display.RampAnimator, long)",
            "com.android.server.display.RampAnimator.mObject",
            "com.android.server.display.RampAnimator.access$302(com.android.server.display.RampAnimator, float)",
            "com.android.server.display.RampAnimator.access$600(com.android.server.display.RampAnimator)",
            "com.android.server.display.RampAnimator.isAnimating()",
            "com.android.server.display.RampAnimator.mCurrentValue",
            "com.android.server.display.RampAnimator.access$602(com.android.server.display.RampAnimator, int)",
            "com.android.server.display.RampAnimator.mChoreographer",
            "com.android.server.display.RampAnimator.setListener(com.android.server.display.RampAnimator$Listener)",
            "com.android.server.display.RampAnimator.access$500(com.android.server.display.RampAnimator)"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.Choreographer.getInstance()",
            "android.view.Choreographer.getFrameIntervalNanos()",
            "android.view.Choreographer.getFrameTimeNanos()",
            "android.view.Choreographer.postCallback(int, java.lang.Runnable, java.lang.Object)",
            "android.view.Choreographer.postFrameCallback(android.view.Choreographer$FrameCallback)",
            "android.view.Choreographer.removeCallbacks(int, java.lang.Runnable, java.lang.Object)"
          ],
          "added": [],
          "name": "android.view.Choreographer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.RampAnimator$Listener.onAnimationEnd()"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.util.IntProperty.setValue(java.lang.Object, int)",
            "android.util.IntProperty.IntProperty(java.lang.String)"
          ],
          "added": [],
          "name": "android.util.IntProperty",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase.getAddr()",
            "com.android.server.display.WfdBridgeBase.DEBUG",
            "com.android.server.display.WfdBridgeBase.ERR_NONE",
            "com.android.server.display.WfdBridgeBase.disconnect()",
            "com.android.server.display.WfdBridgeBase.isConnected()",
            "com.android.server.display.WfdBridgeBase.ERR_BUSY",
            "com.android.server.display.WfdBridgeBase.ERR_NOT_SUPPORT",
            "com.android.server.display.WfdBridgeBase.sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase.getInstance(java.net.InetAddress, int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "com.android.server.display.WfdBridgeBase.mMsgHandler",
            "com.android.server.display.WfdBridgeBase.sendBusyflag(int)",
            "com.android.server.display.WfdBridgeBase.mSession",
            "com.android.server.display.WfdBridgeBase.connect()",
            "com.android.server.display.WfdBridgeBase.ERR_CONCURRENT_OPERATION",
            "com.android.server.display.WfdBridgeBase.REQ_DEV_SINK",
            "com.android.server.display.WfdBridgeBase.request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "com.android.server.display.WfdBridgeBase.ERR_SCREEN_OFF",
            "com.android.server.display.WfdBridgeBase.getConnectAddrList()",
            "com.android.server.display.WfdBridgeBase.DEFAULT_WBP_VERSION",
            "com.android.server.display.WfdBridgeBase.TAG",
            "com.android.server.display.WfdBridgeBase.mListner",
            "com.android.server.display.WfdBridgeBase.updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WfdBridgeBase.WfdBridgeBase(com.android.server.display.WfdBridgeBase$BridgeListner)",
            "com.android.server.display.WfdBridgeBase.REQ_DEV_SOURCE"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeClient.TAG",
            "com.android.server.display.WfdBridgeClient.disconnect()",
            "com.android.server.display.WfdBridgeClient.mListner",
            "com.android.server.display.WfdBridgeClient.mBridgeConnType",
            "com.android.server.display.WfdBridgeClient.request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "com.android.server.display.WfdBridgeClient.CONNECT_TYPE_NOT_CONNECTED",
            "com.android.server.display.WfdBridgeClient.CONNECT_TYPE_CONNECTED",
            "com.android.server.display.WfdBridgeClient.updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WfdBridgeClient.mSocket",
            "com.android.server.display.WfdBridgeClient.WfdBridgeClient(java.net.InetAddress, int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "com.android.server.display.WfdBridgeClient.mSession",
            "com.android.server.display.WfdBridgeClient.CONNECT_TYPE_INITIALIZED",
            "com.android.server.display.WfdBridgeClient.isConnected()",
            "com.android.server.display.WfdBridgeClient.mMsgHandler",
            "com.android.server.display.WfdBridgeClient.CONNECT_TYPE_CONNECTING",
            "com.android.server.display.WfdBridgeClient.getAddr()",
            "com.android.server.display.WfdBridgeClient.run()",
            "com.android.server.display.WfdBridgeClient.sendBusyflag(int)",
            "com.android.server.display.WfdBridgeClient.connect()",
            "com.android.server.display.WfdBridgeClient.mInetAddr",
            "com.android.server.display.WfdBridgeClient.sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeClient.getConnectAddrList()",
            "com.android.server.display.WfdBridgeClient.mClientPeer",
            "com.android.server.display.WfdBridgeClient.mPort"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeClient",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$BridgeListner.onBridgeConnected()",
            "com.android.server.display.WfdBridgeBase$BridgeListner.onConnRequest(int, int, java.net.InetAddress)",
            "com.android.server.display.WfdBridgeBase$BridgeListner.onError(int)",
            "com.android.server.display.WfdBridgeBase$BridgeListner.onOK(java.net.InetAddress)",
            "com.android.server.display.WfdBridgeBase$BridgeListner.onGetStatus()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BridgeListner",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeServer.getAddr()",
            "com.android.server.display.WfdBridgeServer.mMsgHandler",
            "com.android.server.display.WfdBridgeServer.sendBusyflag(int)",
            "com.android.server.display.WfdBridgeServer.DEBUG",
            "com.android.server.display.WfdBridgeServer.mServerSocket",
            "com.android.server.display.WfdBridgeServer.run()",
            "com.android.server.display.WfdBridgeServer.getConnectAddrList()",
            "com.android.server.display.WfdBridgeServer.connect()",
            "com.android.server.display.WfdBridgeServer.getIndexFromDeviceInfo(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WfdBridgeServer.mClientList",
            "com.android.server.display.WfdBridgeServer.mListner",
            "com.android.server.display.WfdBridgeServer.WfdBridgeServer(int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "com.android.server.display.WfdBridgeServer.mSession",
            "com.android.server.display.WfdBridgeServer.isConnected()",
            "com.android.server.display.WfdBridgeServer.mPort",
            "com.android.server.display.WfdBridgeServer.request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "com.android.server.display.WfdBridgeServer.sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeServer.mLastUpdatedClient",
            "com.android.server.display.WfdBridgeServer.disconnect()",
            "com.android.server.display.WfdBridgeServer.updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WfdBridgeServer.TAG"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeServer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$1.$SwitchMap$com$android$server$display$CmdInfo$CmdType",
            "com.android.server.display.WfdBridgeBase$1.static {}"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$BridgePeer.mSocReader",
            "com.android.server.display.WfdBridgeBase$BridgePeer.TAG",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mSocket",
            "com.android.server.display.WfdBridgeBase$BridgePeer.this$0",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mWbpVersion",
            "com.android.server.display.WfdBridgeBase$BridgePeer.socketState()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mIsLegacyDevice",
            "com.android.server.display.WfdBridgeBase$BridgePeer.start()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.WfdBridgeBase$BridgePeer(com.android.server.display.WfdBridgeBase, java.net.Socket, com.android.server.display.WfdBridgeBase$WBPMsgHandler)",
            "com.android.server.display.WfdBridgeBase$BridgePeer.closeSocket()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.sleep(long)",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mSocWriter",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mBusyFlag",
            "com.android.server.display.WfdBridgeBase$BridgePeer.send(java.lang.String)",
            "com.android.server.display.WfdBridgeBase$BridgePeer.isSocClosed()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.isSocConnected()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mMsgHandler",
            "com.android.server.display.WfdBridgeBase$BridgePeer.mDevice",
            "com.android.server.display.WfdBridgeBase$BridgePeer.getInetAddress()",
            "com.android.server.display.WfdBridgeBase$BridgePeer.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BridgePeer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.SUPPORT_RVF_SINK",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.SUPPORT_SIDESYNC_SINK",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.parseSupportedType(java.util.StringTokenizer)",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.deviceAddress",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.SUPPORT_SIDESYNC_SOURCE",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.WfdBridgeBase$BrigePeerDevice(com.android.server.display.WfdBridgeBase)",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.SUPPORT_RVF_SOURCE",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.WfdBridgeBase$BrigePeerDevice(com.android.server.display.WfdBridgeBase, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.mSupportedDevice",
            "com.android.server.display.WfdBridgeBase$BrigePeerDevice.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BrigePeerDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_DESTROY",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer, int, int)",
            "com.android.server.display.WfdBridgeBase$WBPMsg.mPeer",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_WBP_PLAY",
            "com.android.server.display.WfdBridgeBase$WBPMsg.mDev",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_WBP_SET_PARAMETER",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_WBP_TRIGGER",
            "com.android.server.display.WfdBridgeBase$WBPMsg.toString()",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_TRIGGER_BUSYFLAG",
            "com.android.server.display.WfdBridgeBase$WBPMsg.mMsgType",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_WBP_SETUP",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int)",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_TRIGGER_M1",
            "com.android.server.display.WfdBridgeBase$WBPMsg.mType",
            "com.android.server.display.WfdBridgeBase$WBPMsg.this$0",
            "com.android.server.display.WfdBridgeBase$WBPMsg.TAG",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_WBP_GET_PARAMETER",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "com.android.server.display.WfdBridgeBase$WBPMsg.mMsg",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_NOT_PARSED_LEGACY",
            "com.android.server.display.WfdBridgeBase$WBPMsg.WBPMSGTYPE_NOT_PARSED"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$WBPMsg",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.send_WBP_TRIGGER(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_ScreenMirroring",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_RVF",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_Source",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.getSupportedDevList()",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.send_WBP_GET_PARAM_RES(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.triggerMsg(int, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.parseBridgeCmdInfo(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.send_WBP_TRIGGER_RES(com.android.server.display.WfdBridgeBase$WBPMsg, int)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_CRLF",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.this$0",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.putMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.destroy()",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.send_WBP_GET_PARAM(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.WfdBridgeBase$WBPMsgHandler(com.android.server.display.WfdBridgeBase)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.send_busyFlag(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_AllShareCast",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.start()",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.parseRequest(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.TAG",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.mMsgList",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_MirrorMouse",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.STR_Sink",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.parseMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.parseResponse(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "com.android.server.display.WfdBridgeBase$WBPMsgHandler.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$WBPMsgHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayAdapter$1.val$device",
            "com.android.server.display.DisplayAdapter$1.val$event",
            "com.android.server.display.DisplayAdapter$1.run()",
            "com.android.server.display.DisplayAdapter$1.DisplayAdapter$1(com.android.server.display.DisplayAdapter, com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.DisplayAdapter$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayAdapter.access$000(com.android.server.display.DisplayAdapter)",
            "com.android.server.display.DisplayAdapter.createMode(int, int, float)",
            "com.android.server.display.DisplayAdapter.NEXT_COLOR_TRANSFORM_ID",
            "com.android.server.display.DisplayAdapter.mSyncRoot",
            "com.android.server.display.DisplayAdapter.getName()",
            "com.android.server.display.DisplayAdapter.static {}",
            "com.android.server.display.DisplayAdapter.mListener",
            "com.android.server.display.DisplayAdapter.NEXT_DISPLAY_MODE_ID",
            "com.android.server.display.DisplayAdapter.DISPLAY_DEVICE_EVENT_REMOVED",
            "com.android.server.display.DisplayAdapter.mContext",
            "com.android.server.display.DisplayAdapter.sendTraversalRequestLocked()",
            "com.android.server.display.DisplayAdapter.getSyncRoot()",
            "com.android.server.display.DisplayAdapter.registerLocked()",
            "com.android.server.display.DisplayAdapter.DisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, java.lang.String)",
            "com.android.server.display.DisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.DisplayAdapter.createColorTransform(int)",
            "com.android.server.display.DisplayAdapter.mName",
            "com.android.server.display.DisplayAdapter.getContext()",
            "com.android.server.display.DisplayAdapter.DISPLAY_DEVICE_EVENT_CHANGED",
            "com.android.server.display.DisplayAdapter.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.DisplayAdapter.mHandler",
            "com.android.server.display.DisplayAdapter.getHandler()",
            "com.android.server.display.DisplayAdapter.DISPLAY_DEVICE_EVENT_ADDED"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayAdapter$2.DisplayAdapter$2(com.android.server.display.DisplayAdapter)",
            "com.android.server.display.DisplayAdapter$2.this$0",
            "com.android.server.display.DisplayAdapter$2.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayAdapter$Listener.onDisplayDeviceEvent(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.DisplayAdapter$Listener.onTraversalRequested()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.requestColorTransformAndModeInTransactionLocked(int, int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mBuiltInDisplayId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mBrightness",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.findDisplayInfoIndexLocked(int, int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mSupportedColorTransforms",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.LocalDisplayAdapter$LocalDisplayDevice(com.android.server.display.LocalDisplayAdapter, android.os.IBinder, int, android.view.SurfaceControl$PhysicalDisplayInfo[], int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mInfo",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.updatePhysicalDisplayInfoLocked(android.view.SurfaceControl$PhysicalDisplayInfo[], int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mDefaultColorTransformId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.requestDisplayStateLocked(int, int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.this$0",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.applyPendingDisplayDeviceInfoChangesLocked()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.findColorTransform(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mBacklight",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mActiveColorTransformInvalid",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mActivePhysIndex",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.static {}",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mState",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mHavePendingChanges",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.getDisplayTokenLocked()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mActiveModeInvalid",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mActiveModeId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mSupportedModes",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.updateDeviceInfoLocked()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.access$000(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mActiveColorTransformId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.findDisplayModeRecord(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mDefaultModeId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.$assertionsDisabled",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mEnableScreenRotateWithContent",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.getUniqueId()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice.mDisplayInfos"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.SurfaceControl$PhysicalDisplayInfo.yDpi",
            "android.view.SurfaceControl$PhysicalDisplayInfo.refreshRate",
            "android.view.SurfaceControl$PhysicalDisplayInfo.width",
            "android.view.SurfaceControl$PhysicalDisplayInfo.xDpi",
            "android.view.SurfaceControl$PhysicalDisplayInfo.colorTransform",
            "android.view.SurfaceControl$PhysicalDisplayInfo.appVsyncOffsetNanos",
            "android.view.SurfaceControl$PhysicalDisplayInfo.secure",
            "android.view.SurfaceControl$PhysicalDisplayInfo.density",
            "android.view.SurfaceControl$PhysicalDisplayInfo.height",
            "android.view.SurfaceControl$PhysicalDisplayInfo.presentationDeadlineNanos"
          ],
          "added": [],
          "name": "android.view.SurfaceControl$PhysicalDisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LocalDisplayAdapter.getSyncRoot()",
            "com.android.server.display.LocalDisplayAdapter.BUILT_IN_DISPLAY_IDS_TO_SCAN",
            "com.android.server.display.LocalDisplayAdapter.PROPERTY_EMULATOR_CIRCULAR",
            "com.android.server.display.LocalDisplayAdapter.mDevices",
            "com.android.server.display.LocalDisplayAdapter.mHotplugReceiver",
            "com.android.server.display.LocalDisplayAdapter.TAG",
            "com.android.server.display.LocalDisplayAdapter.access$200(com.android.server.display.LocalDisplayAdapter, int)",
            "com.android.server.display.LocalDisplayAdapter.tryDisconnectDisplayLocked(int)",
            "com.android.server.display.LocalDisplayAdapter.LocalDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener)",
            "com.android.server.display.LocalDisplayAdapter.getPowerModeForState(int)",
            "com.android.server.display.LocalDisplayAdapter.access$100(com.android.server.display.LocalDisplayAdapter, int)",
            "com.android.server.display.LocalDisplayAdapter.getHandler()",
            "com.android.server.display.LocalDisplayAdapter.registerLocked()",
            "com.android.server.display.LocalDisplayAdapter.sendTraversalRequestLocked()",
            "com.android.server.display.LocalDisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.LocalDisplayAdapter.static {}",
            "com.android.server.display.LocalDisplayAdapter.mIsDualDisplay",
            "com.android.server.display.LocalDisplayAdapter.tryConnectDisplayLocked(int)",
            "com.android.server.display.LocalDisplayAdapter.DEBUG",
            "com.android.server.display.LocalDisplayAdapter.UNIQUE_ID_PREFIX",
            "com.android.server.display.LocalDisplayAdapter.getContext()"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.setDisplayState(int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.val$oldState",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.run()",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.this$1",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.val$state",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.setDisplayBrightness(int)",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.val$displayId",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.val$token",
            "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1.LocalDisplayAdapter$LocalDisplayDevice$1(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice, int, int, int, android.os.IBinder)"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord.LocalDisplayAdapter$DisplayModeRecord(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord.mMode",
            "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord.hasMatchingMode(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord.toString()"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.Display$Mode.getPhysicalHeight()",
            "android.view.Display$Mode.getRefreshRate()",
            "android.view.Display$Mode.EMPTY_ARRAY",
            "android.view.Display$Mode.getPhysicalWidth()",
            "android.view.Display$Mode.Display$Mode(int, int, int, float)",
            "android.view.Display$Mode.getModeId()"
          ],
          "added": [],
          "name": "android.view.Display$Mode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.VirtualDisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.VirtualDisplayAdapter.setVirtualDisplayMirroringDisplayLocked(android.os.IBinder, int)",
            "com.android.server.display.VirtualDisplayAdapter.mHandler",
            "com.android.server.display.VirtualDisplayAdapter.access$100(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter.TAG",
            "com.android.server.display.VirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(android.os.IBinder, android.view.Surface)",
            "com.android.server.display.VirtualDisplayAdapter.releaseVirtualDisplayLocked(android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter.resizeVirtualDisplayLocked(android.os.IBinder, int, int, int)",
            "com.android.server.display.VirtualDisplayAdapter.handleMediaProjectionStoppedLocked(android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter.sendTraversalRequestLocked()",
            "com.android.server.display.VirtualDisplayAdapter.VirtualDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener)",
            "com.android.server.display.VirtualDisplayAdapter.getNextUniqueIndex(java.lang.String)",
            "com.android.server.display.VirtualDisplayAdapter.mVirtualDisplayDevices",
            "com.android.server.display.VirtualDisplayAdapter.DEBUG",
            "com.android.server.display.VirtualDisplayAdapter.handleBinderDiedLocked(android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter.getSyncRoot()",
            "com.android.server.display.VirtualDisplayAdapter.UNIQUE_ID_PREFIX",
            "com.android.server.display.VirtualDisplayAdapter.setVirtualDisplayFixedOrientationLocked(android.os.IBinder, int)",
            "com.android.server.display.VirtualDisplayAdapter.access$200(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter.createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.binderDied()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.setSurfaceLocked(android.view.Surface)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.REFRESH_RATE",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.stopLocked()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mMode",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mHeight",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mDensityDpi",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.VirtualDisplayAdapter$VirtualDisplayDevice(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder, android.os.IBinder, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int, com.android.server.display.VirtualDisplayAdapter$Callback, java.lang.String, int)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.getUniqueId()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mMirroringDisplay",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mSurface",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.this$0",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.access$000(com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.getDisplayTokenLocked()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mInfo",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mPendingChanges",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mDisplayState",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.setMirroringDisplayLocked(int)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mName",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.resizeLocked(int, int, int)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mWidth",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.setFixedOrientationLocked(int)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.PENDING_RESIZE",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.performTraversalInTransactionLocked()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.requestDisplayStateLocked(int, int)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mOwnerUid",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mStopped",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mCallback",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mOwnerPackageName",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.setSurfaceInTransactionLocked(android.view.Surface)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.destroyLocked(boolean)",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mUniqueIndex",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mFixedOrientation",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mFlags",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.PENDING_SURFACE_CHANGE",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.mAppToken",
            "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice.updateDeviceInfoLocked()"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.VirtualDisplayAdapter$Callback.handleMessage(android.os.Message)",
            "com.android.server.display.VirtualDisplayAdapter$Callback.MSG_ON_DISPLAY_PAUSED",
            "com.android.server.display.VirtualDisplayAdapter$Callback.MSG_ON_DISPLAY_STOPPED",
            "com.android.server.display.VirtualDisplayAdapter$Callback.dispatchDisplayStopped()",
            "com.android.server.display.VirtualDisplayAdapter$Callback.sendEmptyMessage(int)",
            "com.android.server.display.VirtualDisplayAdapter$Callback.MSG_ON_DISPLAY_RESUMED",
            "com.android.server.display.VirtualDisplayAdapter$Callback.VirtualDisplayAdapter$Callback(android.hardware.display.IVirtualDisplayCallback, android.os.Handler)",
            "com.android.server.display.VirtualDisplayAdapter$Callback.dispatchDisplayPaused()",
            "com.android.server.display.VirtualDisplayAdapter$Callback.dispatchDisplayResumed()",
            "com.android.server.display.VirtualDisplayAdapter$Callback.mCallback"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$Callback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.IVirtualDisplayCallback.onStopped()",
            "android.hardware.display.IVirtualDisplayCallback.asBinder()",
            "android.hardware.display.IVirtualDisplayCallback.onResumed()",
            "android.hardware.display.IVirtualDisplayCallback.onPaused()"
          ],
          "added": [],
          "name": "android.hardware.display.IVirtualDisplayCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState.getScreenBrightness()",
            "com.android.server.display.DisplayPowerState.waitUntilClean(java.lang.Runnable)",
            "com.android.server.display.DisplayPowerState.access$100(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.invokeCleanListenerIfNeeded()",
            "com.android.server.display.DisplayPowerState.mScreenState",
            "com.android.server.display.DisplayPowerState.access$602(com.android.server.display.DisplayPowerState, boolean)",
            "com.android.server.display.DisplayPowerState.getScreenState()",
            "com.android.server.display.DisplayPowerState.mCleanListener",
            "com.android.server.display.DisplayPowerState.mDisplayId",
            "com.android.server.display.DisplayPowerState.setColorFadeLevel(float)",
            "com.android.server.display.DisplayPowerState.dismissColorFade()",
            "com.android.server.display.DisplayPowerState.access$1102(com.android.server.display.DisplayPowerState, boolean)",
            "com.android.server.display.DisplayPowerState.setGlobalScreenStateHint(int)",
            "com.android.server.display.DisplayPowerState.access$1800(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.setScreenBrightness(int)",
            "com.android.server.display.DisplayPowerState.mFinalBrightnessDiff",
            "com.android.server.display.DisplayPowerState.setColorFadeStateRunnable(com.android.server.display.DisplayPowerController$ColorFadeStateRunnable)",
            "com.android.server.display.DisplayPowerState.mColorFadePrepared",
            "com.android.server.display.DisplayPowerState.access$1700(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.SCREEN_BRIGHTNESS",
            "com.android.server.display.DisplayPowerState.access$400(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.mBrightByColorFadeExit",
            "com.android.server.display.DisplayPowerState.getGlobalScreenStateHint()",
            "com.android.server.display.DisplayPowerState.mGlobalScreenStateHint",
            "com.android.server.display.DisplayPowerState.access$002(com.android.server.display.DisplayPowerState, boolean)",
            "com.android.server.display.DisplayPowerState.postScreenUpdateThreadSafe()",
            "com.android.server.display.DisplayPowerState.DisplayPowerState(int, com.android.server.display.DisplayBlanker, com.android.server.display.ColorFade, android.content.Context)",
            "com.android.server.display.DisplayPowerState.access$300(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.getColorFadeLevel()",
            "com.android.server.display.DisplayPowerState.access$1600()",
            "com.android.server.display.DisplayPowerState.mScreenBrightness",
            "com.android.server.display.DisplayPowerState.access$1302(com.android.server.display.DisplayPowerState, boolean)",
            "com.android.server.display.DisplayPowerState.scheduleColorFadeDraw()",
            "com.android.server.display.DisplayPowerState.setScreenState(int)",
            "com.android.server.display.DisplayPowerState.COLOR_FADE_LEVEL",
            "com.android.server.display.DisplayPowerState.prepareColorFade(android.content.Context, int)",
            "com.android.server.display.DisplayPowerState.mColorFadeStateRunnable",
            "com.android.server.display.DisplayPowerState.access$200(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.dismissColorFadeResources()",
            "com.android.server.display.DisplayPowerState.mHandler",
            "com.android.server.display.DisplayPowerState.access$1200(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.mColorFade",
            "com.android.server.display.DisplayPowerState.mColorFadeDrawPending",
            "com.android.server.display.DisplayPowerState.mScreenUpdatePending",
            "com.android.server.display.DisplayPowerState.mBlanker",
            "com.android.server.display.DisplayPowerState.mPhotonicModulator",
            "com.android.server.display.DisplayPowerState.access$1300(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.access$900(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.DEBUG",
            "com.android.server.display.DisplayPowerState.access$1000(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.mContext",
            "com.android.server.display.DisplayPowerState.access$1500(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.dump(java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerState.mUseMarkTracker",
            "com.android.server.display.DisplayPowerState.mColorFadeReady",
            "com.android.server.display.DisplayPowerState.TAG",
            "com.android.server.display.DisplayPowerState.mChoreographer",
            "com.android.server.display.DisplayPowerState.static {}",
            "com.android.server.display.DisplayPowerState.mBacklight",
            "com.android.server.display.DisplayPowerState.scheduleScreenUpdate()",
            "com.android.server.display.DisplayPowerState.access$802(com.android.server.display.DisplayPowerState, boolean)",
            "com.android.server.display.DisplayPowerState.access$700(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState.mScreenUpdateRunnable",
            "com.android.server.display.DisplayPowerState.mScreenReady",
            "com.android.server.display.DisplayPowerState.mColorFadeDrawRunnable",
            "com.android.server.display.DisplayPowerState.access$500()",
            "com.android.server.display.DisplayPowerState.mColorFadeLevel",
            "com.android.server.display.DisplayPowerState.access$1400(com.android.server.display.DisplayPowerState)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$2.setValue(com.android.server.display.DisplayPowerState, int)",
            "com.android.server.display.DisplayPowerState$2.DisplayPowerState$2(java.lang.String)",
            "com.android.server.display.DisplayPowerState$2.get(java.lang.Object)",
            "com.android.server.display.DisplayPowerState$2.get(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState$2.setValue(java.lang.Object, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$3.DisplayPowerState$3(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState$3.this$0",
            "com.android.server.display.DisplayPowerState$3.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$1.setValue(java.lang.Object, float)",
            "com.android.server.display.DisplayPowerState$1.get(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState$1.get(java.lang.Object)",
            "com.android.server.display.DisplayPowerState$1.setValue(com.android.server.display.DisplayPowerState, float)",
            "com.android.server.display.DisplayPowerState$1.DisplayPowerState$1(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$4.run()",
            "com.android.server.display.DisplayPowerState$4.DisplayPowerState$4(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$PhotonicModulator$1.DisplayPowerState$PhotonicModulator$1(com.android.server.display.DisplayPowerState$PhotonicModulator)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator$1.this$1",
            "com.android.server.display.DisplayPowerState$PhotonicModulator$1.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$PhotonicModulator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mPendingBacklight",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.DisplayPowerState$PhotonicModulator(com.android.server.display.DisplayPowerState)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.access$1900(com.android.server.display.DisplayPowerState$PhotonicModulator)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mBacklightChangeInProgress",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mActualState",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mPhotonicModulatorTimeMeasurement",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.setBrightness(int)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mPendingState",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mStateChangeInProgress",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.INITIAL_SCREEN_STATE",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mRequestDisplayStateDoneListener",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.this$0",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mLock",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.start()",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.INITIAL_BACKLIGHT",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mActualBacklight",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.setState(int, int)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.access$2002(com.android.server.display.DisplayPowerState$PhotonicModulator, boolean)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.mPendingRequestDisplayState",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.run()",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.dump(java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerState$PhotonicModulator.getFinalMarkerPosition(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$PhotonicModulator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayBlanker.registerRequestDisplayStateDoneListener(java.lang.Runnable)",
            "com.android.server.display.DisplayBlanker.requestDisplayState(int, int)",
            "com.android.server.display.DisplayBlanker.requestDisplayState(int, int, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayBlanker",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.util.FloatProperty.FloatProperty(java.lang.String)"
          ],
          "added": [],
          "name": "android.util.FloatProperty",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDisplayPolicy$1.this$0",
            "com.android.server.display.MagnifierDisplayPolicy$1.onChange(boolean)",
            "com.android.server.display.MagnifierDisplayPolicy$1.MagnifierDisplayPolicy$1(com.android.server.display.MagnifierDisplayPolicy, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDisplayPolicy.mCropWidth",
            "com.android.server.display.MagnifierDisplayPolicy.SECTOR_LEFT",
            "com.android.server.display.MagnifierDisplayPolicy.getHeight()",
            "com.android.server.display.MagnifierDisplayPolicy.mHoverZoomObserver",
            "com.android.server.display.MagnifierDisplayPolicy.getPrecision(float)",
            "com.android.server.display.MagnifierDisplayPolicy.mFixedHeight",
            "com.android.server.display.MagnifierDisplayPolicy.isHoverZoom()",
            "com.android.server.display.MagnifierDisplayPolicy.updateDisplayInfo(android.util.DisplayMetrics)",
            "com.android.server.display.MagnifierDisplayPolicy.mPointerSize",
            "com.android.server.display.MagnifierDisplayPolicy.getPointerSize()",
            "com.android.server.display.MagnifierDisplayPolicy.getWidth()",
            "com.android.server.display.MagnifierDisplayPolicy.updateSettings(int, int, float)",
            "com.android.server.display.MagnifierDisplayPolicy.mDisplayMetrics",
            "com.android.server.display.MagnifierDisplayPolicy.mPointerMargin",
            "com.android.server.display.MagnifierDisplayPolicy.DEBUG",
            "com.android.server.display.MagnifierDisplayPolicy.mDefaultWidth",
            "com.android.server.display.MagnifierDisplayPolicy.mBorderPadding",
            "com.android.server.display.MagnifierDisplayPolicy.mOnSizeChangeListener",
            "com.android.server.display.MagnifierDisplayPolicy.removeOnSizeChanageListener(com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener)",
            "com.android.server.display.MagnifierDisplayPolicy.getDefaultDisplay()",
            "com.android.server.display.MagnifierDisplayPolicy.mIsHoverZoom",
            "com.android.server.display.MagnifierDisplayPolicy.dump(java.io.PrintWriter, java.lang.String)",
            "com.android.server.display.MagnifierDisplayPolicy.mCropHeight",
            "com.android.server.display.MagnifierDisplayPolicy.setPointMargin()",
            "com.android.server.display.MagnifierDisplayPolicy.mWindowManager",
            "com.android.server.display.MagnifierDisplayPolicy.SECTOR_RIGHT",
            "com.android.server.display.MagnifierDisplayPolicy.access$502(com.android.server.display.MagnifierDisplayPolicy, boolean)",
            "com.android.server.display.MagnifierDisplayPolicy.MagnifierDisplayPolicy(android.content.Context)",
            "com.android.server.display.MagnifierDisplayPolicy.mDefaultDisplay",
            "com.android.server.display.MagnifierDisplayPolicy.access$500(com.android.server.display.MagnifierDisplayPolicy)",
            "com.android.server.display.MagnifierDisplayPolicy.SECTOR_CENTER",
            "com.android.server.display.MagnifierDisplayPolicy.setPadding(android.graphics.Rect)",
            "com.android.server.display.MagnifierDisplayPolicy.access$600(com.android.server.display.MagnifierDisplayPolicy)",
            "com.android.server.display.MagnifierDisplayPolicy.mDm",
            "com.android.server.display.MagnifierDisplayPolicy.mFixedWidth",
            "com.android.server.display.MagnifierDisplayPolicy.toString()",
            "com.android.server.display.MagnifierDisplayPolicy.getDefaultDisplayInfo()",
            "com.android.server.display.MagnifierDisplayPolicy.mScale",
            "com.android.server.display.MagnifierDisplayPolicy.SECTOR_NONE",
            "com.android.server.display.MagnifierDisplayPolicy.getDisplayInfo(android.view.MagnificationSpec)",
            "com.android.server.display.MagnifierDisplayPolicy.mDefaultDisplayInfo",
            "com.android.server.display.MagnifierDisplayPolicy.setPrecision()",
            "com.android.server.display.MagnifierDisplayPolicy.addOnSizeChanageListener(com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener)",
            "com.android.server.display.MagnifierDisplayPolicy.access$400(com.android.server.display.MagnifierDisplayPolicy)",
            "com.android.server.display.MagnifierDisplayPolicy.checkUpdateDisplayInfo()",
            "com.android.server.display.MagnifierDisplayPolicy.mContext",
            "com.android.server.display.MagnifierDisplayPolicy.mLastDisplayInfo",
            "com.android.server.display.MagnifierDisplayPolicy.TAG",
            "com.android.server.display.MagnifierDisplayPolicy.mDefaultHeight"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.IDisplayManager$Stub.IDisplayManager$Stub()",
            "android.hardware.display.IDisplayManager$Stub.asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.hardware.display.IDisplayManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.mSurfaceOffset",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.mSurfaceCropRect",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.mAbsOffset",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.access$200(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.access$000(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.mPointOffset",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.this$0",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.MagnifierDisplayPolicy$DisplayInfo(com.android.server.display.MagnifierDisplayPolicy)",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.getPointOffset()",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.toString()",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.getSurfaceOffset()",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.getSurfaceCropRect()",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.access$300(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.access$100(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo.getAbsOffset()"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierSurfaceControl$1.onSizeChanged(boolean)",
            "com.android.server.display.MagnifierSurfaceControl$1.MagnifierSurfaceControl$1(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableCloseMarginTop",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableCloseMarginRight",
            "com.android.server.display.MagnifierSurfaceControl$Border.mBorderSurface",
            "com.android.server.display.MagnifierSurfaceControl$Border.show()",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawable",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableClose",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableScreenChangeMarginTop",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableHandlerSize",
            "com.android.server.display.MagnifierSurfaceControl$Border.mBorderLock",
            "com.android.server.display.MagnifierSurfaceControl$Border.MagnifierSurfaceControl$Border(android.content.Context, int, int, int)",
            "com.android.server.display.MagnifierSurfaceControl$Border.mContext",
            "com.android.server.display.MagnifierSurfaceControl$Border.mBorderFxSession",
            "com.android.server.display.MagnifierSurfaceControl$Border.mShowing",
            "com.android.server.display.MagnifierSurfaceControl$Border.mBorderSurfaceControl",
            "com.android.server.display.MagnifierSurfaceControl$Border.mPadding",
            "com.android.server.display.MagnifierSurfaceControl$Border.dismiss()",
            "com.android.server.display.MagnifierSurfaceControl$Border.TAG",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableCloseSize",
            "com.android.server.display.MagnifierSurfaceControl$Border.fingerMagnifierState",
            "com.android.server.display.MagnifierSurfaceControl$Border.setPosition(android.graphics.Point)",
            "com.android.server.display.MagnifierSurfaceControl$Border.setSize(int, int)",
            "com.android.server.display.MagnifierSurfaceControl$Border.isRTL(android.content.Context)",
            "com.android.server.display.MagnifierSurfaceControl$Border.getPadding()",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableScreenChangeMarginRight",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableScreenChangeSize",
            "com.android.server.display.MagnifierSurfaceControl$Border.mDrawableScreenChange",
            "com.android.server.display.MagnifierSurfaceControl$Border.hide()",
            "com.android.server.display.MagnifierSurfaceControl$Border.DEBUG"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$Border",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.DEBUG",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.MagnifierSurfaceControl$HoverPoint(android.content.Context, int, int)",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.TAG",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.setPosition(android.graphics.Point)",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.mDrawable",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.show()",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.hide()",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.mPointSurfaceControl",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.dismiss()",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.mPointFxSession",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.mPointLock",
            "com.android.server.display.MagnifierSurfaceControl$HoverPoint.mPointSurface"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$HoverPoint",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierSurfaceControl.IDLE",
            "com.android.server.display.MagnifierSurfaceControl.TAG",
            "com.android.server.display.MagnifierSurfaceControl.mState",
            "com.android.server.display.MagnifierSurfaceControl.mCurrentDisplayId",
            "com.android.server.display.MagnifierSurfaceControl.FEATURE_OVERLAYMAGNIFIER",
            "com.android.server.display.MagnifierSurfaceControl.access$500(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.show(android.view.MagnificationSpec)",
            "com.android.server.display.MagnifierSurfaceControl.mHandler",
            "com.android.server.display.MagnifierSurfaceControl.mLock",
            "com.android.server.display.MagnifierSurfaceControl.access$700(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.updateMagnificationSpec(android.view.MagnificationSpec)",
            "com.android.server.display.MagnifierSurfaceControl.hide()",
            "com.android.server.display.MagnifierSurfaceControl.mSizeChangeListener",
            "com.android.server.display.MagnifierSurfaceControl.access$100(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.mContext",
            "com.android.server.display.MagnifierSurfaceControl.mPoint",
            "com.android.server.display.MagnifierSurfaceControl.access$000(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.access$702(com.android.server.display.MagnifierSurfaceControl, com.android.server.display.MagnifierSurfaceControl$Border)",
            "com.android.server.display.MagnifierSurfaceControl.access$600(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.mFxSession",
            "com.android.server.display.MagnifierSurfaceControl.access$900(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.mPolicy",
            "com.android.server.display.MagnifierSurfaceControl.CREATED",
            "com.android.server.display.MagnifierSurfaceControl.dump(java.io.PrintWriter, java.lang.String)",
            "com.android.server.display.MagnifierSurfaceControl.access$1100(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.access$200(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.destroyMainSurface()",
            "com.android.server.display.MagnifierSurfaceControl.create()",
            "com.android.server.display.MagnifierSurfaceControl.mListener",
            "com.android.server.display.MagnifierSurfaceControl.onDisplayChanged(int)",
            "com.android.server.display.MagnifierSurfaceControl.HIDDEN",
            "com.android.server.display.MagnifierSurfaceControl.MagnifierSurfaceControl(android.content.Context, com.android.server.display.MagnifierSurfaceControl$Listener, android.os.Handler, com.android.server.display.MagnifierDisplayPolicy, int)",
            "com.android.server.display.MagnifierSurfaceControl.createDefaultSurface()",
            "com.android.server.display.MagnifierSurfaceControl.onDisplayAdded(int)",
            "com.android.server.display.MagnifierSurfaceControl.STABILIZER",
            "com.android.server.display.MagnifierSurfaceControl.access$1000(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.DEBUG",
            "com.android.server.display.MagnifierSurfaceControl.access$1002(com.android.server.display.MagnifierSurfaceControl, int)",
            "com.android.server.display.MagnifierSurfaceControl.static {}",
            "com.android.server.display.MagnifierSurfaceControl.access$400(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.onDisplayRemoved(int)",
            "com.android.server.display.MagnifierSurfaceControl.dismiss()",
            "com.android.server.display.MagnifierSurfaceControl.SHOWN",
            "com.android.server.display.MagnifierSurfaceControl.mDisplayManager",
            "com.android.server.display.MagnifierSurfaceControl.access$800(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.mSurfaceControl",
            "com.android.server.display.MagnifierSurfaceControl.mSurface",
            "com.android.server.display.MagnifierSurfaceControl.access$300(com.android.server.display.MagnifierSurfaceControl)",
            "com.android.server.display.MagnifierSurfaceControl.mLastOffsetY",
            "com.android.server.display.MagnifierSurfaceControl.mLastOffsetX",
            "com.android.server.display.MagnifierSurfaceControl.mBorder"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierSurfaceControl$Listener.onCreateSurface(android.view.Surface, int, int)",
            "com.android.server.display.MagnifierSurfaceControl$Listener.onChangeSurface(android.view.Surface)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener.onSizeChanged(boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$1$1.onChange(boolean)",
            "com.android.server.display.OverlayDisplayAdapter$1$1.this$1",
            "com.android.server.display.OverlayDisplayAdapter$1$1.OverlayDisplayAdapter$1$1(com.android.server.display.OverlayDisplayAdapter$1, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$2.OverlayDisplayAdapter$OverlayDisplayHandle$2(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$2.run()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$2.this$1"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter.MIN_HEIGHT",
            "com.android.server.display.OverlayDisplayAdapter.chooseOverlayGravity(int)",
            "com.android.server.display.OverlayDisplayAdapter.mOverlays",
            "com.android.server.display.OverlayDisplayAdapter.TAG",
            "com.android.server.display.OverlayDisplayAdapter.getHandler()",
            "com.android.server.display.OverlayDisplayAdapter.static {}",
            "com.android.server.display.OverlayDisplayAdapter.MODE_PATTERN",
            "com.android.server.display.OverlayDisplayAdapter.access$000(com.android.server.display.OverlayDisplayAdapter)",
            "com.android.server.display.OverlayDisplayAdapter.updateOverlayDisplayDevicesLocked()",
            "com.android.server.display.OverlayDisplayAdapter.access$100(com.android.server.display.OverlayDisplayAdapter)",
            "com.android.server.display.OverlayDisplayAdapter.getSyncRoot()",
            "com.android.server.display.OverlayDisplayAdapter.updateOverlayDisplayDevices()",
            "com.android.server.display.OverlayDisplayAdapter.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.OverlayDisplayAdapter.UNIQUE_ID_PREFIX",
            "com.android.server.display.OverlayDisplayAdapter.mUiHandler",
            "com.android.server.display.OverlayDisplayAdapter.OverlayDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, android.os.Handler)",
            "com.android.server.display.OverlayDisplayAdapter.mCurrentOverlaySetting",
            "com.android.server.display.OverlayDisplayAdapter.registerLocked()",
            "com.android.server.display.OverlayDisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.OverlayDisplayAdapter.getContext()",
            "com.android.server.display.OverlayDisplayAdapter.DISPLAY_PATTERN",
            "com.android.server.display.OverlayDisplayAdapter.MAX_WIDTH",
            "com.android.server.display.OverlayDisplayAdapter.DEBUG",
            "com.android.server.display.OverlayDisplayAdapter.MIN_WIDTH",
            "com.android.server.display.OverlayDisplayAdapter.MAX_HEIGHT"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.OverlayDisplayAdapter$OverlayDisplayDevice(com.android.server.display.OverlayDisplayAdapter, android.os.IBinder, java.lang.String, java.util.List, int, int, float, long, boolean, int, android.graphics.SurfaceTexture, int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mInfo",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.destroyLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mState",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mActiveMode",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.getDisplayTokenLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mName",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.requestColorTransformAndModeInTransactionLocked(int, int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.this$0",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mDefaultMode",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mModes",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.getUniqueId()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mSecure",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mSurfaceTexture",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mDisplayPresentationDeadlineNanos",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mRawModes",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.performTraversalInTransactionLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mRefreshRate",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.setSurfaceInTransactionLocked(android.view.Surface)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.mSurface",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.onModeChangedLocked(int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice.setStateLocked(int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayMode.mHeight",
            "com.android.server.display.OverlayDisplayAdapter$OverlayMode.mDensityDpi",
            "com.android.server.display.OverlayDisplayAdapter$OverlayMode.mWidth",
            "com.android.server.display.OverlayDisplayAdapter$OverlayMode.OverlayDisplayAdapter$OverlayMode(int, int, int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayMode.toString()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$3.OverlayDisplayAdapter$OverlayDisplayHandle$3(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$3.this$1",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$3.run()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$1.this$1",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$1.onModeChangedLocked(int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$1.OverlayDisplayAdapter$OverlayDisplayHandle$1(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, android.os.IBinder, java.lang.String, java.util.List, int, int, float, long, boolean, int, android.graphics.SurfaceTexture, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$1.OverlayDisplayAdapter$1(com.android.server.display.OverlayDisplayAdapter)",
            "com.android.server.display.OverlayDisplayAdapter$1.this$0",
            "com.android.server.display.OverlayDisplayAdapter$1.run()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.this$0",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.DEFAULT_MODE_INDEX",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mSecure",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mModes",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$700(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mNumber",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mActiveMode",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mShowRunnable",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mDevice",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.onStateChanged(int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$800(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.showLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mResizeRunnable",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$300(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$200(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$400(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.OverlayDisplayAdapter$OverlayDisplayHandle(com.android.server.display.OverlayDisplayAdapter, java.lang.String, java.util.List, int, boolean, int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$500(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mDismissRunnable",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$802(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mGravity",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mWindow",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.dismissLocked()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.mName",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.access$600(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.onWindowDestroyed()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.onActiveModeChangedLocked(int)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle.onWindowCreated(android.graphics.SurfaceTexture, float, long, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$4.run()",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$4.OverlayDisplayAdapter$OverlayDisplayHandle$4(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$4.this$1"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.graphics.SurfaceTexture.updateTexImage()",
            "android.graphics.SurfaceTexture.release()",
            "android.graphics.SurfaceTexture.getTransformMatrix(float[])",
            "android.graphics.SurfaceTexture.SurfaceTexture(int)"
          ],
          "added": [],
          "name": "android.graphics.SurfaceTexture",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$2.onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)",
            "com.android.server.display.OverlayDisplayWindow$2.onSurfaceTextureUpdated(android.graphics.SurfaceTexture)",
            "com.android.server.display.OverlayDisplayWindow$2.OverlayDisplayWindow$2(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow$2.onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture, int, int)",
            "com.android.server.display.OverlayDisplayWindow$2.onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)",
            "com.android.server.display.OverlayDisplayWindow$2.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.TextureView.setScaleX(float)",
            "android.view.TextureView.setScaleY(float)",
            "android.view.TextureView.setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)",
            "android.view.TextureView.setPivotX(float)",
            "android.view.TextureView.setPivotY(float)",
            "android.view.TextureView.getLayoutParams()",
            "android.view.TextureView.getScaleY()",
            "android.view.TextureView.getScaleX()",
            "android.view.TextureView.setOpaque(boolean)"
          ],
          "added": [],
          "name": "android.view.TextureView",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$4.OverlayDisplayWindow$4(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow$4.onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float)",
            "com.android.server.display.OverlayDisplayWindow$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$3.onTouch(android.view.View, android.view.MotionEvent)",
            "com.android.server.display.OverlayDisplayWindow$3.this$0",
            "com.android.server.display.OverlayDisplayWindow$3.OverlayDisplayWindow$3(com.android.server.display.OverlayDisplayWindow)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.view.TextureView$SurfaceTextureListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow.access$100(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.resize(int, int, int, boolean)",
            "com.android.server.display.OverlayDisplayWindow.show()",
            "com.android.server.display.OverlayDisplayWindow.OverlayDisplayWindow(android.content.Context, java.lang.String, int, int, int, int, boolean, com.android.server.display.OverlayDisplayWindow$Listener)",
            "com.android.server.display.OverlayDisplayWindow.access$000(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.dismiss()",
            "com.android.server.display.OverlayDisplayWindow.mLiveTranslationY",
            "com.android.server.display.OverlayDisplayWindow.access$300(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.DEBUG",
            "com.android.server.display.OverlayDisplayWindow.mScaleGestureDetector",
            "com.android.server.display.OverlayDisplayWindow.mSecure",
            "com.android.server.display.OverlayDisplayWindow.mOnTouchListener",
            "com.android.server.display.OverlayDisplayWindow.clearLiveState()",
            "com.android.server.display.OverlayDisplayWindow.mDefaultDisplay",
            "com.android.server.display.OverlayDisplayWindow.access$200(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.mOnGestureListener",
            "com.android.server.display.OverlayDisplayWindow.MIN_SCALE",
            "com.android.server.display.OverlayDisplayWindow.mHeight",
            "com.android.server.display.OverlayDisplayWindow.access$824(com.android.server.display.OverlayDisplayWindow, float)",
            "com.android.server.display.OverlayDisplayWindow.DISABLE_MOVE_AND_RESIZE",
            "com.android.server.display.OverlayDisplayWindow.saveWindowParams()",
            "com.android.server.display.OverlayDisplayWindow.mWindowVisible",
            "com.android.server.display.OverlayDisplayWindow.access$724(com.android.server.display.OverlayDisplayWindow, float)",
            "com.android.server.display.OverlayDisplayWindow.WINDOW_ALPHA",
            "com.android.server.display.OverlayDisplayWindow.mTitle",
            "com.android.server.display.OverlayDisplayWindow.mTextureView",
            "com.android.server.display.OverlayDisplayWindow.mListener",
            "com.android.server.display.OverlayDisplayWindow.access$500(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.mSurfaceTextureListener",
            "com.android.server.display.OverlayDisplayWindow.createWindow()",
            "com.android.server.display.OverlayDisplayWindow.mWindowY",
            "com.android.server.display.OverlayDisplayWindow.mName",
            "com.android.server.display.OverlayDisplayWindow.mWindowContent",
            "com.android.server.display.OverlayDisplayWindow.mWindowParams",
            "com.android.server.display.OverlayDisplayWindow.mWindowX",
            "com.android.server.display.OverlayDisplayWindow.mGestureDetector",
            "com.android.server.display.OverlayDisplayWindow.INITIAL_SCALE",
            "com.android.server.display.OverlayDisplayWindow.mWindowScale",
            "com.android.server.display.OverlayDisplayWindow.dump(java.io.PrintWriter, java.lang.String)",
            "com.android.server.display.OverlayDisplayWindow.mDisplayManager",
            "com.android.server.display.OverlayDisplayWindow.mContext",
            "com.android.server.display.OverlayDisplayWindow.mWidth",
            "com.android.server.display.OverlayDisplayWindow.MAX_SCALE",
            "com.android.server.display.OverlayDisplayWindow.mTitleTextView",
            "com.android.server.display.OverlayDisplayWindow.access$600(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.mDisplayListener",
            "com.android.server.display.OverlayDisplayWindow.mOnScaleGestureListener",
            "com.android.server.display.OverlayDisplayWindow.mWindowManager",
            "com.android.server.display.OverlayDisplayWindow.updateDefaultDisplayInfo()",
            "com.android.server.display.OverlayDisplayWindow.updateWindowParams()",
            "com.android.server.display.OverlayDisplayWindow.mDefaultDisplayInfo",
            "com.android.server.display.OverlayDisplayWindow.relayout()",
            "com.android.server.display.OverlayDisplayWindow.mGravity",
            "com.android.server.display.OverlayDisplayWindow.access$400(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow.mDensityDpi",
            "com.android.server.display.OverlayDisplayWindow.mLiveTranslationX",
            "com.android.server.display.OverlayDisplayWindow.mLiveScale",
            "com.android.server.display.OverlayDisplayWindow.resize(int, int, int)",
            "com.android.server.display.OverlayDisplayWindow.TAG",
            "com.android.server.display.OverlayDisplayWindow.access$932(com.android.server.display.OverlayDisplayWindow, float)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$1.OverlayDisplayWindow$1(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow$1.onDisplayRemoved(int)",
            "com.android.server.display.OverlayDisplayWindow$1.onDisplayChanged(int)",
            "com.android.server.display.OverlayDisplayWindow$1.onDisplayAdded(int)",
            "com.android.server.display.OverlayDisplayWindow$1.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.view.ScaleGestureDetector$OnScaleGestureListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.view.ScaleGestureDetector.setQuickScaleEnabled(boolean)",
            "android.view.ScaleGestureDetector.ScaleGestureDetector(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener)",
            "android.view.ScaleGestureDetector.getScaleFactor()",
            "android.view.ScaleGestureDetector.getFocusY()",
            "android.view.ScaleGestureDetector.getFocusX()",
            "android.view.ScaleGestureDetector.onTouchEvent(android.view.MotionEvent)"
          ],
          "added": [],
          "name": "android.view.ScaleGestureDetector",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$Listener.onWindowDestroyed()",
            "com.android.server.display.OverlayDisplayWindow$Listener.onStateChanged(int)",
            "com.android.server.display.OverlayDisplayWindow$Listener.onWindowCreated(android.graphics.SurfaceTexture, float, long, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLDisplay",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.opengl.GLES20.glGetAttribLocation(int, java.lang.String)",
            "android.opengl.GLES20.glCreateProgram()",
            "android.opengl.GLES20.glVertexAttribPointer(int, int, int, boolean, int, int)",
            "android.opengl.GLES20.glDeleteBuffers(int, int[], int)",
            "android.opengl.GLES20.glClear(int)",
            "android.opengl.GLES20.glUniformMatrix4fv(int, int, boolean, float[], int)",
            "android.opengl.GLES20.glGenTextures(int, int[], int)",
            "android.opengl.GLES20.glUseProgram(int)",
            "android.opengl.GLES20.glFlush()",
            "android.opengl.GLES20.glReleaseShaderCompiler()",
            "android.opengl.GLES20.glTexParameteri(int, int, int)",
            "android.opengl.GLES20.glUniform1i(int, int)",
            "android.opengl.GLES20.glAttachShader(int, int)",
            "android.opengl.GLES20.glCompileShader(int)",
            "android.opengl.GLES20.glFinish()",
            "android.opengl.GLES20.glClearColor(float, float, float, float)",
            "android.opengl.GLES20.glBindTexture(int, int)",
            "android.opengl.GLES20.glGetUniformLocation(int, java.lang.String)",
            "android.opengl.GLES20.glLinkProgram(int)",
            "android.opengl.GLES20.glGetShaderiv(int, int, int[], int)",
            "android.opengl.GLES20.glGetShaderSource(int)",
            "android.opengl.GLES20.glBufferData(int, int, java.nio.Buffer, int)",
            "android.opengl.GLES20.glGetError()",
            "android.opengl.GLES20.glViewport(int, int, int, int)",
            "android.opengl.GLES20.glCreateShader(int)",
            "android.opengl.GLES20.glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)",
            "android.opengl.GLES20.glDeleteProgram(int)",
            "android.opengl.GLES20.glUniform1f(int, float)",
            "android.opengl.GLES20.glGetShaderInfoLog(int)",
            "android.opengl.GLES20.glGenBuffers(int, int[], int)",
            "android.opengl.GLES20.glDrawArrays(int, int, int)",
            "android.opengl.GLES20.glDeleteShader(int)",
            "android.opengl.GLES20.glEnableVertexAttribArray(int)",
            "android.opengl.GLES20.glDeleteTextures(int, int[], int)",
            "android.opengl.GLES20.glUniform2fv(int, int, float[], int)",
            "android.opengl.GLES20.glBindBuffer(int, int)",
            "android.opengl.GLES20.glActiveTexture(int)",
            "android.opengl.GLES20.glShaderSource(int, java.lang.String)"
          ],
          "added": [],
          "name": "android.opengl.GLES20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.ColorFade.mTexNames",
            "com.android.server.display.ColorFade.DEBUG",
            "com.android.server.display.ColorFade.mGLBuffers",
            "com.android.server.display.ColorFade.destroyGLShaders()",
            "com.android.server.display.ColorFade.mEglDisplay",
            "com.android.server.display.ColorFade.ColorFade(int)",
            "com.android.server.display.ColorFade.DEJANK_FRAMES",
            "com.android.server.display.ColorFade.destroyGLBuffers()",
            "com.android.server.display.ColorFade.mProjMatrix",
            "com.android.server.display.ColorFade.createEglContext()",
            "com.android.server.display.ColorFade.mEglSurface",
            "com.android.server.display.ColorFade.mTex1D",
            "com.android.server.display.ColorFade.mEglConfig",
            "com.android.server.display.ColorFade.checkGlErrors(java.lang.String)",
            "com.android.server.display.ColorFade.mVertexLoc",
            "com.android.server.display.ColorFade.captureScreenshotTextureAndSetViewport()",
            "com.android.server.display.ColorFade.mEglContext",
            "com.android.server.display.ColorFade.checkGlErrors(java.lang.String, boolean)",
            "com.android.server.display.ColorFade.initGLShaders(android.content.Context)",
            "com.android.server.display.ColorFade.mSurfaceControl",
            "com.android.server.display.ColorFade.prepare(android.content.Context, int)",
            "com.android.server.display.ColorFade.createSurface()",
            "com.android.server.display.ColorFade.mMode",
            "com.android.server.display.ColorFade.mAlphaLoc",
            "com.android.server.display.ColorFade.mCreatedResources",
            "com.android.server.display.ColorFade.mDeviceDimVec",
            "com.android.server.display.ColorFade.mFeather",
            "com.android.server.display.ColorFade.mTexMatrixLoc",
            "com.android.server.display.ColorFade.mSaturationLoc",
            "com.android.server.display.ColorFade.mSurfaceVisible",
            "com.android.server.display.ColorFade.sine80Tex",
            "com.android.server.display.ColorFade.mTimeMeasurementForPrepare",
            "com.android.server.display.ColorFade.drawEdgeUnite(float)",
            "com.android.server.display.ColorFade.destroyScreenshotTexture()",
            "com.android.server.display.ColorFade.mDisplayManager",
            "com.android.server.display.ColorFade.mCollapseLoc",
            "com.android.server.display.ColorFade.mSurface",
            "com.android.server.display.ColorFade.showSurface(float)",
            "com.android.server.display.ColorFade.attachEglContext()",
            "com.android.server.display.ColorFade.mDisplayManagerInternal",
            "com.android.server.display.ColorFade.mDisplayHeight",
            "com.android.server.display.ColorFade.mProgram",
            "com.android.server.display.ColorFade.segments70",
            "com.android.server.display.ColorFade.segmentsSIn33",
            "com.android.server.display.ColorFade.COLOR_FADE_LAYER",
            "com.android.server.display.ColorFade.detachEglContext()",
            "com.android.server.display.ColorFade.interpol_SineInOut80Interpolation_getStep(float)",
            "com.android.server.display.ColorFade.mTimeMeasurement",
            "com.android.server.display.ColorFade.mDisplayLayerStack",
            "com.android.server.display.ColorFade.mScaleLoc",
            "com.android.server.display.ColorFade.mVertexBuffer",
            "com.android.server.display.ColorFade.dump(java.io.PrintWriter)",
            "com.android.server.display.ColorFade.mDeviceDimLoc",
            "com.android.server.display.ColorFade.mTexCoordLoc",
            "com.android.server.display.ColorFade.segments80",
            "com.android.server.display.ColorFade.mTex1DLoc",
            "com.android.server.display.ColorFade.createEglSurface()",
            "com.android.server.display.ColorFade.mTex1DGenerated",
            "com.android.server.display.ColorFade.setupGradientTexture()",
            "com.android.server.display.ColorFade.static {}",
            "com.android.server.display.ColorFade.logEglError(java.lang.String)",
            "com.android.server.display.ColorFade.readFile(android.content.Context, int)",
            "com.android.server.display.ColorFade.interpol_SineInOut70Interpolation_getStep(float)",
            "com.android.server.display.ColorFade.setQuad(java.nio.FloatBuffer, float, float, float, float)",
            "com.android.server.display.ColorFade.MODE_FADE",
            "com.android.server.display.ColorFade.TAG",
            "com.android.server.display.ColorFade.destroyGradientTexture()",
            "com.android.server.display.ColorFade.mTexCoordBuffer",
            "com.android.server.display.ColorFade.MODE_COOL_DOWN",
            "com.android.server.display.ColorFade.interpol_SineIn33Interpolation_getStep(float)",
            "com.android.server.display.ColorFade.mOpacityLoc",
            "com.android.server.display.ColorFade.mDisplayWidth",
            "com.android.server.display.ColorFade.ortho(float, float, float, float, float, float)",
            "com.android.server.display.ColorFade.MODE_EDGE_UNITE",
            "com.android.server.display.ColorFade.mPrepared",
            "com.android.server.display.ColorFade.mSurfaceAlpha",
            "com.android.server.display.ColorFade.destroyEglSurface()",
            "com.android.server.display.ColorFade.mDisplayId",
            "com.android.server.display.ColorFade.loadShader(android.content.Context, int, int)",
            "com.android.server.display.ColorFade.dismiss()",
            "com.android.server.display.ColorFade.dismissResources()",
            "com.android.server.display.ColorFade.draw(float)",
            "com.android.server.display.ColorFade.initGLBuffers()",
            "com.android.server.display.ColorFade.mOpacity",
            "com.android.server.display.ColorFade.createNativeFloatBuffer(int)",
            "com.android.server.display.ColorFade.mSurfaceLayout",
            "com.android.server.display.ColorFade.MODE_EDGE_COLLAPSE",
            "com.android.server.display.ColorFade.destroySurface()",
            "com.android.server.display.ColorFade.mTexMatrix",
            "com.android.server.display.ColorFade.mTexNamesGenerated",
            "com.android.server.display.ColorFade.drawEdgeCollapse(float)",
            "com.android.server.display.ColorFade.mSurfaceSession",
            "com.android.server.display.ColorFade.mProjMatrixLoc",
            "com.android.server.display.ColorFade.MODE_WARM_UP",
            "com.android.server.display.ColorFade.mTexUnitLoc",
            "com.android.server.display.ColorFade.mGammaLoc",
            "com.android.server.display.ColorFade.drawFaded(float, float, float, float)"
          ],
          "added": [],
          "name": "com.android.server.display.ColorFade",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLContext",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLSurface",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.opengl.EGL14.eglInitialize(android.opengl.EGLDisplay, int[], int, int[], int)",
            "android.opengl.EGL14.eglChooseConfig(android.opengl.EGLDisplay, int[], int, android.opengl.EGLConfig[], int, int, int[], int)",
            "android.opengl.EGL14.eglCreateContext(android.opengl.EGLDisplay, android.opengl.EGLConfig, android.opengl.EGLContext, int[], int)",
            "android.opengl.EGL14.eglGetDisplay(int)",
            "android.opengl.EGL14.EGL_NO_DISPLAY",
            "android.opengl.EGL14.EGL_NO_CONTEXT",
            "android.opengl.EGL14.eglGetError()",
            "android.opengl.EGL14.eglCreateWindowSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, java.lang.Object, int[], int)",
            "android.opengl.EGL14.eglDestroySurface(android.opengl.EGLDisplay, android.opengl.EGLSurface)",
            "android.opengl.EGL14.EGL_NO_SURFACE",
            "android.opengl.EGL14.eglMakeCurrent(android.opengl.EGLDisplay, android.opengl.EGLSurface, android.opengl.EGLSurface, android.opengl.EGLContext)",
            "android.opengl.EGL14.eglSwapBuffers(android.opengl.EGLDisplay, android.opengl.EGLSurface)"
          ],
          "added": [],
          "name": "android.opengl.EGL14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLConfig",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.mDisplayManagerInternal",
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.ColorFade$NaturalSurfaceLayout(android.hardware.display.DisplayManagerInternal, int, android.view.SurfaceControl)",
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.onDisplayTransaction()",
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.dispose()",
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.mDisplayId",
            "com.android.server.display.ColorFade$NaturalSurfaceLayout.mSurfaceControl"
          ],
          "added": [],
          "name": "com.android.server.display.ColorFade$NaturalSurfaceLayout",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$1.IpRemoteDisplayController$1(com.android.server.display.IpRemoteDisplayController, android.os.Handler, android.content.ContentResolver)",
            "com.android.server.display.IpRemoteDisplayController$1.onChange(boolean, android.net.Uri)",
            "com.android.server.display.IpRemoteDisplayController$1.this$0",
            "com.android.server.display.IpRemoteDisplayController$1.val$resolver"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$12.val$event",
            "com.android.server.display.IpRemoteDisplayController$12.val$param",
            "com.android.server.display.IpRemoteDisplayController$12.this$0",
            "com.android.server.display.IpRemoteDisplayController$12.IpRemoteDisplayController$12(com.android.server.display.IpRemoteDisplayController, int, int)",
            "com.android.server.display.IpRemoteDisplayController$12.run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$7.onDisplayError(int)",
            "com.android.server.display.IpRemoteDisplayController$7.IpRemoteDisplayController$7(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController$7.onDisplayDisconnected()",
            "com.android.server.display.IpRemoteDisplayController$7.onDisplayConnected(android.view.Surface, int, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController$7.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$5.run()",
            "com.android.server.display.IpRemoteDisplayController$5.val$connectedMode",
            "com.android.server.display.IpRemoteDisplayController$5.IpRemoteDisplayController$5(com.android.server.display.IpRemoteDisplayController, int)",
            "com.android.server.display.IpRemoteDisplayController$5.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$6.onTerminateRequested()",
            "com.android.server.display.IpRemoteDisplayController$6.IpRemoteDisplayController$6(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController$6.onHeadSetConnected()",
            "com.android.server.display.IpRemoteDisplayController$6.onQoSLevelChanged(int)",
            "com.android.server.display.IpRemoteDisplayController$6.onTransportChanged(int)",
            "com.android.server.display.IpRemoteDisplayController$6.onWeakNetwork()",
            "com.android.server.display.IpRemoteDisplayController$6.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$3.val$ipAddr",
            "com.android.server.display.IpRemoteDisplayController$3.val$deviceType",
            "com.android.server.display.IpRemoteDisplayController$3.val$port",
            "com.android.server.display.IpRemoteDisplayController$3.IpRemoteDisplayController$3(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.IpRemoteDisplayController$3.this$0",
            "com.android.server.display.IpRemoteDisplayController$3.run()",
            "com.android.server.display.IpRemoteDisplayController$3.val$options"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$13.this$0",
            "com.android.server.display.IpRemoteDisplayController$13.IpRemoteDisplayController$13(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController$13.run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$2.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.display.IpRemoteDisplayController$2.IpRemoteDisplayController$2(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController$2.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController.access$1700(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$2500(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.access$802(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController.connectWfdBridgeServer(java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.DEBUG",
            "com.android.server.display.IpRemoteDisplayController.reportFeatureState()",
            "com.android.server.display.IpRemoteDisplayController.handleConnectionFailure(boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$800(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.mSupportsProtectedBuffers",
            "com.android.server.display.IpRemoteDisplayController.mAdvertisedDisplay",
            "com.android.server.display.IpRemoteDisplayController.RTSP_TIMEOUT_SECONDS",
            "com.android.server.display.IpRemoteDisplayController.isDongleRenameAvailable()",
            "com.android.server.display.IpRemoteDisplayController.access$1002(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$700(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.setParamData(org.json.JSONObject, int, int, int, boolean, boolean, int, boolean, boolean, int)",
            "com.android.server.display.IpRemoteDisplayController.access$1300(com.android.server.display.IpRemoteDisplayController, int, int)",
            "com.android.server.display.IpRemoteDisplayController.access$1600(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.requestResume()",
            "com.android.server.display.IpRemoteDisplayController.access$100(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$302(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.mListener",
            "com.android.server.display.IpRemoteDisplayController.TAG",
            "com.android.server.display.IpRemoteDisplayController.mHandler",
            "com.android.server.display.IpRemoteDisplayController.access$2600(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.access$300(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$1800(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController.access$1500(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$1100(com.android.server.display.IpRemoteDisplayController, int)",
            "com.android.server.display.IpRemoteDisplayController.createWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController.broadcastWfdState(int)",
            "com.android.server.display.IpRemoteDisplayController.mHDMIConnected",
            "com.android.server.display.IpRemoteDisplayController.getWifiDisplayBridgeStatus()",
            "com.android.server.display.IpRemoteDisplayController.access$102(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.mPrevNativeDisposeCompleted",
            "com.android.server.display.IpRemoteDisplayController.mRemoteDisplayConnected",
            "com.android.server.display.IpRemoteDisplayController.mAdvertisedDisplayFlags",
            "com.android.server.display.IpRemoteDisplayController.requestPause()",
            "com.android.server.display.IpRemoteDisplayController.advertiseDisplay(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController.enableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.IpRemoteDisplayController.mAdvertisedDisplayHeight",
            "com.android.server.display.IpRemoteDisplayController.notifyBridgeStatus(int)",
            "com.android.server.display.IpRemoteDisplayController.requestDataSetting(org.json.JSONObject, int)",
            "com.android.server.display.IpRemoteDisplayController.updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController.mConnectState",
            "com.android.server.display.IpRemoteDisplayController.access$200(com.android.server.display.IpRemoteDisplayController, int)",
            "com.android.server.display.IpRemoteDisplayController.mConnectedDevice",
            "com.android.server.display.IpRemoteDisplayController.requestPopup(int)",
            "com.android.server.display.IpRemoteDisplayController.mWfdBridgeServer",
            "com.android.server.display.IpRemoteDisplayController.requestEnableWifiDisplay(android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.IpRemoteDisplayController.access$500(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.launchWfdPlayerByWBS(int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.access$602(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.mRequestPendingSetup",
            "com.android.server.display.IpRemoteDisplayController.isWfdEngineRunning()",
            "com.android.server.display.IpRemoteDisplayController.tryCommunication(int)",
            "com.android.server.display.IpRemoteDisplayController.sendDisplayEventToExtendedListener(int, int)",
            "com.android.server.display.IpRemoteDisplayController.access$1400(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.disableWifiDisplay(int)",
            "com.android.server.display.IpRemoteDisplayController.disconnectWfdBridgeServer()",
            "com.android.server.display.IpRemoteDisplayController.enableWifiDisplay(int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.mBridgeReceiver",
            "com.android.server.display.IpRemoteDisplayController.access$400(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.requestDisableWifiDisplay(int)",
            "com.android.server.display.IpRemoteDisplayController.mAdvertisedDisplaySurface",
            "com.android.server.display.IpRemoteDisplayController.tryCommunication(android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.IpRemoteDisplayController.unadvertiseDisplay()",
            "com.android.server.display.IpRemoteDisplayController.mRemoteDisplay",
            "com.android.server.display.IpRemoteDisplayController.access$1900(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.requestEnableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.IpRemoteDisplayController.mRemoteDisplayInterface",
            "com.android.server.display.IpRemoteDisplayController.mWfdUibcManager",
            "com.android.server.display.IpRemoteDisplayController.access$1200(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.notifyExitHomeSyncApp()",
            "com.android.server.display.IpRemoteDisplayController.mAdvertisedDisplayWidth",
            "com.android.server.display.IpRemoteDisplayController.mRtspTimeout",
            "com.android.server.display.IpRemoteDisplayController.access$000(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$900(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.IpRemoteDisplayController.IpRemoteDisplayController(android.content.Context, android.os.Handler, com.android.server.display.IpRemoteDisplayController$Listener)",
            "com.android.server.display.IpRemoteDisplayController.isWifiDisplayBridgeAvailable()",
            "com.android.server.display.IpRemoteDisplayController.mDisconnectByUser",
            "com.android.server.display.IpRemoteDisplayController.mWifiDisplayOnSetting",
            "com.android.server.display.IpRemoteDisplayController.requestEnableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$2100(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.computeFeatureState()",
            "com.android.server.display.IpRemoteDisplayController.notifyEnterHomeSyncApp()",
            "com.android.server.display.IpRemoteDisplayController.access$2000(com.android.server.display.IpRemoteDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController.isRunningHomeSync",
            "com.android.server.display.IpRemoteDisplayController.launchWfdPlayer(int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.requestScreenMirroringEnable(boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$600(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.disconnect()",
            "com.android.server.display.IpRemoteDisplayController.mContext"
          ],
          "added": [
            "com.android.server.display.IpRemoteDisplayController.access$1400(com.android.server.display.IpRemoteDisplayController, int, int)",
            "com.android.server.display.IpRemoteDisplayController.access$2200(com.android.server.display.IpRemoteDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController.access$2100(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController.access$1700(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$2700(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.access$2000(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$2300(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$1200(com.android.server.display.IpRemoteDisplayController, int)",
            "com.android.server.display.IpRemoteDisplayController.access$1300(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$1102(com.android.server.display.IpRemoteDisplayController, boolean)",
            "com.android.server.display.IpRemoteDisplayController.access$2800(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController.access$1100(com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.IpRemoteDisplayController.access$1800(com.android.server.display.IpRemoteDisplayController)"
          ],
          "name": "com.android.server.display.IpRemoteDisplayController",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$11.val$display",
            "com.android.server.display.IpRemoteDisplayController$11.val$oldDisplayHeight",
            "com.android.server.display.IpRemoteDisplayController$11.val$oldDisplayWidth",
            "com.android.server.display.IpRemoteDisplayController$11.this$0",
            "com.android.server.display.IpRemoteDisplayController$11.run()",
            "com.android.server.display.IpRemoteDisplayController$11.val$oldDisplay",
            "com.android.server.display.IpRemoteDisplayController$11.val$connectedMode",
            "com.android.server.display.IpRemoteDisplayController$11.val$height",
            "com.android.server.display.IpRemoteDisplayController$11.IpRemoteDisplayController$11(com.android.server.display.IpRemoteDisplayController, android.view.Surface, android.view.Surface, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay, int, int, int, boolean, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController$11.val$surface",
            "com.android.server.display.IpRemoteDisplayController$11.val$flags",
            "com.android.server.display.IpRemoteDisplayController$11.val$oldSurface",
            "com.android.server.display.IpRemoteDisplayController$11.val$requestPendingSetup",
            "com.android.server.display.IpRemoteDisplayController$11.val$width"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$8.run()",
            "com.android.server.display.IpRemoteDisplayController$8.val$deviceType",
            "com.android.server.display.IpRemoteDisplayController$8.IpRemoteDisplayController$8(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress, int)",
            "com.android.server.display.IpRemoteDisplayController$8.val$addr",
            "com.android.server.display.IpRemoteDisplayController$8.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.onBridgeConnected()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.onGetStatus()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.IpRemoteDisplayController$WfdBridgeAdapter$1(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.onConnRequest(int, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.onError(int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.onOK(java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1.this$1"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$9.IpRemoteDisplayController$9(com.android.server.display.IpRemoteDisplayController, int)",
            "com.android.server.display.IpRemoteDisplayController$9.run()",
            "com.android.server.display.IpRemoteDisplayController$9.this$0",
            "com.android.server.display.IpRemoteDisplayController$9.val$featureState"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$9",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$4.val$deviceType",
            "com.android.server.display.IpRemoteDisplayController$4.val$isPendingRequest",
            "com.android.server.display.IpRemoteDisplayController$4.val$remoteP2pMacAddr",
            "com.android.server.display.IpRemoteDisplayController$4.val$options",
            "com.android.server.display.IpRemoteDisplayController$4.IpRemoteDisplayController$4(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.IpRemoteDisplayController$4.run()",
            "com.android.server.display.IpRemoteDisplayController$4.val$ipAddr",
            "com.android.server.display.IpRemoteDisplayController$4.val$deviceName",
            "com.android.server.display.IpRemoteDisplayController$4.this$0",
            "com.android.server.display.IpRemoteDisplayController$4.val$port"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$10.this$0",
            "com.android.server.display.IpRemoteDisplayController$10.val$addr",
            "com.android.server.display.IpRemoteDisplayController$10.val$reqDevType",
            "com.android.server.display.IpRemoteDisplayController$10.IpRemoteDisplayController$10(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress, int)",
            "com.android.server.display.IpRemoteDisplayController$10.run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$10",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2402(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.getBridgeConnType()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2200(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.getState()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mBridge",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.CONNECT_TYPE_SERVER",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SOURCE_STATE_SHIFT",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SCREEN_OFF",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SOURCE_STATE_MASK",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.IpRemoteDisplayController$WfdBridgeAdapter(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SINK_STATE_MASK",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.WFD_BRIDGE_PORT",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.isWfdEngineRunning()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mPendingType",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.startWFDEngine(int, int, java.net.InetAddress)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.TAG",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SCREEN_ON",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.setSinkState(int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.this$0",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SINK_STATE_SHIFT",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2300(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.disconnect()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mBridgeListner",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SCREEN_STATE_MASK",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2400(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.requestSource(int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.connect()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.isConnected()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mScreenState",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.requestSink(android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2302(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mPendingDev",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.STATE_DISABLED",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mSinkState",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.mSourceState",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.SCREEN_STATE_SHIFT",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.getConnAddr()",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.setSourceState(int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.CONNECT_TYPE_CLIENT",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.STATE_ENABLED",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.setScreenState(int)"
          ],
          "added": [
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2500(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2502(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2602(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter.access$2600(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)"
          ],
          "name": "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.IpRemoteDisplayController$Listener.onDisplayDisconnected()",
            "com.android.server.display.IpRemoteDisplayController$Listener.onDisplayConnectionFailed()",
            "com.android.server.display.IpRemoteDisplayController$Listener.onFeatureStateChanged(int)",
            "com.android.server.display.IpRemoteDisplayController$Listener.onQosLevelChanged(int)",
            "com.android.server.display.IpRemoteDisplayController$Listener.onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.IpRemoteDisplayController$Listener.onDisplayDisconnecting()",
            "com.android.server.display.IpRemoteDisplayController$Listener.onDisplayConnecting(android.hardware.display.WifiDisplay, int)"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.RemoteDisplay.dispose()",
            "android.media.RemoteDisplay.isDongleRenameAvailable()",
            "android.media.RemoteDisplay.setDeviceName(java.lang.String)",
            "android.media.RemoteDisplay.listen(java.lang.String, android.media.RemoteDisplay$Listener, android.os.Handler, java.lang.String, java.lang.String)",
            "android.media.RemoteDisplay.pause()",
            "android.media.RemoteDisplay.setParam(int, java.lang.String)",
            "android.media.RemoteDisplay.resume()"
          ],
          "added": [],
          "name": "android.media.RemoteDisplay",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.offsetOf(int)",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mCount",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.push(long, float)",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mRingLux",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.size()",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.AutomaticBrightnessController$AmbientLightRingBuffer(long)",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.getLux(int)",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mStart",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.clear()",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mCapacity",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mRingTime",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.BUFFER_SLACK",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.toString()",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.getTime(int)",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.mEnd",
            "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer.prune(long)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver$1.this$1",
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver$1.run()",
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver$1.AutomaticBrightnessController$SettingsObserver$1(com.android.server.display.AutomaticBrightnessController$SettingsObserver)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$SettingsObserver$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.handleMessage(android.os.Message)",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.AutomaticBrightnessController$AutomaticBrightnessHandler(com.android.server.display.AutomaticBrightnessController, android.os.Looper)",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.removeMessages(int)",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.post(java.lang.Runnable)",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.sendEmptyMessageAtTime(int, long)",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.this$0",
            "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler.sendEmptyMessageDelayed(int, long)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$UserSwitchedReceiver.this$0",
            "com.android.server.display.AutomaticBrightnessController$UserSwitchedReceiver.AutomaticBrightnessController$UserSwitchedReceiver(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$UserSwitchedReceiver.onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$UserSwitchedReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$2.this$0",
            "com.android.server.display.AutomaticBrightnessController$2.run()",
            "com.android.server.display.AutomaticBrightnessController$2.AutomaticBrightnessController$2(com.android.server.display.AutomaticBrightnessController)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver.this$0",
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver.AutomaticBrightnessController$SettingsObserver(com.android.server.display.AutomaticBrightnessController, android.os.Handler)",
            "com.android.server.display.AutomaticBrightnessController$SettingsObserver.onChange(boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$SettingsObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mLowBoundary",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mOffset",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.this$0",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mLux",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mOrgCd",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.AutomaticBrightnessController$OffsetPoint(com.android.server.display.AutomaticBrightnessController, float, float, int)",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mOffsetType",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.mHighBoundary",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.toString()",
            "com.android.server.display.AutomaticBrightnessController$OffsetPoint.BOUNDARY_RATIO"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$OffsetPoint",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$6.onTwilightStateChanged()",
            "com.android.server.display.AutomaticBrightnessController$6.AutomaticBrightnessController$6(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$6.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.printOffsetList(java.util.ArrayList)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.removeAllSubOffsetPointsLocked()",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.refreshFixedOffsetPointsLocked(int)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.SIZE_DEFAULT_LIST",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.removeAllReverseUserOffsetPointsLocked(int)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getStringForOffsetList(java.util.ArrayList)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.init()",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getSlope(float, float, float, float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.mOffsetList",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.this$0",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getOffset(float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.resetPersonalAutoBrightness()",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.AutomaticBrightnessController$PersonalAutoBrightness(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.HBM_LUX",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.addSubOffsetPointsIfNeededLocked(int)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.addToListAfterBoundaryCheckLocked(float, int, float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.addPoint(float, int)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.mOp0Lux",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getPersonalScreenAutoBrightness(float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getPersonalAutoBrightnessHighHysteresis(float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.BASIS_LUX",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.checkReversePointsByUsingAutoBrightnessTableValue(int)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.mOpBeforeHbmLux",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.dump(java.io.PrintWriter)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getPersonalAutoBrightnessLowHysteresis(float)",
            "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness.getIndex(java.util.ArrayList, float)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$3.this$0",
            "com.android.server.display.AutomaticBrightnessController$3.MIN_ABS_ACCELERATION",
            "com.android.server.display.AutomaticBrightnessController$3.SAMPLING_PERIOD_MS",
            "com.android.server.display.AutomaticBrightnessController$3.mCnt",
            "com.android.server.display.AutomaticBrightnessController$3.RADIANS_TO_DEGREES",
            "com.android.server.display.AutomaticBrightnessController$3.lowpassFilter(float, float, float)",
            "com.android.server.display.AutomaticBrightnessController$3.handleAccelerationDistrust(float)",
            "com.android.server.display.AutomaticBrightnessController$3.vectorMagnitude(float, float, float)",
            "com.android.server.display.AutomaticBrightnessController$3.mAccelerationDistrust",
            "com.android.server.display.AutomaticBrightnessController$3.tiltAngle(float, float)",
            "com.android.server.display.AutomaticBrightnessController$3.mTiltDistrust",
            "com.android.server.display.AutomaticBrightnessController$3.MAX_DEVIATION_FROM_GRAVITY",
            "com.android.server.display.AutomaticBrightnessController$3.onSensorChanged(android.hardware.SensorEvent)",
            "com.android.server.display.AutomaticBrightnessController$3.AutomaticBrightnessController$3(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$3.ACCELERATING_TIME_CONSTANT_MS",
            "com.android.server.display.AutomaticBrightnessController$3.onAccuracyChanged(android.hardware.Sensor, int)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController.mTimeMeasurement",
            "com.android.server.display.AutomaticBrightnessController.getTwilightGamma(long, long, long)",
            "com.android.server.display.AutomaticBrightnessController.mTemporaryScreenBrightnessSettingOverride",
            "com.android.server.display.AutomaticBrightnessController.access$1200(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.getAmbientLuxAndCandelaFromSensorHub()",
            "com.android.server.display.AutomaticBrightnessController.mLastHBM",
            "com.android.server.display.AutomaticBrightnessController.mAmbientCandela",
            "com.android.server.display.AutomaticBrightnessController.access$1400(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mScreenAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.lastLightSensorEventTime",
            "com.android.server.display.AutomaticBrightnessController.access$1700(com.android.server.display.AutomaticBrightnessController, long)",
            "com.android.server.display.AutomaticBrightnessController.mDynamicAutoBrightnessConfig",
            "com.android.server.display.AutomaticBrightnessController.AMBIENT_LIGHT_HORIZON",
            "com.android.server.display.AutomaticBrightnessController.DEBUG",
            "com.android.server.display.AutomaticBrightnessController.access$1300(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mContext",
            "com.android.server.display.AutomaticBrightnessController.calculateAmbientLux(long)",
            "com.android.server.display.AutomaticBrightnessController.DEBUG_PRETEND_LIGHT_SENSOR_ABSENT",
            "com.android.server.display.AutomaticBrightnessController.access$402(com.android.server.display.AutomaticBrightnessController, long)",
            "com.android.server.display.AutomaticBrightnessController.sendLuxLevel(float, boolean)",
            "com.android.server.display.AutomaticBrightnessController.mIsSupportedSensorHubAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.mPersonalAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.mLockPAB",
            "com.android.server.display.AutomaticBrightnessController.prepareBrightnessAdjustmentSample()",
            "com.android.server.display.AutomaticBrightnessController.HBM_LEVEL_SYSFS_PATH",
            "com.android.server.display.AutomaticBrightnessController.access$3402(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.changeModeInSensorHubAutoBrightness(int)",
            "com.android.server.display.AutomaticBrightnessController.access$1100(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mLastScreenAutoBrightnessGamma",
            "com.android.server.display.AutomaticBrightnessController.mDozing",
            "com.android.server.display.AutomaticBrightnessController.access$1000(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.access$2400(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.access$2512(com.android.server.display.AutomaticBrightnessController, int)",
            "com.android.server.display.AutomaticBrightnessController.access$2902(com.android.server.display.AutomaticBrightnessController, float)",
            "com.android.server.display.AutomaticBrightnessController.getAutomaticScreenBrightness()",
            "com.android.server.display.AutomaticBrightnessController.WEIGHTING_INTERCEPT",
            "com.android.server.display.AutomaticBrightnessController.MSG_PRINT_LAST_LIGHT_SENSOR_EVENT",
            "com.android.server.display.AutomaticBrightnessController.handleLightSensorEvent(long, float)",
            "com.android.server.display.AutomaticBrightnessController.BRIGHTNESS_ADJUSTMENT_SAMPLE_DEBOUNCE_MILLIS",
            "com.android.server.display.AutomaticBrightnessController.AUTO_BRIGHTNESS_LEVEL_PATH",
            "com.android.server.display.AutomaticBrightnessController.access$1800(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.lastRawBrightnessValue",
            "com.android.server.display.AutomaticBrightnessController.mBrightnessAdjustmentSampleOldLux",
            "com.android.server.display.AutomaticBrightnessController.mDarkeningLuxThreshold",
            "com.android.server.display.AutomaticBrightnessController.updateAmbientLux()",
            "com.android.server.display.AutomaticBrightnessController.access$1900(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mLightSensorWarmUpTimeConfig",
            "com.android.server.display.AutomaticBrightnessController.mSettingsObserver",
            "com.android.server.display.AutomaticBrightnessController.mWasTconMaxLevel",
            "com.android.server.display.AutomaticBrightnessController.DARKENING_LIGHT_HYSTERESIS",
            "com.android.server.display.AutomaticBrightnessController.mUseSystemPowerSaveMode",
            "com.android.server.display.AutomaticBrightnessController.mPendingScreenAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.setAmbientLux(float)",
            "com.android.server.display.AutomaticBrightnessController.access$1500(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.HBM_USER_ENABLE",
            "com.android.server.display.AutomaticBrightnessController.isPabUpdatePending()",
            "com.android.server.display.AutomaticBrightnessController.mRecentLightSamples",
            "com.android.server.display.AutomaticBrightnessController.mAmbientLux",
            "com.android.server.display.AutomaticBrightnessController.access$2802(com.android.server.display.AutomaticBrightnessController, float)",
            "com.android.server.display.AutomaticBrightnessController.notifySurfaceFlinger()",
            "com.android.server.display.AutomaticBrightnessController.access$1600(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mSContextManager",
            "com.android.server.display.AutomaticBrightnessController.getAmbientLux()",
            "com.android.server.display.AutomaticBrightnessController.mExistCommonLuxPath",
            "com.android.server.display.AutomaticBrightnessController.mSensorHubAutoBrightnessListener",
            "com.android.server.display.AutomaticBrightnessController.setOutdoorMode(boolean)",
            "com.android.server.display.AutomaticBrightnessController.mScreenBrightnessSetting",
            "com.android.server.display.AutomaticBrightnessController.mLightSensorRate",
            "com.android.server.display.AutomaticBrightnessController.access$2500(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mScreenAutoBrightnessSpline",
            "com.android.server.display.AutomaticBrightnessController.access$3002(com.android.server.display.AutomaticBrightnessController, float)",
            "com.android.server.display.AutomaticBrightnessController.mExistMdnieAutoBrightnessLevelPath",
            "com.android.server.display.AutomaticBrightnessController.access$3300(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.mPendingScreenBrightnessSetting",
            "com.android.server.display.AutomaticBrightnessController.TWILIGHT_ADJUSTMENT_MAX_GAMMA",
            "com.android.server.display.AutomaticBrightnessController.mScreenBrightnessModeSetting",
            "com.android.server.display.AutomaticBrightnessController.setLightSensorEnabled(boolean)",
            "com.android.server.display.AutomaticBrightnessController.mResetAmbientLuxAfterWarmUpConfig",
            "com.android.server.display.AutomaticBrightnessController.mLastObservedSensorHubLuxTime",
            "com.android.server.display.AutomaticBrightnessController.access$800(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.setScreenAutoBrightnessAdjustment(float)",
            "com.android.server.display.AutomaticBrightnessController.access$3202(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.access$2600(com.android.server.display.AutomaticBrightnessController, long, float)",
            "com.android.server.display.AutomaticBrightnessController.access$2900(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.AutomaticBrightnessController(com.android.server.display.AutomaticBrightnessController$Callbacks, android.os.Looper, android.hardware.SensorManager, android.util.Spline, int, int, int, float, int, long, long, boolean, android.hardware.scontext.SContextManager, boolean, com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig, android.content.Context)",
            "com.android.server.display.AutomaticBrightnessController.USE_TWILIGHT_ADJUSTMENT",
            "com.android.server.display.AutomaticBrightnessController.updatePersonalScreenAutoBrightnessTableLocked(boolean)",
            "com.android.server.display.AutomaticBrightnessController.TAG",
            "com.android.server.display.AutomaticBrightnessController.mTwilight",
            "com.android.server.display.AutomaticBrightnessController.SPECIFIC_HBM_FEATURE",
            "com.android.server.display.AutomaticBrightnessController.mScreenBrightnessRangeMinimum",
            "com.android.server.display.AutomaticBrightnessController.mSECAverageLux",
            "com.android.server.display.AutomaticBrightnessController.updateFinalAutoBrightness(boolean, float, float, float)",
            "com.android.server.display.AutomaticBrightnessController.isManualAutoBrightnessValid()",
            "com.android.server.display.AutomaticBrightnessController.mRecentSensorHubSamples",
            "com.android.server.display.AutomaticBrightnessController.configure(boolean, float, boolean, boolean, boolean, boolean, float, boolean, boolean, int)",
            "com.android.server.display.AutomaticBrightnessController.mPrevUsingVariableMaxManualBrightness",
            "com.android.server.display.AutomaticBrightnessController.mUseAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.TAG_DAB",
            "com.android.server.display.AutomaticBrightnessController.mLightSensorListener",
            "com.android.server.display.AutomaticBrightnessController.updateAutoBrightnessSEC(boolean)",
            "com.android.server.display.AutomaticBrightnessController.mScreenAutoBrightnessAdjustment",
            "com.android.server.display.AutomaticBrightnessController.mBrightnessAdjustmentSamplePending",
            "com.android.server.display.AutomaticBrightnessController.mCallbacks",
            "com.android.server.display.AutomaticBrightnessController.TAG_PAB",
            "com.android.server.display.AutomaticBrightnessController.mBrightnessAdjustmentSampleOldAdjustment",
            "com.android.server.display.AutomaticBrightnessController.OFFSET_FIX",
            "com.android.server.display.AutomaticBrightnessController.access$000(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mManualAdjustment",
            "com.android.server.display.AutomaticBrightnessController.updateAutoBrightness(boolean)",
            "com.android.server.display.AutomaticBrightnessController.mPrevTconBrightnessMode",
            "com.android.server.display.AutomaticBrightnessController.cancelBrightnessAdjustmentSample()",
            "com.android.server.display.AutomaticBrightnessController.mDebounceLuxDirection",
            "com.android.server.display.AutomaticBrightnessController.isHbmEnabled()",
            "com.android.server.display.AutomaticBrightnessController.mTiltAngle",
            "com.android.server.display.AutomaticBrightnessController.access$3500(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mAutoBrightnessForEbookOnly",
            "com.android.server.display.AutomaticBrightnessController.mHandler",
            "com.android.server.display.AutomaticBrightnessController.applyLightSensorMeasurement(long, float)",
            "com.android.server.display.AutomaticBrightnessController.TCON_BRIGHTNESS_MODE_PATH",
            "com.android.server.display.AutomaticBrightnessController.dump(java.io.PrintWriter)",
            "com.android.server.display.AutomaticBrightnessController.mBrightnessAdjustmentSampleOldGamma",
            "com.android.server.display.AutomaticBrightnessController.printLastLightSensorEvent()",
            "com.android.server.display.AutomaticBrightnessController.calculateWeight(long, long)",
            "com.android.server.display.AutomaticBrightnessController.mBrighteningLightDebounceConfig",
            "com.android.server.display.AutomaticBrightnessController.weightIntegral(long)",
            "com.android.server.display.AutomaticBrightnessController.TAG_SENSOR",
            "com.android.server.display.AutomaticBrightnessController.USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT",
            "com.android.server.display.AutomaticBrightnessController.mHBMDisableLevel",
            "com.android.server.display.AutomaticBrightnessController.mNeedToAddPersonalAutoBrightnessPoint",
            "com.android.server.display.AutomaticBrightnessController.MDNIE_AUTO_BRIGHTNESS_LEVEL_PATH",
            "com.android.server.display.AutomaticBrightnessController.mHandlerRegisterInSeperateThread",
            "com.android.server.display.AutomaticBrightnessController.OFFSET_SUB",
            "com.android.server.display.AutomaticBrightnessController.mBrightnessAdjustmentSampleOldBrightness",
            "com.android.server.display.AutomaticBrightnessController.clampScreenBrightness(int)",
            "com.android.server.display.AutomaticBrightnessController.mLastObservedLux",
            "com.android.server.display.AutomaticBrightnessController.mExistTconBrightnessModePath",
            "com.android.server.display.AutomaticBrightnessController.nextAmbientLightDarkeningTransition(long)",
            "com.android.server.display.AutomaticBrightnessController.mLastTemporaryScreenBrightnessSettingOverride",
            "com.android.server.display.AutomaticBrightnessController.mPrevCommonLux",
            "com.android.server.display.AutomaticBrightnessController.updateAmbientLux(long)",
            "com.android.server.display.AutomaticBrightnessController.access$2102(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.mLightSensor",
            "com.android.server.display.AutomaticBrightnessController.access$700(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mUserSwitched",
            "com.android.server.display.AutomaticBrightnessController.access$500(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.collectBrightnessAdjustmentSample()",
            "com.android.server.display.AutomaticBrightnessController.access$2000(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.access$600(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mHandlerRegisterInSeperate",
            "com.android.server.display.AutomaticBrightnessController.mTiltListener",
            "com.android.server.display.AutomaticBrightnessController.mLastObservedLuxTime",
            "com.android.server.display.AutomaticBrightnessController.access$2200(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.access$2100(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mSensorManager",
            "com.android.server.display.AutomaticBrightnessController.nextAmbientLightBrighteningTransition(long)",
            "com.android.server.display.AutomaticBrightnessController.BRIGHTENING_LIGHT_HYSTERESIS",
            "com.android.server.display.AutomaticBrightnessController.OFFSET_USER",
            "com.android.server.display.AutomaticBrightnessController.mBrighteningLuxThreshold",
            "com.android.server.display.AutomaticBrightnessController.isAmbientLuxValid()",
            "com.android.server.display.AutomaticBrightnessController.mExistTconLuxPath",
            "com.android.server.display.AutomaticBrightnessController.access$3000(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.applyLightSensorMeasurementSEC(long, float)",
            "com.android.server.display.AutomaticBrightnessController.access$300(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.access$200(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.access$2300(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.checkMarkerUserDetach(int)",
            "com.android.server.display.AutomaticBrightnessController.mLightSensorEnableTime",
            "com.android.server.display.AutomaticBrightnessController.mSensorListenerRegistrationRunnable",
            "com.android.server.display.AutomaticBrightnessController.SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA",
            "com.android.server.display.AutomaticBrightnessController.mDarkeningLightDebounceConfig",
            "com.android.server.display.AutomaticBrightnessController.MSG_BRIGHTNESS_ADJUSTMENT_SAMPLE",
            "com.android.server.display.AutomaticBrightnessController.mScreenBrightnessRangeMaximum",
            "com.android.server.display.AutomaticBrightnessController.COMMON_LUX_PATH",
            "com.android.server.display.AutomaticBrightnessController.mDozeScaleFactor",
            "com.android.server.display.AutomaticBrightnessController.mSensorListenerUnregistrationRunnable",
            "com.android.server.display.AutomaticBrightnessController.mTwilightListener",
            "com.android.server.display.AutomaticBrightnessController.mDebounceLuxTime",
            "com.android.server.display.AutomaticBrightnessController.mHasRetailModeApp",
            "com.android.server.display.AutomaticBrightnessController.mUsingVariableMaxManualBrightness",
            "com.android.server.display.AutomaticBrightnessController.access$2702(com.android.server.display.AutomaticBrightnessController, long)",
            "com.android.server.display.AutomaticBrightnessController.mAmbientLightRingBuffer",
            "com.android.server.display.AutomaticBrightnessController.mPrevAutoBrightnessLevel",
            "com.android.server.display.AutomaticBrightnessController.TCON_LUX_PATH",
            "com.android.server.display.AutomaticBrightnessController.mAmbientLuxValid",
            "com.android.server.display.AutomaticBrightnessController.mLowHysteresis",
            "com.android.server.display.AutomaticBrightnessController.MSG_UPDATE_AMBIENT_LUX",
            "com.android.server.display.AutomaticBrightnessController.mUseManualAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.mScreenBrightnessSettingDefault",
            "com.android.server.display.AutomaticBrightnessController.access$900(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController.mTiltSensor",
            "com.android.server.display.AutomaticBrightnessController.SPECIFIC_HBM_LUX",
            "com.android.server.display.AutomaticBrightnessController.mSettingAutoBrightness",
            "com.android.server.display.AutomaticBrightnessController.readFromFile(java.lang.String)",
            "com.android.server.display.AutomaticBrightnessController.mPrevTconLuxLevel",
            "com.android.server.display.AutomaticBrightnessController.mExistAutoBrightnessLevelPath",
            "com.android.server.display.AutomaticBrightnessController.AMBIENT_LIGHT_PREDICTION_TIME_MILLIS",
            "com.android.server.display.AutomaticBrightnessController.MANUAL_LUX_LIMIT",
            "com.android.server.display.AutomaticBrightnessController.mLightSensorEnabled",
            "com.android.server.display.AutomaticBrightnessController.check_HBM_Detail()",
            "com.android.server.display.AutomaticBrightnessController.mIsLockZone",
            "com.android.server.display.AutomaticBrightnessController.access$100(com.android.server.display.AutomaticBrightnessController, boolean)",
            "com.android.server.display.AutomaticBrightnessController.access$3102(com.android.server.display.AutomaticBrightnessController, long)",
            "com.android.server.display.AutomaticBrightnessController.lastLightSensorValue",
            "com.android.server.display.AutomaticBrightnessController.access$1602(com.android.server.display.AutomaticBrightnessController, float)",
            "com.android.server.display.AutomaticBrightnessController.updateAmbientLuxSEC(long)",
            "com.android.server.display.AutomaticBrightnessController.mLatestAnimationTarget",
            "com.android.server.display.AutomaticBrightnessController.static {}",
            "com.android.server.display.AutomaticBrightnessController.mHighHysteresis",
            "com.android.server.display.AutomaticBrightnessController.TWILIGHT_ADJUSTMENT_TIME"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$4.onSensorChanged(android.hardware.SensorEvent)",
            "com.android.server.display.AutomaticBrightnessController$4.AutomaticBrightnessController$4(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$4.onAccuracyChanged(android.hardware.Sensor, int)",
            "com.android.server.display.AutomaticBrightnessController$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$1.this$0",
            "com.android.server.display.AutomaticBrightnessController$1.AutomaticBrightnessController$1(com.android.server.display.AutomaticBrightnessController)",
            "com.android.server.display.AutomaticBrightnessController$1.run()"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.Sensor.getStringType()",
            "android.hardware.Sensor.getMaximumRange()"
          ],
          "added": [],
          "name": "android.hardware.Sensor",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.SensorEventListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.SensorManager.unregisterListener(android.hardware.SensorEventListener)",
            "android.hardware.SensorManager.registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)",
            "android.hardware.SensorManager.cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)",
            "android.hardware.SensorManager.getDefaultSensor(int, boolean)",
            "android.hardware.SensorManager.registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)",
            "android.hardware.SensorManager.requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)",
            "android.hardware.SensorManager.getDefaultSensor(int)"
          ],
          "added": [],
          "name": "android.hardware.SensorManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.scontext.SContextListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.scontext.SContextManager.getFeatureLevel(int)",
            "android.hardware.scontext.SContextManager.registerListener(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute)",
            "android.hardware.scontext.SContextManager.registerListener(android.hardware.scontext.SContextListener, int)",
            "android.hardware.scontext.SContextManager.unregisterListener(android.hardware.scontext.SContextListener)",
            "android.hardware.scontext.SContextManager.registerListener(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute, android.os.Looper)",
            "android.hardware.scontext.SContextManager.unregisterListener(android.hardware.scontext.SContextListener, int)",
            "android.hardware.scontext.SContextManager.registerListener(android.hardware.scontext.SContextListener, int, android.os.Looper)",
            "android.hardware.scontext.SContextManager.isAvailableService(int)",
            "android.hardware.scontext.SContextManager.setReferenceData(int, android.hardware.scontext.SContextAttribute)",
            "android.hardware.scontext.SContextManager.changeParameters(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute)",
            "android.hardware.scontext.SContextManager.registerListener(android.hardware.scontext.SContextListener, int, int)"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.scontext.SContextAttribute",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$Callbacks.updateBrightness()"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$Callbacks",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mAutoBrightnessLevelStepRatioForEbook",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getDynamicAutoBrightnessHighHysteresis(float)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.sendAutoBrightnessTablePacket(byte[])",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.initDynamicAutoBrightnessSlopeTables()",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessLevelsForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisLevels",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisSlope",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getDynamicAutoBrightnessValue(float)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getAutoBrightnessTablePacket()",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getDynamicAutoBrightnessLevelStepRatio(float, boolean)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getDynamicAutoBrightnessLowHysteresis(float)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mAutoBrightnessLevelStepRatioAt0Lux",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mValueOfVirtualZeroCandela",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mMinimumBrightnessStepValue",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessValues",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisValuesForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisLevelsForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.isTablet()",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mAutoBrightnessLevelStepRatio",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessValuesForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisLevels",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisLevelsForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisValues",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowLimitAtHighestAutoBrightnessLevel",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mMinimumExpressiveBrightnessValues",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessLevels",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisSlope",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisSlopeForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getSlope(int, int, int, int, boolean)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisValues",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.dumpAutoBrightnessTables(java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.getFinalDynamicAutoBrightnessValue(float, float)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mLowHysteresisValuesForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.access$400(com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig, java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.this$0",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.DisplayPowerController$DynamicAutoBrightnessConfig(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessValueSlopeForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mBrightnessValueSlope",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mHighHysteresisSlopeForEbookOnly",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.mIsTablet",
            "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig.initializeProperties()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.scontext.SContextAutoBrightnessAttribute.SContextAutoBrightnessAttribute(int)",
            "android.hardware.scontext.SContextAutoBrightnessAttribute.SContextAutoBrightnessAttribute(byte[])"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextAutoBrightnessAttribute",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.util.FloatMath.pow(float, float)"
          ],
          "added": [],
          "name": "android.util.FloatMath",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.removeMessages(int)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.this$0",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.sendMessage(android.os.Message)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.obtainMessage(int, java.lang.Object)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.post(java.lang.Runnable)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.handleMessage(android.os.Message)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.runWithScissors(java.lang.Runnable, long)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.postAtFrontOfQueue(java.lang.Runnable)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.sendMessageAtTime(android.os.Message, long)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.DisplayPowerController$DisplayControllerHandler(com.android.server.display.DisplayPowerController, android.os.Looper)",
            "com.android.server.display.DisplayPowerController$DisplayControllerHandler.obtainMessage(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$DisplayControllerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$7.run()",
            "com.android.server.display.DisplayPowerController$7.val$pw",
            "com.android.server.display.DisplayPowerController$7.DisplayPowerController$7(com.android.server.display.DisplayPowerController, java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController$7.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$3.run()",
            "com.android.server.display.DisplayPowerController$3.DisplayPowerController$3(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$3.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$5.this$0",
            "com.android.server.display.DisplayPowerController$5.DisplayPowerController$5(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$5.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.animation.AccelerateInterpolator.AccelerateInterpolator(float)"
          ],
          "added": [],
          "name": "android.view.animation.AccelerateInterpolator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController.updateColorWeaknessMode(boolean, boolean)",
            "com.android.server.display.DisplayPowerController.access$1500()",
            "com.android.server.display.DisplayPowerController.HBM_LUX",
            "com.android.server.display.DisplayPowerController.blockScreenOn()",
            "com.android.server.display.DisplayPowerController.Manual_ADJ_Table",
            "com.android.server.display.DisplayPowerController.readOneLine(java.lang.String)",
            "com.android.server.display.DisplayPowerController.mCallbacks",
            "com.android.server.display.DisplayPowerController.initialize()",
            "com.android.server.display.DisplayPowerController.mPendingWaitForNegativeProximityLocked",
            "com.android.server.display.DisplayPowerController.normalizeAbsoluteBrightness(int)",
            "com.android.server.display.DisplayPowerController.mLock",
            "com.android.server.display.DisplayPowerController.mProximityThreshold",
            "com.android.server.display.DisplayPowerController.clampScreenBrightness(int)",
            "com.android.server.display.DisplayPowerController.TAG",
            "com.android.server.display.DisplayPowerController.USE_SLOW_AUTO_BRIGHTNESS_CHANGE",
            "com.android.server.display.DisplayPowerController.MARKER_TRACKING_RATE_SLOW",
            "com.android.server.display.DisplayPowerController.TAG_DAB",
            "com.android.server.display.DisplayPowerController.USE_DYNAMIC_ANTI_GLARE",
            "com.android.server.display.DisplayPowerController.sendOnProximityNegativeWithWakelock()",
            "com.android.server.display.DisplayPowerController.mColorFadeStateRunnable",
            "com.android.server.display.DisplayPowerController.setPendingProximityDebounceTime(long)",
            "com.android.server.display.DisplayPowerController.mProximitySensorEnabled",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessRangeMinimum",
            "com.android.server.display.DisplayPowerController.AVAILABLE_COLOR_WEAKNESS_MODE",
            "com.android.server.display.DisplayPowerController.mOnProximityPositiveRunnable",
            "com.android.server.display.DisplayPowerController.EDGE_UNITE_EFFECT_ENABLED",
            "com.android.server.display.DisplayPowerController.mUsingVariableMaxManualBrightness",
            "com.android.server.display.DisplayPowerController.handleProximitySensorEvent(long, boolean)",
            "com.android.server.display.DisplayPowerController.access$000(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.setActualDisplayState(int, int)",
            "com.android.server.display.DisplayPowerController.mOnProximityNegativeRunnable",
            "com.android.server.display.DisplayPowerController.mPowerState",
            "com.android.server.display.DisplayPowerController.mAllowAutoBrightnessWhileDozingConfig",
            "com.android.server.display.DisplayPowerController.COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS",
            "com.android.server.display.DisplayPowerController.access$800(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.Manual_Step",
            "com.android.server.display.DisplayPowerController.reportedToPolicyToString(int)",
            "com.android.server.display.DisplayPowerController.mScreenOnOffAlreadyDone",
            "com.android.server.display.DisplayPowerController.mRampAnimatorListener",
            "com.android.server.display.DisplayPowerController.mAppliedDimming",
            "com.android.server.display.DisplayPowerController.mPassRampAnimation",
            "com.android.server.display.DisplayPowerController.CLEAR_VIEW_BRIGHTNESS_MODE_PATH",
            "com.android.server.display.DisplayPowerController.EDGE_COLLAPSE_EFFECT_ENABLED",
            "com.android.server.display.DisplayPowerController.mAppliedLowPower",
            "com.android.server.display.DisplayPowerController.mWaitingForNegativeProximity",
            "com.android.server.display.DisplayPowerController.animateScreenBrightness(int, int)",
            "com.android.server.display.DisplayPowerController.mSection_Brightness",
            "com.android.server.display.DisplayPowerController.PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY",
            "com.android.server.display.DisplayPowerController.mAppliedAutoBrightness",
            "com.android.server.display.DisplayPowerController.EDGE_UNITE_LCD_OFF_DURATION_MILLIS",
            "com.android.server.display.DisplayPowerController.getFinalBrightness(int)",
            "com.android.server.display.DisplayPowerController.access$1100(com.android.server.display.DisplayPowerController, long, boolean)",
            "com.android.server.display.DisplayPowerController.mBlanker",
            "com.android.server.display.DisplayPowerController.DUAL_SCREEN_COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS",
            "com.android.server.display.DisplayPowerController.access$500(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.mDisplayReadyLocked",
            "com.android.server.display.DisplayPowerController.access$1200(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.mProximity",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessRangeMaximum",
            "com.android.server.display.DisplayPowerController.mPendingProximity",
            "com.android.server.display.DisplayPowerController.access$700(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.mContext",
            "com.android.server.display.DisplayPowerController.mColorFadeOnAnimator",
            "com.android.server.display.DisplayPowerController.EDGE_COLLAPSE_LCD_OFF_DURATION_MILLIS",
            "com.android.server.display.DisplayPowerController.mWindowManagerPolicy",
            "com.android.server.display.DisplayPowerController.POWERSAVEMODE_BRIGHTNESS_OFFSET",
            "com.android.server.display.DisplayPowerController.access$1000(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.TAG_SENSOR",
            "com.android.server.display.DisplayPowerController.requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)",
            "com.android.server.display.DisplayPowerController.MSG_UPDATE_POWER_STATE",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessDarkConfig",
            "com.android.server.display.DisplayPowerController.getColumnOrder(int)",
            "com.android.server.display.DisplayPowerController.initManualAutobrightnessTable()",
            "com.android.server.display.DisplayPowerController.mIsCheckDynamicAntiGlareDone",
            "com.android.server.display.DisplayPowerController.mManualAutoBrightnessAdjustment",
            "com.android.server.display.DisplayPowerController.access$1800(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.SCREEN_ON_BLOCKED_TRACE_NAME",
            "com.android.server.display.DisplayPowerController.CLEAR_VIEW_BRIGHTNESS_MODE_RATIO",
            "com.android.server.display.DisplayPowerController.setScreenOnAndElectronBeamExit()",
            "com.android.server.display.DisplayPowerController.mLastUpdateCoverStateTime",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessBeforeFinal",
            "com.android.server.display.DisplayPowerController.mHandler",
            "com.android.server.display.DisplayPowerController.access$200(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.getCurrentScreenBrightnessBeforeFinal()",
            "com.android.server.display.DisplayPowerController.mClearViewColorWeaknessEnabledMode",
            "com.android.server.display.DisplayPowerController.sendOnProximityPositiveWithWakelock()",
            "com.android.server.display.DisplayPowerController.$assertionsDisabled",
            "com.android.server.display.DisplayPowerController.updateBrightness()",
            "com.android.server.display.DisplayPowerController.BRIGHTNESS_MODE_CLEAR_VIEW",
            "com.android.server.display.DisplayPowerController.sendUpdatePowerStateLocked()",
            "com.android.server.display.DisplayPowerController.isSensorhubAutoBrightnessAvailable()",
            "com.android.server.display.DisplayPowerController.mProximitySensor",
            "com.android.server.display.DisplayPowerController.mFinalTemporaryScreenBrightness",
            "com.android.server.display.DisplayPowerController.getClearViewBrightnessRatio(float)",
            "com.android.server.display.DisplayPowerController.dumpLocal(java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController.dump(java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController.BRIGHTNESS_RAMP_RATE_FAST",
            "com.android.server.display.DisplayPowerController.USE_COLOR_FADE_ON_ANIMATION",
            "com.android.server.display.DisplayPowerController.mCleanListener",
            "com.android.server.display.DisplayPowerController.mSContextManager",
            "com.android.server.display.DisplayPowerController.isProximitySensorAvailable()",
            "com.android.server.display.DisplayPowerController.static {}",
            "com.android.server.display.DisplayPowerController.mLatestAnimationTarget",
            "com.android.server.display.DisplayPowerController.mOnStateChangedRunnable",
            "com.android.server.display.DisplayPowerController.mPendingScreenOnUnblocker",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessRampAnimator",
            "com.android.server.display.DisplayPowerController.mStrAutoBrightnessTablePacket",
            "com.android.server.display.DisplayPowerController.REPORTED_TO_POLICY_SCREEN_OFF",
            "com.android.server.display.DisplayPowerController.Manual_Adding_Brightness",
            "com.android.server.display.DisplayPowerController.DisplayPowerController(android.content.Context, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager, com.android.server.display.DisplayBlanker)",
            "com.android.server.display.DisplayPowerController.mPendingRequestChangedLocked",
            "com.android.server.display.DisplayPowerController.clearPendingProximityDebounceTime()",
            "com.android.server.display.DisplayPowerController.mActualDisplayState",
            "com.android.server.display.DisplayPowerController.PROXIMITY_NEGATIVE",
            "com.android.server.display.DisplayPowerController.COLOR_WEAKNESS_MODE_PATH",
            "com.android.server.display.DisplayPowerController.REPORTED_TO_POLICY_SCREEN_ON",
            "com.android.server.display.DisplayPowerController.mPendingScreenAutoBrightness",
            "com.android.server.display.DisplayPowerController.BRIGHTNESS_MODE_COLOR_WEAKNESS",
            "com.android.server.display.DisplayPowerController.getManualAddingBrightnessInfo(int)",
            "com.android.server.display.DisplayPowerController.mScreenOnEvenThoughProximityPositive",
            "com.android.server.display.DisplayPowerController.PROXIMITY_POSITIVE",
            "com.android.server.display.DisplayPowerController.mReportedScreenStateToPolicy",
            "com.android.server.display.DisplayPowerController.mIsScreenOnWithoutBrightnessAnimation",
            "com.android.server.display.DisplayPowerController.animateScreenStateChange(int, int, boolean)",
            "com.android.server.display.DisplayPowerController.updatePowerState()",
            "com.android.server.display.DisplayPowerController.access$1600(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.access$1300(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.getManualADJInfo(int)",
            "com.android.server.display.DisplayPowerController.BRIGHTNESS_RAMP_RATE_SLOW",
            "com.android.server.display.DisplayPowerController.DISPLAY_SUB",
            "com.android.server.display.DisplayPowerController.mPendingProximityDebounceTime",
            "com.android.server.display.DisplayPowerController.TYPICAL_PROXIMITY_THRESHOLD",
            "com.android.server.display.DisplayPowerController.mPrevOutdoorMode",
            "com.android.server.display.DisplayPowerController.setProximitySensorEnabled(boolean)",
            "com.android.server.display.DisplayPowerController.access$1702(com.android.server.display.DisplayPowerController, java.lang.String)",
            "com.android.server.display.DisplayPowerController.LUX_FOR_DYNAMIC_ANTI_GLARE",
            "com.android.server.display.DisplayPowerController.mDynamicAutoBrightnessConfig",
            "com.android.server.display.DisplayPowerController.mSensorManager",
            "com.android.server.display.DisplayPowerController.mOldLowPowerMode",
            "com.android.server.display.DisplayPowerController.MSG_SCREEN_ON_UNBLOCKED",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessDimConfig",
            "com.android.server.display.DisplayPowerController.mLastMultiScreenState",
            "com.android.server.display.DisplayPowerController.mScreenOffBecauseOfProximity",
            "com.android.server.display.DisplayPowerController.mColorFadeFadesConfig",
            "com.android.server.display.DisplayPowerController.mPendingUpdatePowerStateLocked",
            "com.android.server.display.DisplayPowerController.REPORTED_TO_POLICY_SCREEN_TURNING_ON",
            "com.android.server.display.DisplayPowerController.COLOR_WEAKNESS_MODE_RATIO",
            "com.android.server.display.DisplayPowerController.access$300(com.android.server.display.DisplayPowerController, java.io.PrintWriter)",
            "com.android.server.display.DisplayPowerController.access$900(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.mPendingScreenOff",
            "com.android.server.display.DisplayPowerController.MARKER_TRACKING_RATE_FAST",
            "com.android.server.display.DisplayPowerController.PATH_DEVICE_BRIGHTNESS_STEP",
            "com.android.server.display.DisplayPowerController.mPendingRequestLocked",
            "com.android.server.display.DisplayPowerController.PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY",
            "com.android.server.display.DisplayPowerController.sendUpdatePowerState()",
            "com.android.server.display.DisplayPowerController.sendOnStateChangedWithWakelock()",
            "com.android.server.display.DisplayPowerController.COLOR_FADE_ON_ANIMATION_DURATION_MILLIS",
            "com.android.server.display.DisplayPowerController.access$1400(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.debounceProximitySensor()",
            "com.android.server.display.DisplayPowerController.mWaitProximityToggled",
            "com.android.server.display.DisplayPowerController.setScreenState(int, int)",
            "com.android.server.display.DisplayPowerController.mBatteryStats",
            "com.android.server.display.DisplayPowerController.DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT",
            "com.android.server.display.DisplayPowerController.createAutoBrightnessSpline(int[], int[])",
            "com.android.server.display.DisplayPowerController.mAnimatorListener",
            "com.android.server.display.DisplayPowerController.mAutomaticBrightnessController",
            "com.android.server.display.DisplayPowerController.mUnfinishedBusiness",
            "com.android.server.display.DisplayPowerController.mPowerRequest",
            "com.android.server.display.DisplayPowerController.mUseSoftwareAutoBrightnessConfig",
            "com.android.server.display.DisplayPowerController.mColorFadeOffAnimator",
            "com.android.server.display.DisplayPowerController.mProximitySensorListener",
            "com.android.server.display.DisplayPowerController.PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY_FOR_COVER",
            "com.android.server.display.DisplayPowerController.PROXIMITY_UNKNOWN",
            "com.android.server.display.DisplayPowerController.mDynamicAutoBrightnessEnabled",
            "com.android.server.display.DisplayPowerController.DEBUG",
            "com.android.server.display.DisplayPowerController.access$1900(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.mUseABCForDynamicAntiGlare",
            "com.android.server.display.DisplayPowerController.mOldDisplayPolicy",
            "com.android.server.display.DisplayPowerController.SCREEN_DIM_MINIMUM_REDUCTION",
            "com.android.server.display.DisplayPowerController.mIsSupportedSensorhubAutoBrightness",
            "com.android.server.display.DisplayPowerController.mTimeMeasurement",
            "com.android.server.display.DisplayPowerController.MSG_PROXIMITY_SENSOR_DEBOUNCED",
            "com.android.server.display.DisplayPowerController.mPendingScreenOnEvenThoughProximityPositiveLocked",
            "com.android.server.display.DisplayPowerController.setScreenState(int)",
            "com.android.server.display.DisplayPowerController.mScreenBrightnessDozeConfig",
            "com.android.server.display.DisplayPowerController.access$600(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController.proximityToString(int)",
            "com.android.server.display.DisplayPowerController.DISPLAY_MAIN",
            "com.android.server.display.DisplayPowerController.BRIGHTNESS_MODE_NONE",
            "com.android.server.display.DisplayPowerController.mOldUseTemporaryScreenBrightnessSettingOverride",
            "com.android.server.display.DisplayPowerController.mScreenOnBlockStartRealTime",
            "com.android.server.display.DisplayPowerController.clampAbsoluteBrightness(int)",
            "com.android.server.display.DisplayPowerController.unblockScreenOn()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$1.onAnimationStart(android.animation.Animator)",
            "com.android.server.display.DisplayPowerController$1.this$0",
            "com.android.server.display.DisplayPowerController$1.DisplayPowerController$1(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$1.onAnimationRepeat(android.animation.Animator)",
            "com.android.server.display.DisplayPowerController$1.onAnimationCancel(android.animation.Animator)",
            "com.android.server.display.DisplayPowerController$1.onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$2.this$0",
            "com.android.server.display.DisplayPowerController$2.DisplayPowerController$2(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$2.onAnimationEnd()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$8.onSensorChanged(android.hardware.SensorEvent)",
            "com.android.server.display.DisplayPowerController$8.this$0",
            "com.android.server.display.DisplayPowerController$8.DisplayPowerController$8(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$8.onAccuracyChanged(android.hardware.Sensor, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$6.DisplayPowerController$6(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$6.run()",
            "com.android.server.display.DisplayPowerController$6.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$4.DisplayPowerController$4(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$4.run()",
            "com.android.server.display.DisplayPowerController$4.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$ScreenOnUnblocker.this$0",
            "com.android.server.display.DisplayPowerController$ScreenOnUnblocker.DisplayPowerController$ScreenOnUnblocker(com.android.server.display.DisplayPowerController, com.android.server.display.DisplayPowerController$1)",
            "com.android.server.display.DisplayPowerController$ScreenOnUnblocker.onScreenOn()",
            "com.android.server.display.DisplayPowerController$ScreenOnUnblocker.DisplayPowerController$ScreenOnUnblocker(com.android.server.display.DisplayPowerController)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$ScreenOnUnblocker",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.util.Property.of(java.lang.Class, java.lang.Class, java.lang.String)"
          ],
          "added": [],
          "name": "android.util.Property",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.util.Spline.createSpline(float[], float[])",
            "android.util.Spline.interpolate(float)"
          ],
          "added": [],
          "name": "android.util.Spline",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.releaseSuspendBlocker()",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onDisplayStateChange(int, int)",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onStateChanged()",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.acquireSuspendBlocker()",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onColorFadeExit(boolean)",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onProximityNegative()",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onSetInteractiveNeeded(int, int)",
            "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks.onProximityPositive()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable.run()",
            "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable.this$0",
            "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable.DisplayPowerController$ColorFadeStateRunnable(com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable.setState(boolean)",
            "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable.mExit"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.WindowManagerPolicy$ScreenOnListener.onScreenOn()"
          ],
          "added": [],
          "name": "android.view.WindowManagerPolicy$ScreenOnListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler.handleMessage(android.os.Message)",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler.WifiDisplayAdapter$WifiDisplayHandler(com.android.server.display.WifiDisplayAdapter, android.os.Looper)",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler.this$0",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler.sendEmptyMessage(int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$11.run()",
            "com.android.server.display.WifiDisplayAdapter$11.WifiDisplayAdapter$11(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$11.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$17.onScanFinished()",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayConnecting(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayDisconnected()",
            "com.android.server.display.WifiDisplayAdapter$17.WifiDisplayAdapter$17(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$17.onClientUpdated(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayDisconnecting()",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayChanged(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayConnecting(android.hardware.display.WifiDisplay, int)",
            "com.android.server.display.WifiDisplayAdapter$17.onP2pConnected(java.net.InetAddress)",
            "com.android.server.display.WifiDisplayAdapter$17.onScanResults(android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayAdapter$17.this$0",
            "com.android.server.display.WifiDisplayAdapter$17.onScanStarted()",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplaySessionInfo(android.hardware.display.WifiDisplaySessionInfo)",
            "com.android.server.display.WifiDisplayAdapter$17.onP2pDisconnected()",
            "com.android.server.display.WifiDisplayAdapter$17.onFeatureStateChanged(int)",
            "com.android.server.display.WifiDisplayAdapter$17.onDisplayConnectionFailed()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$17",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$23.this$0",
            "com.android.server.display.WifiDisplayAdapter$23.WifiDisplayAdapter$23(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$23.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$23",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$6.this$0",
            "com.android.server.display.WifiDisplayAdapter$6.WifiDisplayAdapter$6(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter$6.val$address",
            "com.android.server.display.WifiDisplayAdapter$6.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$14.val$event",
            "com.android.server.display.WifiDisplayAdapter$14.run()",
            "com.android.server.display.WifiDisplayAdapter$14.WifiDisplayAdapter$14(com.android.server.display.WifiDisplayAdapter, int, int)",
            "com.android.server.display.WifiDisplayAdapter$14.this$0",
            "com.android.server.display.WifiDisplayAdapter$14.val$param"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.WifiDisplayAdapter$WifiDisplayDevice(com.android.server.display.WifiDisplayAdapter, android.os.IBinder, java.lang.String, int, int, float, int, java.lang.String, android.view.Surface)",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.setSurfaceInTransactionLocked(android.view.Surface)",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mInfo",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mWidth",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.destroyLocked()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mName",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mRefreshRate",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.getNameLocked()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.getDisplayTokenLocked()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mSurface",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.getUniqueId()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mFlags",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mMode",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.this$0",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.performTraversalInTransactionLocked()",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mAddress",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.mHeight",
            "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice.setNameLocked(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$9.run()",
            "com.android.server.display.WifiDisplayAdapter$9.this$0",
            "com.android.server.display.WifiDisplayAdapter$9.WifiDisplayAdapter$9(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$9",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$25.WifiDisplayAdapter$25(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$25.this$0",
            "com.android.server.display.WifiDisplayAdapter$25.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$25",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$3.this$0",
            "com.android.server.display.WifiDisplayAdapter$3.run()",
            "com.android.server.display.WifiDisplayAdapter$3.WifiDisplayAdapter$3(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$1.this$0",
            "com.android.server.display.WifiDisplayAdapter$1.WifiDisplayAdapter$1(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$1.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$2.WifiDisplayAdapter$2(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$2.onDisplayDisconnecting()",
            "com.android.server.display.WifiDisplayAdapter$2.this$0",
            "com.android.server.display.WifiDisplayAdapter$2.onFeatureStateChanged(int)",
            "com.android.server.display.WifiDisplayAdapter$2.onDisplayConnectionFailed()",
            "com.android.server.display.WifiDisplayAdapter$2.onDisplayDisconnected()",
            "com.android.server.display.WifiDisplayAdapter$2.onQosLevelChanged(int)",
            "com.android.server.display.WifiDisplayAdapter$2.onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayAdapter$2.onDisplayConnecting(android.hardware.display.WifiDisplay, int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "com.android.server.display.WifiDisplayAdapter$21.this$0",
            "com.android.server.display.WifiDisplayAdapter$21.WifiDisplayAdapter$21(com.android.server.display.WifiDisplayAdapter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "com.android.server.display.WifiDisplayAdapter$21.val$remoteP2pMacAddr",
            "com.android.server.display.WifiDisplayAdapter$21.run()",
            "com.android.server.display.WifiDisplayAdapter$21.val$isPendingRequest",
            "com.android.server.display.WifiDisplayAdapter$21.val$options",
            "com.android.server.display.WifiDisplayAdapter$21.val$port",
            "com.android.server.display.WifiDisplayAdapter$21.val$ipAddr",
            "com.android.server.display.WifiDisplayAdapter$21.val$deviceName",
            "com.android.server.display.WifiDisplayAdapter$21.val$deviceType"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter$21",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$10.run()",
            "com.android.server.display.WifiDisplayAdapter$10.WifiDisplayAdapter$10(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$10.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$10",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$7.val$connectingMode",
            "com.android.server.display.WifiDisplayAdapter$7.val$address",
            "com.android.server.display.WifiDisplayAdapter$7.run()",
            "com.android.server.display.WifiDisplayAdapter$7.this$0",
            "com.android.server.display.WifiDisplayAdapter$7.WifiDisplayAdapter$7(com.android.server.display.WifiDisplayAdapter, int, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$12.run()",
            "com.android.server.display.WifiDisplayAdapter$12.WifiDisplayAdapter$12(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$12.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$19.run()",
            "com.android.server.display.WifiDisplayAdapter$19.WifiDisplayAdapter$19(com.android.server.display.WifiDisplayAdapter, android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.WifiDisplayAdapter$19.val$device",
            "com.android.server.display.WifiDisplayAdapter$19.val$type",
            "com.android.server.display.WifiDisplayAdapter$19.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$19",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "com.android.server.display.WifiDisplayAdapter$8.val$address",
            "com.android.server.display.WifiDisplayAdapter$8.run()",
            "com.android.server.display.WifiDisplayAdapter$8.this$0",
            "com.android.server.display.WifiDisplayAdapter$8.val$connectingMode",
            "com.android.server.display.WifiDisplayAdapter$8.val$isPendingRequest",
            "com.android.server.display.WifiDisplayAdapter$8.WifiDisplayAdapter$8(com.android.server.display.WifiDisplayAdapter, int, java.lang.String, boolean)"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter$8",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$13.WifiDisplayAdapter$13(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$13.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.display.WifiDisplayAdapter$13.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$5.this$0",
            "com.android.server.display.WifiDisplayAdapter$5.WifiDisplayAdapter$5(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$5.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$4.this$0",
            "com.android.server.display.WifiDisplayAdapter$4.WifiDisplayAdapter$4(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$4.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$22.this$0",
            "com.android.server.display.WifiDisplayAdapter$22.run()",
            "com.android.server.display.WifiDisplayAdapter$22.WifiDisplayAdapter$22(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$22",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$15.run()",
            "com.android.server.display.WifiDisplayAdapter$15.WifiDisplayAdapter$15(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$15.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$15",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$24.run()",
            "com.android.server.display.WifiDisplayAdapter$24.this$0",
            "com.android.server.display.WifiDisplayAdapter$24.WifiDisplayAdapter$24(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$24",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter.mSettingsPendingIntent",
            "com.android.server.display.WifiDisplayAdapter.access$1802(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayAdapter.mDisplays",
            "com.android.server.display.WifiDisplayAdapter.mIpRemoteDisplayListener",
            "com.android.server.display.WifiDisplayAdapter.mCurrentStatus",
            "com.android.server.display.WifiDisplayAdapter.requestDisableWiFiP2P()",
            "com.android.server.display.WifiDisplayAdapter.access$200(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1100(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2700(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.renameDisplayDeviceLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.mConnectState",
            "com.android.server.display.WifiDisplayAdapter.mPendingNotificationUpdate",
            "com.android.server.display.WifiDisplayAdapter.requestEnableLocked(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "com.android.server.display.WifiDisplayAdapter.requestResumeLocked()",
            "com.android.server.display.WifiDisplayAdapter.getScreenSharingStatus()",
            "com.android.server.display.WifiDisplayAdapter.mDisplayController",
            "com.android.server.display.WifiDisplayAdapter.access$000(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.IsRunningIpRemoteDisplay()",
            "com.android.server.display.WifiDisplayAdapter.notifyEnterHomeSyncApp()",
            "com.android.server.display.WifiDisplayAdapter.isSinkAvailable()",
            "com.android.server.display.WifiDisplayAdapter.access$002(com.android.server.display.WifiDisplayAdapter, com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayAdapter.mLastRememberedDisplay",
            "com.android.server.display.WifiDisplayAdapter.access$3000(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1300(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.scheduleDLNADisconnectReqBroadcastLocked()",
            "com.android.server.display.WifiDisplayAdapter.access$400(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.isWfdEngineRunning()",
            "com.android.server.display.WifiDisplayAdapter.access$2102(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter.addDisplayDeviceLocked(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayAdapter.mActiveDisplayState",
            "com.android.server.display.WifiDisplayAdapter.requestConnectLocked(int, java.lang.String, boolean)",
            "com.android.server.display.WifiDisplayAdapter.setSourceState(int)",
            "com.android.server.display.WifiDisplayAdapter.isDLNADeviceConnected()",
            "com.android.server.display.WifiDisplayAdapter.mLastConnectedDLNADevice",
            "com.android.server.display.WifiDisplayAdapter.mWifiDisplayListener",
            "com.android.server.display.WifiDisplayAdapter.MSG_DLNA_DISCONNECT_REQ_BROADCAST",
            "com.android.server.display.WifiDisplayAdapter.mDisplayDevice",
            "com.android.server.display.WifiDisplayAdapter.requestDisconnectForMirroringSwitching()",
            "com.android.server.display.WifiDisplayAdapter.requestDisconnectLocked()",
            "com.android.server.display.WifiDisplayAdapter.access$1500(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.requestRenameLocked(java.lang.String, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.handleSendDLNADisconnectReqBroadcast()",
            "com.android.server.display.WifiDisplayAdapter.setSinkState(int)",
            "com.android.server.display.WifiDisplayAdapter.setParameter(int, int, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.isWifiDisplayBridgeAvailable()",
            "com.android.server.display.WifiDisplayAdapter.mConnectedDLNADevice",
            "com.android.server.display.WifiDisplayAdapter.handleSendStartFABBroadcast()",
            "com.android.server.display.WifiDisplayAdapter.sendDisplayEventToExtendedListener(int, int)",
            "com.android.server.display.WifiDisplayAdapter.mSupportsProtectedBuffers",
            "com.android.server.display.WifiDisplayAdapter.registerLocked()",
            "com.android.server.display.WifiDisplayAdapter.requestStopScanLocked()",
            "com.android.server.display.WifiDisplayAdapter.updateRememberedDLNADevice()",
            "com.android.server.display.WifiDisplayAdapter.findAvailableDisplayLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.access$2000(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.renameDongleLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.mPersistentDataStore",
            "com.android.server.display.WifiDisplayAdapter.access$2100(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2602(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$900(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.notifyExitHomeSyncApp()",
            "com.android.server.display.WifiDisplayAdapter.requestEnableLocked(java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.DISPLAY_NAME_PREFIX",
            "com.android.server.display.WifiDisplayAdapter.access$2400(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.access$2900(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$902(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.WifiDisplayAdapter.access$600(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.mPendingStatusChangeBroadcast",
            "com.android.server.display.WifiDisplayAdapter.mPendingStopFloatingIconBroadcast",
            "com.android.server.display.WifiDisplayAdapter.access$1400(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$702(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.isSourceAvailable()",
            "com.android.server.display.WifiDisplayAdapter.mHandler",
            "com.android.server.display.WifiDisplayAdapter.isWfdConnected()",
            "com.android.server.display.WifiDisplayAdapter.mQoSLevel",
            "com.android.server.display.WifiDisplayAdapter.access$1302(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$2802(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.handleUpdateNotification()",
            "com.android.server.display.WifiDisplayAdapter.access$1800(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.mActiveDisplay",
            "com.android.server.display.WifiDisplayAdapter.mScreenSharingStatus",
            "com.android.server.display.WifiDisplayAdapter.access$2500(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$500(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.scheduleStopFloatingIconBroadcastLocked()",
            "com.android.server.display.WifiDisplayAdapter.access$2200(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayAdapter.access$100(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.requestConnectLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.handleSendStopFABBroadcast()",
            "com.android.server.display.WifiDisplayAdapter.mAvailableDisplays",
            "com.android.server.display.WifiDisplayAdapter.getDLNADeviceAddress()",
            "com.android.server.display.WifiDisplayAdapter.requestPauseLocked()",
            "com.android.server.display.WifiDisplayAdapter.mScanState",
            "com.android.server.display.WifiDisplayAdapter.access$202(com.android.server.display.WifiDisplayAdapter, com.android.server.display.IpRemoteDisplayController)",
            "com.android.server.display.WifiDisplayAdapter.restartWifiDisplayLocked()",
            "com.android.server.display.WifiDisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.WifiDisplayAdapter.mScanRequestedInConnected",
            "com.android.server.display.WifiDisplayAdapter.getContext()",
            "com.android.server.display.WifiDisplayAdapter.mRememberedDisplays",
            "com.android.server.display.WifiDisplayAdapter.updateRememberedDisplaysLocked()",
            "com.android.server.display.WifiDisplayAdapter.getLastConnectedDisplay(boolean)",
            "com.android.server.display.WifiDisplayAdapter.mSessionInfo",
            "com.android.server.display.WifiDisplayAdapter.access$1200(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.MSG_SEND_STATUS_CHANGE_BROADCAST",
            "com.android.server.display.WifiDisplayAdapter.mFeatureState",
            "com.android.server.display.WifiDisplayAdapter.ACTION_DISCONNECT",
            "com.android.server.display.WifiDisplayAdapter.WifiDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, com.android.server.display.PersistentDataStore)",
            "com.android.server.display.WifiDisplayAdapter.WFD_NOTIFICATION",
            "com.android.server.display.WifiDisplayAdapter.requestClearConnectedDisplayInfo()",
            "com.android.server.display.WifiDisplayAdapter.turnOffPeriodicWifiScan(boolean)",
            "com.android.server.display.WifiDisplayAdapter.MSG_START_FAB_BROADCAST",
            "com.android.server.display.WifiDisplayAdapter.mDisconnectPendingIntent",
            "com.android.server.display.WifiDisplayAdapter.fixRememberedDisplayNamesFromAvailableDisplaysLocked()",
            "com.android.server.display.WifiDisplayAdapter.isConnWithPinSupported(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.access$1900(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.scheduleUpdateNotificationLocked()",
            "com.android.server.display.WifiDisplayAdapter.requestEnableLocked(android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.WifiDisplayAdapter.getHandler()",
            "com.android.server.display.WifiDisplayAdapter.mSinkState",
            "com.android.server.display.WifiDisplayAdapter.getDLNADeviceName()",
            "com.android.server.display.WifiDisplayAdapter.isDongleRenameAvailableLocked()",
            "com.android.server.display.WifiDisplayAdapter.getLastConnectedDLNADevice()",
            "com.android.server.display.WifiDisplayAdapter.TAG",
            "com.android.server.display.WifiDisplayAdapter.access$1000(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1502(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.requestSaveConnectedDisplayInfo()",
            "com.android.server.display.WifiDisplayAdapter.handleSendStatusChangeBroadcast()",
            "com.android.server.display.WifiDisplayAdapter.requestForgetLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.DEBUG",
            "com.android.server.display.WifiDisplayAdapter.access$1700(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.requestStartScanLocked()",
            "com.android.server.display.WifiDisplayAdapter.scheduleStartFloatingIconBroadcastLocked()",
            "com.android.server.display.WifiDisplayAdapter.access$700(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.setLastConnectedDLNADevice(android.hardware.display.DLNADevice)",
            "com.android.server.display.WifiDisplayAdapter.setScreenSharingStatus(int)",
            "com.android.server.display.WifiDisplayAdapter.MSG_STOP_FAB_BROADCAST",
            "com.android.server.display.WifiDisplayAdapter.access$2302(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplaySessionInfo)",
            "com.android.server.display.WifiDisplayAdapter.getDLNAType()",
            "com.android.server.display.WifiDisplayAdapter.isKDDIServiceConnected()",
            "com.android.server.display.WifiDisplayAdapter.MSG_UPDATE_NOTIFICATION",
            "com.android.server.display.WifiDisplayAdapter.rememberedDisplayLocked(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter.requestDisableLocked()",
            "com.android.server.display.WifiDisplayAdapter.requestConnectWithPinLocked(java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.insertLog(java.lang.String, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.mSourceState",
            "com.android.server.display.WifiDisplayAdapter.access$800(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.scheduleStatusChangedBroadcastLocked()",
            "com.android.server.display.WifiDisplayAdapter.requestConnectLocked(int, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.mPendingStartFloatingIconBroadcast",
            "com.android.server.display.WifiDisplayAdapter.access$1602(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayAdapter.removeLastConnectedDLNADevice()",
            "com.android.server.display.WifiDisplayAdapter.getSyncRoot()",
            "com.android.server.display.WifiDisplayAdapter.updateDisplaysLocked()",
            "com.android.server.display.WifiDisplayAdapter.mNotificationManager",
            "com.android.server.display.WifiDisplayAdapter.setScanningChannelLocked(int)",
            "com.android.server.display.WifiDisplayAdapter.access$300(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.mBroadcastReceiver",
            "com.android.server.display.WifiDisplayAdapter.removeDisplayDeviceLocked()",
            "com.android.server.display.WifiDisplayAdapter.getWifiDisplayBridgeStatus()",
            "com.android.server.display.WifiDisplayAdapter.mPendingDLNADisconnectReqBroadcast",
            "com.android.server.display.WifiDisplayAdapter.mIpRemoteDisplayController",
            "com.android.server.display.WifiDisplayAdapter.getDLNADeviceUid()",
            "com.android.server.display.WifiDisplayAdapter.getWifiDisplayStatusLocked()"
          ],
          "added": [
            "com.android.server.display.WifiDisplayAdapter.access$2700(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter.access$1400(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.access$3002(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplaySessionInfo)",
            "com.android.server.display.WifiDisplayAdapter.access$3900(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$3502(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$4000(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2600(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayAdapter.access$2302(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayAdapter.access$3600(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$600(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1600(com.android.server.display.WifiDisplayAdapter, int, int)",
            "com.android.server.display.WifiDisplayAdapter.access$3700(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2002(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayAdapter.access$2102(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayAdapter.access$3200(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$902(com.android.server.display.WifiDisplayAdapter, boolean)",
            "com.android.server.display.WifiDisplayAdapter.access$1702(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$3800(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1502(com.android.server.display.WifiDisplayAdapter, android.hardware.display.DLNADevice)",
            "com.android.server.display.WifiDisplayAdapter.access$2400(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$3300(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2200(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$2300(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter.access$1902(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$802(com.android.server.display.WifiDisplayAdapter, int)",
            "com.android.server.display.WifiDisplayAdapter.access$3100(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter.access$3400(com.android.server.display.WifiDisplayAdapter)"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$20.WifiDisplayAdapter$20(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter$20.this$0",
            "com.android.server.display.WifiDisplayAdapter$20.val$port",
            "com.android.server.display.WifiDisplayAdapter$20.run()",
            "com.android.server.display.WifiDisplayAdapter$20.val$options",
            "com.android.server.display.WifiDisplayAdapter$20.val$ipAddr",
            "com.android.server.display.WifiDisplayAdapter$20.val$deviceType"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$18.val$address",
            "com.android.server.display.WifiDisplayAdapter$18.WifiDisplayAdapter$18(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "com.android.server.display.WifiDisplayAdapter$18.run()",
            "com.android.server.display.WifiDisplayAdapter$18.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$18",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayAdapter$16.run()",
            "com.android.server.display.WifiDisplayAdapter$16.WifiDisplayAdapter$16(com.android.server.display.WifiDisplayAdapter)",
            "com.android.server.display.WifiDisplayAdapter$16.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$16",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.PersistentDataStore.loadRememberedDLNADeviceFromXml(org.xmlpull.v1.XmlPullParser)",
            "com.android.server.display.PersistentDataStore.mRememberedWifiDisplays",
            "com.android.server.display.PersistentDataStore.forgetRememberedDLNADevice()",
            "com.android.server.display.PersistentDataStore.applyWifiDisplayAliases(android.hardware.display.WifiDisplay[])",
            "com.android.server.display.PersistentDataStore.saveIfNeeded()",
            "com.android.server.display.PersistentDataStore.loadFromXml(org.xmlpull.v1.XmlPullParser)",
            "com.android.server.display.PersistentDataStore.TAG",
            "com.android.server.display.PersistentDataStore.applyWifiDisplayAlias(android.hardware.display.WifiDisplay)",
            "com.android.server.display.PersistentDataStore.getRememberedWifiDisplay(java.lang.String)",
            "com.android.server.display.PersistentDataStore.rememberDLNADevice(android.hardware.display.DLNADevice)",
            "com.android.server.display.PersistentDataStore.loadIfNeeded()",
            "com.android.server.display.PersistentDataStore.PersistentDataStore()",
            "com.android.server.display.PersistentDataStore.mLoaded",
            "com.android.server.display.PersistentDataStore.mAtomicFile",
            "com.android.server.display.PersistentDataStore.forgetWifiDisplay(java.lang.String)",
            "com.android.server.display.PersistentDataStore.clearState()",
            "com.android.server.display.PersistentDataStore.getRememberedWifiDisplays()",
            "com.android.server.display.PersistentDataStore.loadRememberedWifiDisplaysFromXml(org.xmlpull.v1.XmlPullParser)",
            "com.android.server.display.PersistentDataStore.findRememberedWifiDisplay(java.lang.String)",
            "com.android.server.display.PersistentDataStore.mRememberedDLNADevice",
            "com.android.server.display.PersistentDataStore.rememberWifiDisplay(android.hardware.display.WifiDisplay)",
            "com.android.server.display.PersistentDataStore.saveToXml(org.xmlpull.v1.XmlSerializer)",
            "com.android.server.display.PersistentDataStore.setDirty()",
            "com.android.server.display.PersistentDataStore.getRememberedDLNADevice()",
            "com.android.server.display.PersistentDataStore.mDirty",
            "com.android.server.display.PersistentDataStore.load()",
            "com.android.server.display.PersistentDataStore.save()"
          ],
          "added": [],
          "name": "com.android.server.display.PersistentDataStore",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "android.hardware.display.DLNADevice.DLNADevice(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean)",
            "android.hardware.display.DLNADevice.getUid()",
            "android.hardware.display.DLNADevice.equals(android.hardware.display.DLNADevice)",
            "android.hardware.display.DLNADevice.getDLNAType()",
            "android.hardware.display.DLNADevice.getIpAddress()",
            "android.hardware.display.DLNADevice.getMacAddressFromARP()",
            "android.hardware.display.DLNADevice.isSwitchingDevice()",
            "android.hardware.display.DLNADevice.getDeviceName()",
            "android.hardware.display.DLNADevice.getP2pMacAddress()",
            "android.hardware.display.DLNADevice.getNetType()"
          ],
          "name": "android.hardware.display.DLNADevice",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$LocalService$1$1.DisplayManagerService$LocalService$1$1(com.android.server.display.DisplayManagerService$LocalService$1)",
            "com.android.server.display.DisplayManagerService$LocalService$1$1.run()",
            "com.android.server.display.DisplayManagerService$LocalService$1$1.this$2"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.handleMessage(android.os.Message)",
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.this$0",
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.obtainMessage(int, int, int)",
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.DisplayManagerService$DisplayManagerHandler(com.android.server.display.DisplayManagerService, android.os.Looper)",
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.sendEmptyMessage(int)",
            "com.android.server.display.DisplayManagerService$DisplayManagerHandler.sendMessage(android.os.Message)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$DisplayManagerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService.FORCE_WIFI_DISPLAY_ENABLE",
            "com.android.server.display.DisplayManagerService.getDisplayInfoInternal(int, int, int, android.os.IBinder, boolean)",
            "com.android.server.display.DisplayManagerService.registerDefaultDisplayAdapter()",
            "com.android.server.display.DisplayManagerService.MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER",
            "com.android.server.display.DisplayManagerService.access$5300(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService.access$2500(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.mPersistentDataStore",
            "com.android.server.display.DisplayManagerService.access$3400(com.android.server.display.DisplayManagerService, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "com.android.server.display.DisplayManagerService.MSG_DELIVER_DISPLAY_EVENT",
            "com.android.server.display.DisplayManagerService.handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mTempCallbacks",
            "com.android.server.display.DisplayManagerService.resumeWifiDisplayInternal()",
            "com.android.server.display.DisplayManagerService.handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mInputMethodTargetDisplayId",
            "com.android.server.display.DisplayManagerService.requestColorTransformInternal(int, int)",
            "com.android.server.display.DisplayManagerService.forgetWifiDisplayInternal(java.lang.String)",
            "com.android.server.display.DisplayManagerService.access$300(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.removeScaledPids()",
            "com.android.server.display.DisplayManagerService.access$3300(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.mDisplayPowerController",
            "com.android.server.display.DisplayManagerService.mDisplayTransactionListeners",
            "com.android.server.display.DisplayManagerService.access$5102(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayPowerController)",
            "com.android.server.display.DisplayManagerService.access$3700(com.android.server.display.DisplayManagerService, android.os.IBinder, int)",
            "com.android.server.display.DisplayManagerService.requestDisplayStateInternal(int, int, int)",
            "com.android.server.display.DisplayManagerService.access$3500(com.android.server.display.DisplayManagerService, android.os.IBinder, int, int, int)",
            "com.android.server.display.DisplayManagerService.access$5000(com.android.server.display.DisplayManagerService, int, int)",
            "com.android.server.display.DisplayManagerService.deliverDisplayEvent(int, int)",
            "com.android.server.display.DisplayManagerService.registerWifiDisplayAdapterLocked()",
            "com.android.server.display.DisplayManagerService.handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mExternalTouchViewport",
            "com.android.server.display.DisplayManagerService.mOnlyCore",
            "com.android.server.display.DisplayManagerService.onStart()",
            "com.android.server.display.DisplayManagerService.mContext",
            "com.android.server.display.DisplayManagerService.access$900(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.mPendingrequestDisplayState",
            "com.android.server.display.DisplayManagerService.updateDisplayStateLocked(com.android.server.display.DisplayDevice, int, int)",
            "com.android.server.display.DisplayManagerService.shouldRegisterNonEssentialDisplayAdaptersLocked()",
            "com.android.server.display.DisplayManagerService.mSubDisplayState",
            "com.android.server.display.DisplayManagerService.access$5400(com.android.server.display.DisplayManagerService, int, android.view.DisplayInfo)",
            "com.android.server.display.DisplayManagerService.mIsForceUnblankDisplay",
            "com.android.server.display.DisplayManagerService.wifiDevice",
            "com.android.server.display.DisplayManagerService.unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService.mMainDisplayBrightness",
            "com.android.server.display.DisplayManagerService.windowManagerAndInputReady()",
            "com.android.server.display.DisplayManagerService.isWfdConnected()",
            "com.android.server.display.DisplayManagerService.startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "com.android.server.display.DisplayManagerService.mLockPMS",
            "com.android.server.display.DisplayManagerService.bDSSEnabled",
            "com.android.server.display.DisplayManagerService.setDisplayPropertiesInternal(int, boolean, float, int, boolean)",
            "com.android.server.display.DisplayManagerService.MSG_DELIVER_DISPLAY_EVENT_SEC",
            "com.android.server.display.DisplayManagerService.TAG",
            "com.android.server.display.DisplayManagerService.mMainDisplayState",
            "com.android.server.display.DisplayManagerService.mProjectionService",
            "com.android.server.display.DisplayManagerService.mWindowManagerInternal",
            "com.android.server.display.DisplayManagerService.access$5500(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT",
            "com.android.server.display.DisplayManagerService.mNextNonDefaultDisplayId",
            "com.android.server.display.DisplayManagerService.access$1100(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.saveWifiDisplayInfo(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.access$5800(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.sendDisplayEventLocked(int, int)",
            "com.android.server.display.DisplayManagerService.access$5600(com.android.server.display.DisplayManagerService, int, boolean, float, int, boolean)",
            "com.android.server.display.DisplayManagerService.MSG_UPDATE_VIEWPORT",
            "com.android.server.display.DisplayManagerService.access$2600(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$2300(com.android.server.display.DisplayManagerService, int)",
            "com.android.server.display.DisplayManagerService.dumpInternal(java.io.PrintWriter)",
            "com.android.server.display.DisplayManagerService.stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "com.android.server.display.DisplayManagerService.mWifiDisplayAdapter",
            "com.android.server.display.DisplayManagerService.mCallbacks",
            "com.android.server.display.DisplayManagerService.getWifiDisplayStatusInternal()",
            "com.android.server.display.DisplayManagerService.startWifiDisplayScanInternal(int)",
            "com.android.server.display.DisplayManagerService.access$700(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$3800(com.android.server.display.DisplayManagerService, android.os.IBinder, int)",
            "com.android.server.display.DisplayManagerService.mDefaultViewports",
            "com.android.server.display.DisplayManagerService.updateDisplayStateLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "com.android.server.display.DisplayManagerService.performTraversalInTransactionFromWindowManagerInternal()",
            "com.android.server.display.DisplayManagerService.publishLocalService(java.lang.Class, java.lang.Object)",
            "com.android.server.display.DisplayManagerService.mTempDisplayStateWorkQueue",
            "com.android.server.display.DisplayManagerService.MSG_REQUEST_TRAVERSAL",
            "com.android.server.display.DisplayManagerService.handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.setVirtualDisplaySurfaceInternal(android.os.IBinder, android.view.Surface)",
            "com.android.server.display.DisplayManagerService.access$400(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.setDisplayOffsetsInternal(int, int, int)",
            "com.android.server.display.DisplayManagerService.access$2200(com.android.server.display.DisplayManagerService, int)",
            "com.android.server.display.DisplayManagerService.mScaledPids",
            "com.android.server.display.DisplayManagerService.access$2000(com.android.server.display.DisplayManagerService, android.hardware.display.IDisplayManagerCallback, int)",
            "com.android.server.display.DisplayManagerService.access$4100(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$1400(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.applyGlobalDisplayStateLocked(java.util.List)",
            "com.android.server.display.DisplayManagerService.mSyncRoot",
            "com.android.server.display.DisplayManagerService.getProjectionService()",
            "com.android.server.display.DisplayManagerService.mSingleDisplayDemoMode",
            "com.android.server.display.DisplayManagerService.access$4000(com.android.server.display.DisplayManagerService, java.io.PrintWriter)",
            "com.android.server.display.DisplayManagerService.setDisplayInfoOverrideFromWindowManagerInternal(int, android.view.DisplayInfo)",
            "com.android.server.display.DisplayManagerService.access$5700(com.android.server.display.DisplayManagerService, int, int, int)",
            "com.android.server.display.DisplayManagerService.publishBinderService(java.lang.String, android.os.IBinder, boolean)",
            "com.android.server.display.DisplayManagerService.access$1800(com.android.server.display.DisplayManagerService, int, int, int, android.os.IBinder, boolean)",
            "com.android.server.display.DisplayManagerService.mHandlerThreadPmsDisplay",
            "com.android.server.display.DisplayManagerService.updateLogicalDisplaysLocked()",
            "com.android.server.display.DisplayManagerService.registerOverlayDisplayAdapterLocked()",
            "com.android.server.display.DisplayManagerService.mTempDefaultViewports",
            "com.android.server.display.DisplayManagerService.mGlobalDisplayState",
            "com.android.server.display.DisplayManagerService.mDisplayAdapterListener",
            "com.android.server.display.DisplayManagerService.mGlobalDisplayBrightness",
            "com.android.server.display.DisplayManagerService.access$5802(com.android.server.display.DisplayManagerService, boolean)",
            "com.android.server.display.DisplayManagerService.access$2900(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.mCocktailSize",
            "com.android.server.display.DisplayManagerService.configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.scheduleTraversalLocked(boolean)",
            "com.android.server.display.DisplayManagerService.access$1900(com.android.server.display.DisplayManagerService, int)",
            "com.android.server.display.DisplayManagerService.getDisplayIdsInternal(int)",
            "com.android.server.display.DisplayManagerService.DEBUG",
            "com.android.server.display.DisplayManagerService.registerAdditionalDisplayAdapters()",
            "com.android.server.display.DisplayManagerService.changedMirroringDisplay(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mHandler",
            "com.android.server.display.DisplayManagerService.mInputManagerInternal",
            "com.android.server.display.DisplayManagerService.registerVirtualDisplayAdapterLocked()",
            "com.android.server.display.DisplayManagerService.mSubDisplayBrightness",
            "com.android.server.display.DisplayManagerService.MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS",
            "com.android.server.display.DisplayManagerService.static {}",
            "com.android.server.display.DisplayManagerService.DEBUG_DUALSCREEN",
            "com.android.server.display.DisplayManagerService.access$3600(com.android.server.display.DisplayManagerService, android.os.IBinder, android.view.Surface)",
            "com.android.server.display.DisplayManagerService.mLockDisplayBlanker",
            "com.android.server.display.DisplayManagerService.onBootPhase(int)",
            "com.android.server.display.DisplayManagerService.releaseVirtualDisplayInternal(android.os.IBinder)",
            "com.android.server.display.DisplayManagerService.connectWifiDisplayInternal(java.lang.String)",
            "com.android.server.display.DisplayManagerService.access$4600(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.updateDisplayDeviceInfo(com.android.server.display.DisplayDevice, com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mUiHandler",
            "com.android.server.display.DisplayManagerService.access$3000(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$2100(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$600(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.setVirtualDisplayFixedOrientationInternal(android.os.IBinder, int)",
            "com.android.server.display.DisplayManagerService.disconnectWifiDisplayInternal()",
            "com.android.server.display.DisplayManagerService.access$1500(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.renameWifiDisplayInternal(java.lang.String, java.lang.String)",
            "com.android.server.display.DisplayManagerService.mSafeMode",
            "com.android.server.display.DisplayManagerService.access$1300(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mDisplayAdapters",
            "com.android.server.display.DisplayManagerService.access$1200(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.registerCallbackInternal(android.hardware.display.IDisplayManagerCallback, int)",
            "com.android.server.display.DisplayManagerService.DisplayManagerService(android.content.Context)",
            "com.android.server.display.DisplayManagerService.access$2700(com.android.server.display.DisplayManagerService, java.lang.String, java.lang.String)",
            "com.android.server.display.DisplayManagerService.mVirtualDisplayAdapter",
            "com.android.server.display.DisplayManagerService.DEBUG_BENDED",
            "com.android.server.display.DisplayManagerService.handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.access$800(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.mInputMethodTargetRotation",
            "com.android.server.display.DisplayManagerService.registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService.access$4602(com.android.server.display.DisplayManagerService, boolean)",
            "com.android.server.display.DisplayManagerService.addScaledPid(int, java.lang.String)",
            "com.android.server.display.DisplayManagerService.assignDisplayIdLocked(boolean)",
            "com.android.server.display.DisplayManagerService.mWifiDisplayScanRequestCount",
            "com.android.server.display.DisplayManagerService.performTraversalInTransactionLocked()",
            "com.android.server.display.DisplayManagerService.access$3900(com.android.server.display.DisplayManagerService, android.os.IBinder)",
            "com.android.server.display.DisplayManagerService.setViewportLocked(android.hardware.display.DisplayViewport, com.android.server.display.LogicalDisplay, com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.mHandlerPmsDisplay",
            "com.android.server.display.DisplayManagerService.findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.getDisplayIdOfDeviceInternal(int)",
            "com.android.server.display.DisplayManagerService.mIsDualDisplay",
            "com.android.server.display.DisplayManagerService.mIsInputMethodDisplayEnabled",
            "com.android.server.display.DisplayManagerService.assignLayerStackLocked(int)",
            "com.android.server.display.DisplayManagerService.mCocktailShiftSize",
            "com.android.server.display.DisplayManagerService.access$5100(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.setVirtualDisplayMirroringDisplayInternal(android.os.IBinder, int)",
            "com.android.server.display.DisplayManagerService.systemReady(boolean, boolean)",
            "com.android.server.display.DisplayManagerService.mTempExternalTouchViewport",
            "com.android.server.display.DisplayManagerService.resizeVirtualDisplayInternal(android.os.IBinder, int, int, int)",
            "com.android.server.display.DisplayManagerService.access$3200(com.android.server.display.DisplayManagerService, int, int)",
            "com.android.server.display.DisplayManagerService.mTempDisplayInfo",
            "com.android.server.display.DisplayManagerService.access$3100(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.DUBUG_MAGNIFIER",
            "com.android.server.display.DisplayManagerService.access$2800(com.android.server.display.DisplayManagerService, java.lang.String)",
            "com.android.server.display.DisplayManagerService.access$500(com.android.server.display.DisplayManagerService, int, int)",
            "com.android.server.display.DisplayManagerService.mDisplayDevices",
            "com.android.server.display.DisplayManagerService.createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "com.android.server.display.DisplayManagerService.pauseWifiDisplayInternal()",
            "com.android.server.display.DisplayManagerService.registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)",
            "com.android.server.display.DisplayManagerService.access$5200(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService.clearViewportsLocked()",
            "com.android.server.display.DisplayManagerService.registerMagnifierDisplayAdapterLocked()",
            "com.android.server.display.DisplayManagerService.access$4800(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.removeScaledPid(int)",
            "com.android.server.display.DisplayManagerService.setInputMethodDisplayEnabled(boolean, int)",
            "com.android.server.display.DisplayManagerService.access$1600(com.android.server.display.DisplayManagerService, boolean)",
            "com.android.server.display.DisplayManagerService.requestGlobalDisplayStateInternal(int, int)",
            "com.android.server.display.DisplayManagerService.mMagnifierDisplayAdapter",
            "com.android.server.display.DisplayManagerService.access$1000(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService.access$2400(com.android.server.display.DisplayManagerService, java.lang.String)",
            "com.android.server.display.DisplayManagerService.mLogicalDisplays",
            "com.android.server.display.DisplayManagerService.mPendingTraversal",
            "com.android.server.display.DisplayManagerService.access$1700(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$CallbackRecord)",
            "com.android.server.display.DisplayManagerService.addLogicalDisplayLocked(com.android.server.display.DisplayDevice)",
            "com.android.server.display.DisplayManagerService.stopWifiDisplayScanInternal(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$LocalService$2.DisplayManagerService$LocalService$2(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService$2.this$1",
            "com.android.server.display.DisplayManagerService$LocalService$2.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.projection.IMediaProjectionManager.isValidMediaProjection(android.media.projection.IMediaProjection)"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjectionManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$DisplayAdapterListener.onTraversalRequested()",
            "com.android.server.display.DisplayManagerService$DisplayAdapterListener.this$0",
            "com.android.server.display.DisplayManagerService$DisplayAdapterListener.DisplayManagerService$DisplayAdapterListener(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)",
            "com.android.server.display.DisplayManagerService$DisplayAdapterListener.DisplayManagerService$DisplayAdapterListener(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService$DisplayAdapterListener.onDisplayDeviceEvent(com.android.server.display.DisplayDevice, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$DisplayAdapterListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LogicalDisplay.getRequestedColorTransformIdLocked()",
            "com.android.server.display.LogicalDisplay.setHasContentLocked(boolean)",
            "com.android.server.display.LogicalDisplay.mTempLayerStackRect",
            "com.android.server.display.LogicalDisplay.mPrimaryDisplayDeviceInfo",
            "com.android.server.display.LogicalDisplay.hasContentLocked()",
            "com.android.server.display.LogicalDisplay.isValidLocked()",
            "com.android.server.display.LogicalDisplay.mOverrideDisplayInfo",
            "com.android.server.display.LogicalDisplay.mBaseDisplayInfo",
            "com.android.server.display.LogicalDisplay.mDisplayOffsetX",
            "com.android.server.display.LogicalDisplay.mDisplayOffsetY",
            "com.android.server.display.LogicalDisplay.getPrimaryDisplayDeviceLocked()",
            "com.android.server.display.LogicalDisplay.getRequestedModeIdLocked()",
            "com.android.server.display.LogicalDisplay.setRequestedColorTransformIdLocked(int)",
            "com.android.server.display.LogicalDisplay.mRequestedColorTransformId",
            "com.android.server.display.LogicalDisplay.LogicalDisplay(int, int, com.android.server.display.DisplayDevice)",
            "com.android.server.display.LogicalDisplay.getDisplayInfoLocked()",
            "com.android.server.display.LogicalDisplay.setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)",
            "com.android.server.display.LogicalDisplay.mLayerStack",
            "com.android.server.display.LogicalDisplay.mRequestedModeId",
            "com.android.server.display.LogicalDisplay.mInfo",
            "com.android.server.display.LogicalDisplay.setDisplayOffsetsLocked(int, int)",
            "com.android.server.display.LogicalDisplay.getDisplayIdLocked()",
            "com.android.server.display.LogicalDisplay.getDisplayOffsetYLocked()",
            "com.android.server.display.LogicalDisplay.mTempDisplayRect",
            "com.android.server.display.LogicalDisplay.mDisplayId",
            "com.android.server.display.LogicalDisplay.getDisplayOffsetXLocked()",
            "com.android.server.display.LogicalDisplay.mPrimaryDisplayDevice",
            "com.android.server.display.LogicalDisplay.BLANK_LAYER_STACK",
            "com.android.server.display.LogicalDisplay.setRequestedModeIdLocked(int)",
            "com.android.server.display.LogicalDisplay.updateLocked(java.util.List)",
            "com.android.server.display.LogicalDisplay.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.LogicalDisplay.configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice, boolean)",
            "com.android.server.display.LogicalDisplay.mHasContent"
          ],
          "added": [],
          "name": "com.android.server.display.LogicalDisplay",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$LocalService$1.mRequestDisplayStateDoneListener",
            "com.android.server.display.DisplayManagerService$LocalService$1.registerRequestDisplayStateDoneListener(java.lang.Runnable)",
            "com.android.server.display.DisplayManagerService$LocalService$1.this$1",
            "com.android.server.display.DisplayManagerService$LocalService$1.val$callbacks",
            "com.android.server.display.DisplayManagerService$LocalService$1.requestDisplayState(int, int, int)",
            "com.android.server.display.DisplayManagerService$LocalService$1.access$4900(com.android.server.display.DisplayManagerService$LocalService$1, int, int, int)",
            "com.android.server.display.DisplayManagerService$LocalService$1.requestDesiredDisplayState(int, int, int)",
            "com.android.server.display.DisplayManagerService$LocalService$1.requestDisplayState(int, int)",
            "com.android.server.display.DisplayManagerService$LocalService$1.DisplayManagerService$LocalService$1(com.android.server.display.DisplayManagerService$LocalService, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks)",
            "com.android.server.display.DisplayManagerService$LocalService$1.mRequestDisplayStateRunnable"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$CallbackRecord.notifyDisplayEventAsync(int, int)",
            "com.android.server.display.DisplayManagerService$CallbackRecord.DisplayManagerService$CallbackRecord(com.android.server.display.DisplayManagerService, int, android.hardware.display.IDisplayManagerCallback)",
            "com.android.server.display.DisplayManagerService$CallbackRecord.binderDied()",
            "com.android.server.display.DisplayManagerService$CallbackRecord.mWifiDisplayScanRequested",
            "com.android.server.display.DisplayManagerService$CallbackRecord.mCallback",
            "com.android.server.display.DisplayManagerService$CallbackRecord.mPid",
            "com.android.server.display.DisplayManagerService$CallbackRecord.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$CallbackRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$BinderService.getDLNADeviceUid()",
            "com.android.server.display.DisplayManagerService$BinderService.isKDDIServiceConnected()",
            "com.android.server.display.DisplayManagerService$BinderService.getDisplayIds()",
            "com.android.server.display.DisplayManagerService$BinderService.setVirtualDisplayFixedOrientation(android.hardware.display.IVirtualDisplayCallback, int)",
            "com.android.server.display.DisplayManagerService$BinderService.setScanningChannel(int)",
            "com.android.server.display.DisplayManagerService$BinderService.getLastConnectedDisplay(boolean)",
            "com.android.server.display.DisplayManagerService$BinderService.requestColorTransform(int, int)",
            "com.android.server.display.DisplayManagerService$BinderService.startWifiDisplayScan()",
            "com.android.server.display.DisplayManagerService$BinderService.isWifiDisplayBridgeAvailable()",
            "com.android.server.display.DisplayManagerService$BinderService.isWfdEngineRunning()",
            "com.android.server.display.DisplayManagerService$BinderService.enableOverlayMagnifier(boolean)",
            "com.android.server.display.DisplayManagerService$BinderService.removeLastConnectedDLNADevice()",
            "com.android.server.display.DisplayManagerService$BinderService.disableWifiDisplay()",
            "com.android.server.display.DisplayManagerService$BinderService.enableWifiDisplayEx(java.lang.String, java.lang.String, int, java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.getWifiDisplayBridgeStatus()",
            "com.android.server.display.DisplayManagerService$BinderService.resumeWifiDisplay()",
            "com.android.server.display.DisplayManagerService$BinderService.getDisplayInfo(int)",
            "com.android.server.display.DisplayManagerService$BinderService.registerCallback(android.hardware.display.IDisplayManagerCallback)",
            "com.android.server.display.DisplayManagerService$BinderService.this$0",
            "com.android.server.display.DisplayManagerService$BinderService.getDLNADeviceName()",
            "com.android.server.display.DisplayManagerService$BinderService.isSinkAvailable()",
            "com.android.server.display.DisplayManagerService$BinderService.canProjectVideo(android.media.projection.IMediaProjection)",
            "com.android.server.display.DisplayManagerService$BinderService.disconnectWifiDisplay()",
            "com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplayWithModeEx(int, java.lang.String, boolean)",
            "com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplayWithPin(java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)",
            "com.android.server.display.DisplayManagerService$BinderService.resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)",
            "com.android.server.display.DisplayManagerService$BinderService.DisplayManagerService$BinderService(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService$BinderService.getDisplayInfoEx(int, android.os.IBinder, boolean)",
            "com.android.server.display.DisplayManagerService$BinderService.notifyEnterHomeSyncApp()",
            "com.android.server.display.DisplayManagerService$BinderService.enableWifiDisplayEx2(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "com.android.server.display.DisplayManagerService$BinderService.setCurrentDisplayIdMagnifier(int)",
            "com.android.server.display.DisplayManagerService$BinderService.getDLNADeviceAddress()",
            "com.android.server.display.DisplayManagerService$BinderService.setMagnificationSpec(android.view.MagnificationSpec)",
            "com.android.server.display.DisplayManagerService$BinderService.restartWifiDisplay()",
            "com.android.server.display.DisplayManagerService$BinderService.scanWifiDisplays()",
            "com.android.server.display.DisplayManagerService$BinderService.canProjectSecureVideo(android.media.projection.IMediaProjection)",
            "com.android.server.display.DisplayManagerService$BinderService.setMagnificationSettings(int, int, float)",
            "com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplayWithMode(int, java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.getDisplayIdOfDevice(int)",
            "com.android.server.display.DisplayManagerService$BinderService.renameWifiDisplay(java.lang.String, java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.setParameter(int, int, java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.forgetWifiDisplay(java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.isConnWithPinSupported(java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.setVirtualDisplayMirroringDisplay(android.hardware.display.IVirtualDisplayCallback, int)",
            "com.android.server.display.DisplayManagerService$BinderService.stopScanWifiDisplays()",
            "com.android.server.display.DisplayManagerService$BinderService.notifyExitHomeSyncApp()",
            "com.android.server.display.DisplayManagerService$BinderService.pauseWifiDisplay()",
            "com.android.server.display.DisplayManagerService$BinderService.connectWifiDisplay(java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.getLastConnectedDLNADevice()",
            "com.android.server.display.DisplayManagerService$BinderService.disconnectForMirroringSwitching()",
            "com.android.server.display.DisplayManagerService$BinderService.setScreenSharingStatus(int)",
            "com.android.server.display.DisplayManagerService$BinderService.getDLNAType()",
            "com.android.server.display.DisplayManagerService$BinderService.stopWifiDisplayScan()",
            "com.android.server.display.DisplayManagerService$BinderService.getWifiDisplayStatus()",
            "com.android.server.display.DisplayManagerService$BinderService.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "com.android.server.display.DisplayManagerService$BinderService.setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)",
            "com.android.server.display.DisplayManagerService$BinderService.enableWifiDisplay(android.net.wifi.p2p.WifiP2pDevice, int)",
            "com.android.server.display.DisplayManagerService$BinderService.isDLNADeviceConnected()",
            "com.android.server.display.DisplayManagerService$BinderService.renameDongle(java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.isSourceAvailable()",
            "com.android.server.display.DisplayManagerService$BinderService.validatePackageName(int, java.lang.String)",
            "com.android.server.display.DisplayManagerService$BinderService.createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "com.android.server.display.DisplayManagerService$BinderService.getScreenSharingStatus()",
            "com.android.server.display.DisplayManagerService$BinderService.isDongleRenameAvailable()",
            "com.android.server.display.DisplayManagerService$BinderService.DisplayManagerService$BinderService(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$BinderService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.IDisplayManagerCallback.onDisplayEvent(int, int)",
            "android.hardware.display.IDisplayManagerCallback.asBinder()"
          ],
          "added": [],
          "name": "android.hardware.display.IDisplayManagerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$LocalService$3.this$1",
            "com.android.server.display.DisplayManagerService$LocalService$3.DisplayManagerService$LocalService$3(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService$3.run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$LocalService.access$4400(com.android.server.display.DisplayManagerService$LocalService, int)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4700(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService.getCurrentScreenBrightnessBeforeFinal()",
            "com.android.server.display.DisplayManagerService$LocalService.getDisplayBitById(int)",
            "com.android.server.display.DisplayManagerService$LocalService.performTraversalInTransactionFromWindowManager()",
            "com.android.server.display.DisplayManagerService$LocalService.setDisplayProperties(int, boolean, float, int, boolean)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4202(com.android.server.display.DisplayManagerService$LocalService, int)",
            "com.android.server.display.DisplayManagerService$LocalService.isValidDisplayId(int)",
            "com.android.server.display.DisplayManagerService$LocalService.DisplayManagerService$LocalService(com.android.server.display.DisplayManagerService)",
            "com.android.server.display.DisplayManagerService$LocalService.requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)",
            "com.android.server.display.DisplayManagerService$LocalService.setDisplayInfoOverrideFromWindowManager(int, android.view.DisplayInfo)",
            "com.android.server.display.DisplayManagerService$LocalService.blankUnblankRunnableExcuteTimeMeasurement",
            "com.android.server.display.DisplayManagerService$LocalService.mForceBlankDisplayStateRunnable",
            "com.android.server.display.DisplayManagerService$LocalService.DisplayManagerService$LocalService(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)",
            "com.android.server.display.DisplayManagerService$LocalService.mRequestingID",
            "com.android.server.display.DisplayManagerService$LocalService.mRequestingState",
            "com.android.server.display.DisplayManagerService$LocalService.unregisterDisplayTransactionListener(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService$LocalService.removeScaledPidsFromWindowManager()",
            "com.android.server.display.DisplayManagerService$LocalService.registerDisplayTransactionListener(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "com.android.server.display.DisplayManagerService$LocalService.setDisplayOffsets(int, int, int)",
            "com.android.server.display.DisplayManagerService$LocalService.getDisplayInfo(int)",
            "com.android.server.display.DisplayManagerService$LocalService.mRequestingSubBrightness",
            "com.android.server.display.DisplayManagerService$LocalService.unblankAllDisplaysFromPowerManager()",
            "com.android.server.display.DisplayManagerService$LocalService.access$4302(com.android.server.display.DisplayManagerService$LocalService, int)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4500(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService.sendForceDisplayStateLocked(int)",
            "com.android.server.display.DisplayManagerService$LocalService.addScaledPidFromWindowManager(int, java.lang.String)",
            "com.android.server.display.DisplayManagerService$LocalService.isProximitySensorAvailable()",
            "com.android.server.display.DisplayManagerService$LocalService.mRequestingBrightness",
            "com.android.server.display.DisplayManagerService$LocalService.mForceUnblankDisplayStateRunnable",
            "com.android.server.display.DisplayManagerService$LocalService.initPowerManagement(android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager)",
            "com.android.server.display.DisplayManagerService$LocalService.setInputMethodDisplayEnabled(boolean, int)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4200(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService.blankAllDisplaysFromPowerManager()",
            "com.android.server.display.DisplayManagerService$LocalService.removeScaledPidFromWindowManager(int)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4502(com.android.server.display.DisplayManagerService$LocalService, int)",
            "com.android.server.display.DisplayManagerService$LocalService.access$4300(com.android.server.display.DisplayManagerService$LocalService)",
            "com.android.server.display.DisplayManagerService$LocalService.this$0",
            "com.android.server.display.DisplayManagerService$LocalService.isForceUnblankDisplay()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.DisplayInfo.type",
            "android.view.DisplayInfo.appHeight",
            "android.view.DisplayInfo.DisplayInfo(android.view.DisplayInfo)",
            "android.view.DisplayInfo.equals(android.view.DisplayInfo)",
            "android.view.DisplayInfo.logicalHeight",
            "android.view.DisplayInfo.defaultColorTransformId",
            "android.view.DisplayInfo.logicalDensityDpi",
            "android.view.DisplayInfo.smallestNominalAppWidth",
            "android.view.DisplayInfo.alphaScreenAppWidth",
            "android.view.DisplayInfo.overscanLeft",
            "android.view.DisplayInfo.ownerPackageName",
            "android.view.DisplayInfo.uniqueId",
            "android.view.DisplayInfo.presentationDeadlineNanos",
            "android.view.DisplayInfo.layerStack",
            "android.view.DisplayInfo.logicalWidth",
            "android.view.DisplayInfo.ownerUid",
            "android.view.DisplayInfo.DisplayInfo()",
            "android.view.DisplayInfo.physicalXDpi",
            "android.view.DisplayInfo.appWidth",
            "android.view.DisplayInfo.defaultModeId",
            "android.view.DisplayInfo.findDefaultModeByRefreshRate(float)",
            "android.view.DisplayInfo.getNaturalHeight()",
            "android.view.DisplayInfo.overscanTop",
            "android.view.DisplayInfo.getLogicalMetrics(android.util.DisplayMetrics, android.content.res.CompatibilityInfo, android.content.res.Configuration)",
            "android.view.DisplayInfo.toggleDisplay()",
            "android.view.DisplayInfo.supportedColorTransforms",
            "android.view.DisplayInfo.largestNominalAppHeight",
            "android.view.DisplayInfo.supportedModes",
            "android.view.DisplayInfo.alphaScreenAppHeight",
            "android.view.DisplayInfo.overscanRight",
            "android.view.DisplayInfo.rotation",
            "android.view.DisplayInfo.colorTransformId",
            "android.view.DisplayInfo.getMode()",
            "android.view.DisplayInfo.name",
            "android.view.DisplayInfo.copyFrom(android.view.DisplayInfo)",
            "android.view.DisplayInfo.getAppMetrics(android.util.DisplayMetrics)",
            "android.view.DisplayInfo.overscanBottom",
            "android.view.DisplayInfo.getNaturalWidth()",
            "android.view.DisplayInfo.state",
            "android.view.DisplayInfo.address",
            "android.view.DisplayInfo.appVsyncOffsetNanos",
            "android.view.DisplayInfo.hasAccess(int)",
            "android.view.DisplayInfo.largestNominalAppWidth",
            "android.view.DisplayInfo.flags",
            "android.view.DisplayInfo.modeId",
            "android.view.DisplayInfo.physicalYDpi",
            "android.view.DisplayInfo.smallestNominalAppHeight"
          ],
          "added": [],
          "name": "android.view.DisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.mIsPrinted",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.PowerManagerUtil$TimeMeasurement()",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.printTotalTime(java.lang.String, long)",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.mStartTime",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.mLapTime",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.resetTime()",
            "com.android.server.power.PowerManagerUtil$TimeMeasurement.printLapTime(java.lang.String, long)"
          ],
          "added": [],
          "name": "com.android.server.power.PowerManagerUtil$TimeMeasurement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.DisplayManagerInternal$DisplayTransactionListener.onDisplayTransaction()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayManagerInternal$DisplayTransactionListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayManagerService$SyncRoot.DisplayManagerService$SyncRoot()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$SyncRoot",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.Display$ColorTransform.Display$ColorTransform(int, int)",
            "android.view.Display$ColorTransform.getColorTransform()",
            "android.view.Display$ColorTransform.EMPTY_ARRAY",
            "android.view.Display$ColorTransform.getId()"
          ],
          "added": [],
          "name": "android.view.Display$ColorTransform",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayDevice.requestColorTransformAndModeInTransactionLocked(int, int)",
            "com.android.server.display.DisplayDevice.setLayerStackInTransactionLocked(int)",
            "com.android.server.display.DisplayDevice.DisplayDevice(com.android.server.display.DisplayAdapter, android.os.IBinder, java.lang.String)",
            "com.android.server.display.DisplayDevice.applyPendingDisplayDeviceInfoChangesLocked()",
            "com.android.server.display.DisplayDevice.mCurrentDisplayRect",
            "com.android.server.display.DisplayDevice.mCurrentLayerStackRect",
            "com.android.server.display.DisplayDevice.mDebugLastLoggedDeviceInfo",
            "com.android.server.display.DisplayDevice.mUniqueId",
            "com.android.server.display.DisplayDevice.setProjectionInTransactionLocked(int, android.graphics.Rect, android.graphics.Rect)",
            "com.android.server.display.DisplayDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.DisplayDevice.mDisplayAdapter",
            "com.android.server.display.DisplayDevice.setSurfaceInTransactionLocked(android.view.Surface)",
            "com.android.server.display.DisplayDevice.getUniqueId()",
            "com.android.server.display.DisplayDevice.performTraversalInTransactionLocked()",
            "com.android.server.display.DisplayDevice.populateViewportLocked(android.hardware.display.DisplayViewport)",
            "com.android.server.display.DisplayDevice.mDisplayToken",
            "com.android.server.display.DisplayDevice.mCurrentLayerStack",
            "com.android.server.display.DisplayDevice.mCurrentSurface",
            "com.android.server.display.DisplayDevice.getLayerStack()",
            "com.android.server.display.DisplayDevice.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.DisplayDevice.requestDisplayStateLocked(int, int)",
            "com.android.server.display.DisplayDevice.getAdapterLocked()",
            "com.android.server.display.DisplayDevice.getDisplayTokenLocked()",
            "com.android.server.display.DisplayDevice.getNameLocked()",
            "com.android.server.display.DisplayDevice.mCurrentOrientation"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.DisplayDeviceInfo.fixedOrientation",
            "com.android.server.display.DisplayDeviceInfo.hashCode()",
            "com.android.server.display.DisplayDeviceInfo.FLAG_NEVER_BLANK",
            "com.android.server.display.DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT",
            "com.android.server.display.DisplayDeviceInfo.height",
            "com.android.server.display.DisplayDeviceInfo.flags",
            "com.android.server.display.DisplayDeviceInfo.colorTransformId",
            "com.android.server.display.DisplayDeviceInfo.densityDpi",
            "com.android.server.display.DisplayDeviceInfo.copyFrom(com.android.server.display.DisplayDeviceInfo)",
            "com.android.server.display.DisplayDeviceInfo.address",
            "com.android.server.display.DisplayDeviceInfo.defaultModeId",
            "com.android.server.display.DisplayDeviceInfo.equals(java.lang.Object)",
            "com.android.server.display.DisplayDeviceInfo.toString()",
            "com.android.server.display.DisplayDeviceInfo.TOUCH_NONE",
            "com.android.server.display.DisplayDeviceInfo.defaultColorTransformId",
            "com.android.server.display.DisplayDeviceInfo.touch",
            "com.android.server.display.DisplayDeviceInfo.FLAG_SUPPORTS_PROTECTED_BUFFERS",
            "com.android.server.display.DisplayDeviceInfo.yDpi",
            "com.android.server.display.DisplayDeviceInfo.DIFF_OTHER",
            "com.android.server.display.DisplayDeviceInfo.DisplayDeviceInfo()",
            "com.android.server.display.DisplayDeviceInfo.FLAG_DEFAULT_DISPLAY",
            "com.android.server.display.DisplayDeviceInfo.FLAG_VIRTUAL_SCREEN",
            "com.android.server.display.DisplayDeviceInfo.FLAG_PRIVATE",
            "com.android.server.display.DisplayDeviceInfo.ownerPackageName",
            "com.android.server.display.DisplayDeviceInfo.diff(com.android.server.display.DisplayDeviceInfo)",
            "com.android.server.display.DisplayDeviceInfo.state",
            "com.android.server.display.DisplayDeviceInfo.type",
            "com.android.server.display.DisplayDeviceInfo.presentationDeadlineNanos",
            "com.android.server.display.DisplayDeviceInfo.touchToString(int)",
            "com.android.server.display.DisplayDeviceInfo.FLAG_SECURE",
            "com.android.server.display.DisplayDeviceInfo.rotation",
            "com.android.server.display.DisplayDeviceInfo.supportedColorTransforms",
            "com.android.server.display.DisplayDeviceInfo.xDpi",
            "com.android.server.display.DisplayDeviceInfo.width",
            "com.android.server.display.DisplayDeviceInfo.setAssumedDensityForExternalDisplay(int, int)",
            "com.android.server.display.DisplayDeviceInfo.name",
            "com.android.server.display.DisplayDeviceInfo.ownerUid",
            "com.android.server.display.DisplayDeviceInfo.FLAG_ROUND",
            "com.android.server.display.DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY",
            "com.android.server.display.DisplayDeviceInfo.supportedModes",
            "com.android.server.display.DisplayDeviceInfo.flagsToString(int)",
            "com.android.server.display.DisplayDeviceInfo.displayToMirror",
            "com.android.server.display.DisplayDeviceInfo.modeId",
            "com.android.server.display.DisplayDeviceInfo.equals(com.android.server.display.DisplayDeviceInfo)",
            "com.android.server.display.DisplayDeviceInfo.TOUCH_EXTERNAL",
            "com.android.server.display.DisplayDeviceInfo.TOUCH_INTERNAL",
            "com.android.server.display.DisplayDeviceInfo.uniqueId",
            "com.android.server.display.DisplayDeviceInfo.DIFF_STATE",
            "com.android.server.display.DisplayDeviceInfo.FLAG_PRESENTATION",
            "com.android.server.display.DisplayDeviceInfo.appVsyncOffsetNanos"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayDeviceInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.DisplayViewport.logicalFrame",
            "android.hardware.display.DisplayViewport.physicalFrame",
            "android.hardware.display.DisplayViewport.deviceWidth",
            "android.hardware.display.DisplayViewport.orientation",
            "android.hardware.display.DisplayViewport.copyFrom(android.hardware.display.DisplayViewport)",
            "android.hardware.display.DisplayViewport.displayId",
            "android.hardware.display.DisplayViewport.deviceHeight",
            "android.hardware.display.DisplayViewport.valid",
            "android.hardware.display.DisplayViewport.DisplayViewport()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayViewport",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "libcore.util.Objects.equal(java.lang.Object, java.lang.Object)"
          ],
          "added": [],
          "name": "libcore.util.Objects",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.projection.IMediaProjection.canProjectSecureVideo()",
            "android.media.projection.IMediaProjection.asBinder()",
            "android.media.projection.IMediaProjection.canProjectVideo()",
            "android.media.projection.IMediaProjection.registerCallback(android.media.projection.IMediaProjectionCallback)",
            "android.media.projection.IMediaProjection.applyVirtualDisplayFlags(int)"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pGroup.getFrequency()",
            "android.net.wifi.p2p.WifiP2pGroup.getNetworkName()",
            "android.net.wifi.p2p.WifiP2pGroup.getClientList()",
            "android.net.wifi.p2p.WifiP2pGroup.contains(android.net.wifi.p2p.WifiP2pDevice)",
            "android.net.wifi.p2p.WifiP2pGroup.getOwner()",
            "android.net.wifi.p2p.WifiP2pGroup.isGroupOwner()",
            "android.net.wifi.p2p.WifiP2pGroup.toString()",
            "android.net.wifi.p2p.WifiP2pGroup.getInterface()",
            "android.net.wifi.p2p.WifiP2pGroup.getPassphrase()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pGroup",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$30.onReceive(android.content.Context, android.content.Intent)",
            "com.android.server.display.WifiDisplayController$30.this$0",
            "com.android.server.display.WifiDisplayController$30.WifiDisplayController$30(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$30",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$29.val$width",
            "com.android.server.display.WifiDisplayController$29.run()",
            "com.android.server.display.WifiDisplayController$29.val$display",
            "com.android.server.display.WifiDisplayController$29.val$oldDisplay",
            "com.android.server.display.WifiDisplayController$29.WifiDisplayController$29(com.android.server.display.WifiDisplayController, android.view.Surface, android.view.Surface, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay, int, int, boolean, int, int, int)",
            "com.android.server.display.WifiDisplayController$29.val$oldDisplayHeight",
            "com.android.server.display.WifiDisplayController$29.val$surface",
            "com.android.server.display.WifiDisplayController$29.val$oldDisplayWidth",
            "com.android.server.display.WifiDisplayController$29.val$height",
            "com.android.server.display.WifiDisplayController$29.val$flags",
            "com.android.server.display.WifiDisplayController$29.val$oldSurface",
            "com.android.server.display.WifiDisplayController$29.val$requestPendingSetup",
            "com.android.server.display.WifiDisplayController$29.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$29",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$14.this$0",
            "com.android.server.display.WifiDisplayController$14.run()",
            "com.android.server.display.WifiDisplayController$14.WifiDisplayController$14(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$16.onSuccess()",
            "com.android.server.display.WifiDisplayController$16.onFailure(int)",
            "com.android.server.display.WifiDisplayController$16.this$0",
            "com.android.server.display.WifiDisplayController$16.val$oldDevice",
            "com.android.server.display.WifiDisplayController$16.next()",
            "com.android.server.display.WifiDisplayController$16.WifiDisplayController$16(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$16",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$26.WifiDisplayController$26(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$26.run()",
            "com.android.server.display.WifiDisplayController$26.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$26",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$19.onDisplayDisconnected()",
            "com.android.server.display.WifiDisplayController$19.onDisplayConnected(android.view.Surface, int, int, int, int)",
            "com.android.server.display.WifiDisplayController$19.onDisplayError(int)",
            "com.android.server.display.WifiDisplayController$19.this$0",
            "com.android.server.display.WifiDisplayController$19.WifiDisplayController$19(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController$19.val$oldDevice"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$19",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$15.this$0",
            "com.android.server.display.WifiDisplayController$15.next()",
            "com.android.server.display.WifiDisplayController$15.onFailure(int)",
            "com.android.server.display.WifiDisplayController$15.onSuccess()",
            "com.android.server.display.WifiDisplayController$15.WifiDisplayController$15(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController$15.val$oldDevice"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$15",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$24.this$0",
            "com.android.server.display.WifiDisplayController$24.run()",
            "com.android.server.display.WifiDisplayController$24.WifiDisplayController$24(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$24",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$28.run()",
            "com.android.server.display.WifiDisplayController$28.val$oldDevice",
            "com.android.server.display.WifiDisplayController$28.this$0",
            "com.android.server.display.WifiDisplayController$28.WifiDisplayController$28(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$28",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pConfig.deviceAddress",
            "android.net.wifi.p2p.WifiP2pConfig.netId",
            "android.net.wifi.p2p.WifiP2pConfig.WifiP2pConfig()",
            "android.net.wifi.p2p.WifiP2pConfig.groupOwnerIntent",
            "android.net.wifi.p2p.WifiP2pConfig.wps"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pConfig",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$27.WifiDisplayController$27(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$27.this$0",
            "com.android.server.display.WifiDisplayController$27.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$27",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$18.onQoSLevelChanged(int)",
            "com.android.server.display.WifiDisplayController$18.WifiDisplayController$18(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$18.onWeakNetwork()",
            "com.android.server.display.WifiDisplayController$18.onHeadSetConnected()",
            "com.android.server.display.WifiDisplayController$18.onTransportChanged(int)",
            "com.android.server.display.WifiDisplayController$18.this$0",
            "com.android.server.display.WifiDisplayController$18.onTerminateRequested()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$18",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$7.this$0",
            "com.android.server.display.WifiDisplayController$7.val$featureState",
            "com.android.server.display.WifiDisplayController$7.run()",
            "com.android.server.display.WifiDisplayController$7.WifiDisplayController$7(com.android.server.display.WifiDisplayController, int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ChannelListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$17.onFailure(int)",
            "com.android.server.display.WifiDisplayController$17.WifiDisplayController$17(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController$17.onSuccess()",
            "com.android.server.display.WifiDisplayController$17.val$newDevice",
            "com.android.server.display.WifiDisplayController$17.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$17",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$22.WifiDisplayController$22(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$22.onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController$22.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$22",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$6$1.onSuccess()",
            "com.android.server.display.WifiDisplayController$6$1.onFailure(int)",
            "com.android.server.display.WifiDisplayController$6$1.WifiDisplayController$6$1(com.android.server.display.WifiDisplayController$6)",
            "com.android.server.display.WifiDisplayController$6$1.this$1"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$6$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$12.run()",
            "com.android.server.display.WifiDisplayController$12.WifiDisplayController$12(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$12.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController.mRequestPendingSetup",
            "com.android.server.display.WifiDisplayController.requestConnect(java.lang.String)",
            "com.android.server.display.WifiDisplayController.access$5700(com.android.server.display.WifiDisplayController, android.net.NetworkInfo)",
            "com.android.server.display.WifiDisplayController.mAdvertisedDisplay",
            "com.android.server.display.WifiDisplayController.mRequestedScanChannel",
            "com.android.server.display.WifiDisplayController.isWifiConnected(android.content.Context)",
            "com.android.server.display.WifiDisplayController.requestPause()",
            "com.android.server.display.WifiDisplayController.INFO_TYPE_DPM_WIFI",
            "com.android.server.display.WifiDisplayController.access$2500(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.requestDisconnectForMirroringSwitching()",
            "com.android.server.display.WifiDisplayController.mWifiP2pManager",
            "com.android.server.display.WifiDisplayController.handleScanFinished()",
            "com.android.server.display.WifiDisplayController.requestDisconnect()",
            "com.android.server.display.WifiDisplayController.access$1700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.describeWifiP2pDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mWifiP2pPrevState",
            "com.android.server.display.WifiDisplayController.mPartialScanningInProgress",
            "com.android.server.display.WifiDisplayController.access$3300(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.CONNECT_RETRY_DELAY_MILLIS",
            "com.android.server.display.WifiDisplayController.MAX_THROUGHPUT",
            "com.android.server.display.WifiDisplayController.TAG",
            "com.android.server.display.WifiDisplayController.access$6400(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mKDDIServiceConnected",
            "com.android.server.display.WifiDisplayController.restartWifiDisplay()",
            "com.android.server.display.WifiDisplayController.connect(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.getSessionInfo(android.net.wifi.p2p.WifiP2pGroup, int)",
            "com.android.server.display.WifiDisplayController.DEBUG",
            "com.android.server.display.WifiDisplayController.access$5802(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.handleConnectionFailure(boolean)",
            "com.android.server.display.WifiDisplayController.access$3100(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.createWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.access$1000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mZeroSettingsConcept",
            "com.android.server.display.WifiDisplayController.access$600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.setUDP(java.lang.String, java.lang.Object)",
            "com.android.server.display.WifiDisplayController.access$702(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.notifyExitHomeSyncApp()",
            "com.android.server.display.WifiDisplayController.access$3800(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup, int)",
            "com.android.server.display.WifiDisplayController.mDongleUpdateResult",
            "com.android.server.display.WifiDisplayController.access$4000(com.android.server.display.WifiDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayController.computeFeatureState()",
            "com.android.server.display.WifiDisplayController.mConnectingDevice",
            "com.android.server.display.WifiDisplayController.mDesiredDevice",
            "com.android.server.display.WifiDisplayController.access$502(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.notifyEnterHomeSyncApp()",
            "com.android.server.display.WifiDisplayController.access$1600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mNetworkInfo",
            "com.android.server.display.WifiDisplayController.access$5600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.handleScanStarted()",
            "com.android.server.display.WifiDisplayController.access$602(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$4700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$6500(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mWfdEnabled",
            "com.android.server.display.WifiDisplayController.retryConnection()",
            "com.android.server.display.WifiDisplayController.handleStateChanged(boolean)",
            "com.android.server.display.WifiDisplayController.getPowerSavingMode()",
            "com.android.server.display.WifiDisplayController.mIsBootCompleted",
            "com.android.server.display.WifiDisplayController.access$5100(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.KDDI_SOURCE_CONNECT_SUCCESS_ACTION",
            "com.android.server.display.WifiDisplayController.handlePeersChanged()",
            "com.android.server.display.WifiDisplayController.access$3702(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.FULLSCAN_TIME_DELAY_MILLIS",
            "com.android.server.display.WifiDisplayController.mAvailableWifiDisplayPeers",
            "com.android.server.display.WifiDisplayController.mContext",
            "com.android.server.display.WifiDisplayController.mWaitTillSideSyncClosed",
            "com.android.server.display.WifiDisplayController.access$2202(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mWifiDisplayWpsConfig",
            "com.android.server.display.WifiDisplayController.getCPUPowerSavingMode()",
            "com.android.server.display.WifiDisplayController.requestStopScan()",
            "com.android.server.display.WifiDisplayController.describeWifiP2pGroup(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.mWfdFrequency",
            "com.android.server.display.WifiDisplayController.access$3002(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.POPUP_CAUSE_OXYGEN_NETWORK_ENABLED",
            "com.android.server.display.WifiDisplayController.getPortNumber(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.updateConnection()",
            "com.android.server.display.WifiDisplayController.access$5900(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$2900(com.android.server.display.WifiDisplayController, java.lang.String, java.lang.Object)",
            "com.android.server.display.WifiDisplayController.requestClearConnectedDisplayInfo()",
            "com.android.server.display.WifiDisplayController.requestScreenMirroringEnable(boolean)",
            "com.android.server.display.WifiDisplayController.access$400(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mAdvertisedDisplayWidth",
            "com.android.server.display.WifiDisplayController.mHandler",
            "com.android.server.display.WifiDisplayController.access$6600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.requestSaveConnectedDisplayInfo()",
            "com.android.server.display.WifiDisplayController.access$6000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.getInterfaceAddress(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.isWifiIbssEnabled()",
            "com.android.server.display.WifiDisplayController.access$100(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.stopPeerDiscovery()",
            "com.android.server.display.WifiDisplayController.requestResume()",
            "com.android.server.display.WifiDisplayController.mConnectionTimeout",
            "com.android.server.display.WifiDisplayController.access$2400(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$4200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.handleScanResults()",
            "com.android.server.display.WifiDisplayController.access$1800(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.CONNECT_MAX_RETRIES",
            "com.android.server.display.WifiDisplayController.disconnect()",
            "com.android.server.display.WifiDisplayController.access$2700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.syncRemoteDisplayStatus(int, boolean)",
            "com.android.server.display.WifiDisplayController.mThisDevice",
            "com.android.server.display.WifiDisplayController.mUpdateURL",
            "com.android.server.display.WifiDisplayController.access$900(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$4500(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mAdvertisedDisplayFlags",
            "com.android.server.display.WifiDisplayController.DEFAULT_SCAN_CHANNEL",
            "com.android.server.display.WifiDisplayController.access$3600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$5400(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.isSideSyncAppRunning()",
            "com.android.server.display.WifiDisplayController.access$5020(com.android.server.display.WifiDisplayController, int)",
            "com.android.server.display.WifiDisplayController.access$4402(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.access$6300(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.updateWfdEnableState()",
            "com.android.server.display.WifiDisplayController.mRestrictionPolicy",
            "com.android.server.display.WifiDisplayController.mWifiManager",
            "com.android.server.display.WifiDisplayController.mLimitedContentsEnabled",
            "com.android.server.display.WifiDisplayController.mRestartTriggered",
            "com.android.server.display.WifiDisplayController.CONNECTION_TIMEOUT_SECONDS",
            "com.android.server.display.WifiDisplayController.access$1300(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$6100(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mP2pClientsList",
            "com.android.server.display.WifiDisplayController.mConnectedDeviceGroupInfo",
            "com.android.server.display.WifiDisplayController.mWfdConnectedDevice",
            "com.android.server.display.WifiDisplayController.access$2100(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.makeConnConfig(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.access$200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mOnPowerSavingMode",
            "com.android.server.display.WifiDisplayController.access$5300(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$5302(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$3402(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.requestDisableWiFiP2P()",
            "com.android.server.display.WifiDisplayController.DISCOVER_PEERS_INTERVAL_MILLIS",
            "com.android.server.display.WifiDisplayController.access$3900(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.isKDDIServiceConnected()",
            "com.android.server.display.WifiDisplayController.advertiseDisplay(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayController.DEFAULT_CONTROL_PORT",
            "com.android.server.display.WifiDisplayController.access$5500(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$3700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mRemoteDisplay",
            "com.android.server.display.WifiDisplayController.mWifiP2pChannel",
            "com.android.server.display.WifiDisplayController.access$4100(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.requestStartScan()",
            "com.android.server.display.WifiDisplayController.access$2800(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$6102(com.android.server.display.WifiDisplayController, java.lang.String)",
            "com.android.server.display.WifiDisplayController.RTSP_TIMEOUT_SECONDS_CERT_MODE",
            "com.android.server.display.WifiDisplayController.access$6800(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mDisconnectingDevice",
            "com.android.server.display.WifiDisplayController.tryDiscoverPeers()",
            "com.android.server.display.WifiDisplayController.mDiscoverPeersInProgress",
            "com.android.server.display.WifiDisplayController.mLimitedContentsType",
            "com.android.server.display.WifiDisplayController.isAuSLServiceRunning()",
            "com.android.server.display.WifiDisplayController.getChangedClientDevice(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.isRunningHomeSync",
            "com.android.server.display.WifiDisplayController.RESTART_SCANNING_TIME_MILLIS",
            "com.android.server.display.WifiDisplayController.mFullScanTimer",
            "com.android.server.display.WifiDisplayController.WifiDisplayController(android.content.Context, android.os.Handler, com.android.server.display.WifiDisplayController$Listener)",
            "com.android.server.display.WifiDisplayController.mRemoteDisplayInterface",
            "com.android.server.display.WifiDisplayController.access$2200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mHDMIConnected",
            "com.android.server.display.WifiDisplayController.access$4202(com.android.server.display.WifiDisplayController, int)",
            "com.android.server.display.WifiDisplayController.access$6200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$3000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mDisconnectByUser",
            "com.android.server.display.WifiDisplayController.mRemoteIP",
            "com.android.server.display.WifiDisplayController.access$1200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$4400(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$5902(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.requestConnectWithPin(java.lang.String)",
            "com.android.server.display.WifiDisplayController.mDiscoverPeers",
            "com.android.server.display.WifiDisplayController.KDDI_SOURCE_DISCONNECT_SUCCESS_ACTION",
            "com.android.server.display.WifiDisplayController.mScanRequestedInConnected",
            "com.android.server.display.WifiDisplayController.BROKER_CLOSING_TIME_MILLIS",
            "com.android.server.display.WifiDisplayController.mCancelingDevice",
            "com.android.server.display.WifiDisplayController.access$5200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mAdvertisedDisplayHeight",
            "com.android.server.display.WifiDisplayController.updateDesiredDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mRtspTimeout",
            "com.android.server.display.WifiDisplayController.access$300(com.android.server.display.WifiDisplayController, int)",
            "com.android.server.display.WifiDisplayController.SCANNING_TIME_MILLIS",
            "com.android.server.display.WifiDisplayController.isHotspotOn()",
            "com.android.server.display.WifiDisplayController.mWifiP2pReceiver",
            "com.android.server.display.WifiDisplayController.EXTRA_INFO_TYPE",
            "com.android.server.display.WifiDisplayController.mWifiP2pEnabled",
            "com.android.server.display.WifiDisplayController.RTSP_TIMEOUT_SECONDS",
            "com.android.server.display.WifiDisplayController.reportFeatureState()",
            "com.android.server.display.WifiDisplayController.mConnectionRetriesLeft",
            "com.android.server.display.WifiDisplayController.access$6502(com.android.server.display.WifiDisplayController, java.lang.String)",
            "com.android.server.display.WifiDisplayController.isConnWithPinSupported(java.lang.String)",
            "com.android.server.display.WifiDisplayController.access$102(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$6802(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$1500(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mPinRequired",
            "com.android.server.display.WifiDisplayController.access$2300(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.isDongleRenameAvailable()",
            "com.android.server.display.WifiDisplayController.readvertiseDisplay(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayController.mRemoteDisplayConnected",
            "com.android.server.display.WifiDisplayController.dump(java.io.PrintWriter, java.lang.String)",
            "com.android.server.display.WifiDisplayController.mSupportsProtectedBuffers",
            "com.android.server.display.WifiDisplayController.SCAN_MAX_RETRIES",
            "com.android.server.display.WifiDisplayController.mMirroringSwitching",
            "com.android.server.display.WifiDisplayController.mWifiP2pConnected",
            "com.android.server.display.WifiDisplayController.updateSettings()",
            "com.android.server.display.WifiDisplayController.access$4300(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController.isWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.setScanningChannel(int)",
            "com.android.server.display.WifiDisplayController.access$000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$3500(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.isSideSyncConnected()",
            "com.android.server.display.WifiDisplayController.isPrimarySinkDeviceType(int)",
            "com.android.server.display.WifiDisplayController.access$800(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mWaitTillBrokerClosed",
            "com.android.server.display.WifiDisplayController.access$1900(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$4600(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.handleConnectionChanged(android.net.NetworkInfo)",
            "com.android.server.display.WifiDisplayController.mEDM",
            "com.android.server.display.WifiDisplayController.access$5402(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.broadcastWfdState(int)",
            "com.android.server.display.WifiDisplayController.mFullScanningInProgress",
            "com.android.server.display.WifiDisplayController.access$3200(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$3302(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.access$6602(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$1802(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mListener",
            "com.android.server.display.WifiDisplayController.access$2600(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.access$1400(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.mWfdEnabling",
            "com.android.server.display.WifiDisplayController.mScanRequested",
            "com.android.server.display.WifiDisplayController.mWifiDisplayCertMode",
            "com.android.server.display.WifiDisplayController.access$1902(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.requestConnect(int, java.lang.String, boolean)",
            "com.android.server.display.WifiDisplayController.requestStartSettings()",
            "com.android.server.display.WifiDisplayController.mConnectState",
            "com.android.server.display.WifiDisplayController.mDongleUpdateOnGoing",
            "com.android.server.display.WifiDisplayController.updateScanState()",
            "com.android.server.display.WifiDisplayController.renameDongle(java.lang.String)",
            "com.android.server.display.WifiDisplayController.mWifiDisplayOnSetting",
            "com.android.server.display.WifiDisplayController.isP2pConnected()",
            "com.android.server.display.WifiDisplayController.access$5000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.requestConnect(int, java.lang.String)",
            "com.android.server.display.WifiDisplayController.AP_CONNECTED",
            "com.android.server.display.WifiDisplayController.access$4802(com.android.server.display.WifiDisplayController, boolean)",
            "com.android.server.display.WifiDisplayController.SIDESYNC_CLOSING_TIME_MILLIS",
            "com.android.server.display.WifiDisplayController.mDPM",
            "com.android.server.display.WifiDisplayController.DB_PSM_SWITCH",
            "com.android.server.display.WifiDisplayController.mAdvertisedDisplaySurface",
            "com.android.server.display.WifiDisplayController.mWfdUibcManager",
            "com.android.server.display.WifiDisplayController.unadvertiseDisplay()",
            "com.android.server.display.WifiDisplayController.access$2000(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$4900(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$1602(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController.access$500(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.mWaitForAction",
            "com.android.server.display.WifiDisplayController.access$1100(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.requestPeers()",
            "com.android.server.display.WifiDisplayController.requestPopup(int)",
            "com.android.server.display.WifiDisplayController.mConnectedDevice",
            "com.android.server.display.WifiDisplayController.access$6700(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController.access$5800(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$3.this$0",
            "com.android.server.display.WifiDisplayController$3.WifiDisplayController$3(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$3.onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$13.val$displays",
            "com.android.server.display.WifiDisplayController$13.this$0",
            "com.android.server.display.WifiDisplayController$13.run()",
            "com.android.server.display.WifiDisplayController$13.WifiDisplayController$13(com.android.server.display.WifiDisplayController, android.hardware.display.WifiDisplay[])"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$25.WifiDisplayController$25(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$25.this$0",
            "com.android.server.display.WifiDisplayController$25.run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$25",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$Channel",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$8.this$0",
            "com.android.server.display.WifiDisplayController$8.onSuccess()",
            "com.android.server.display.WifiDisplayController$8.onFailure(int)",
            "com.android.server.display.WifiDisplayController$8.WifiDisplayController$8(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$PeerListListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pWfdInfo.setWfdEnabled(boolean)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.setSessionAvailable(boolean)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.WifiP2pWfdInfo()",
            "android.net.wifi.p2p.WifiP2pWfdInfo.isSessionAvailable()",
            "android.net.wifi.p2p.WifiP2pWfdInfo.setMaxThroughput(int)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.setControlPort(int)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.setDeviceType(int)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.getDeviceType()",
            "android.net.wifi.p2p.WifiP2pWfdInfo.setContentProtection(boolean)",
            "android.net.wifi.p2p.WifiP2pWfdInfo.isWfdEnabled()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pWfdInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$1.onChange(boolean, android.net.Uri)",
            "com.android.server.display.WifiDisplayController$1.this$0",
            "com.android.server.display.WifiDisplayController$1.WifiDisplayController$1(com.android.server.display.WifiDisplayController, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$5.WifiDisplayController$5(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$5.onFailure(int)",
            "com.android.server.display.WifiDisplayController$5.this$0",
            "com.android.server.display.WifiDisplayController$5.onSuccess()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.WpsInfo.setup"
          ],
          "added": [],
          "name": "android.net.wifi.WpsInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pManager.cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "android.net.wifi.p2p.WifiP2pManager.disableP2p(android.net.wifi.p2p.WifiP2pManager$Channel)",
            "android.net.wifi.p2p.WifiP2pManager.setMiracastMode(int)",
            "android.net.wifi.p2p.WifiP2pManager.enableP2p(android.net.wifi.p2p.WifiP2pManager$Channel)",
            "android.net.wifi.p2p.WifiP2pManager.requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)",
            "android.net.wifi.p2p.WifiP2pManager.setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pWfdInfo, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "android.net.wifi.p2p.WifiP2pManager.callSECApi(android.net.wifi.p2p.WifiP2pManager$Channel, android.os.Message)",
            "android.net.wifi.p2p.WifiP2pManager.requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)",
            "android.net.wifi.p2p.WifiP2pManager.requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$PeerListListener)",
            "android.net.wifi.p2p.WifiP2pManager.initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager$ChannelListener)",
            "android.net.wifi.p2p.WifiP2pManager.connect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "android.net.wifi.p2p.WifiP2pManager.discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel, int, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "android.net.wifi.p2p.WifiP2pManager.removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener)"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$2.onChange(boolean, android.net.Uri)",
            "com.android.server.display.WifiDisplayController$2.WifiDisplayController$2(com.android.server.display.WifiDisplayController, android.os.Handler, android.content.ContentResolver)",
            "com.android.server.display.WifiDisplayController$2.this$0",
            "com.android.server.display.WifiDisplayController$2.val$resolver"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$GroupInfoListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$23.WifiDisplayController$23(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$23.run()",
            "com.android.server.display.WifiDisplayController$23.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$23",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ActionListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$4.onFailure(int)",
            "com.android.server.display.WifiDisplayController$4.this$0",
            "com.android.server.display.WifiDisplayController$4.WifiDisplayController$4(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$4.onSuccess()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$21.onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)",
            "com.android.server.display.WifiDisplayController$21.WifiDisplayController$21(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$21.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$21",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$6.run()",
            "com.android.server.display.WifiDisplayController$6.WifiDisplayController$6(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$6.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.provider.Settings$Global.getInt(android.content.ContentResolver, java.lang.String)",
            "android.provider.Settings$Global.getFloat(android.content.ContentResolver, java.lang.String, float)",
            "android.provider.Settings$Global.getUriFor(java.lang.String)",
            "android.provider.Settings$Global.isValidZenMode(int)",
            "android.provider.Settings$Global.putInt(android.content.ContentResolver, java.lang.String, int)",
            "android.provider.Settings$Global.zenModeToString(int)",
            "android.provider.Settings$Global.getStringForUser(android.content.ContentResolver, java.lang.String, int)",
            "android.provider.Settings$Global.putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)",
            "android.provider.Settings$Global.CONTENT_URI",
            "android.provider.Settings$Global.putFloat(android.content.ContentResolver, java.lang.String, float)",
            "android.provider.Settings$Global.putString(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "android.provider.Settings$Global.getInt(android.content.ContentResolver, java.lang.String, int)",
            "android.provider.Settings$Global.getLong(android.content.ContentResolver, java.lang.String, long)",
            "android.provider.Settings$Global.getString(android.content.ContentResolver, java.lang.String)"
          ],
          "added": [],
          "name": "android.provider.Settings$Global",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.DisplayManager.unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)",
            "android.hardware.display.DisplayManager.getDisplay(int)",
            "android.hardware.display.DisplayManager.getDisplays()",
            "android.hardware.display.DisplayManager.registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)",
            "android.hardware.display.DisplayManager.getWifiDisplayStatus()"
          ],
          "added": [
            "android.hardware.display.DisplayManager.isDLNADeviceConnected()"
          ],
          "name": "android.hardware.display.DisplayManager",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.WifiDisplayStatus.getConnectedState()",
            "android.hardware.display.WifiDisplayStatus.getFeatureState()",
            "android.hardware.display.WifiDisplayStatus.WifiDisplayStatus(int, int, int, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay[], android.hardware.display.WifiDisplaySessionInfo, int, int)",
            "android.hardware.display.WifiDisplayStatus.getActiveDisplayState()",
            "android.hardware.display.WifiDisplayStatus.getScanState()",
            "android.hardware.display.WifiDisplayStatus.WifiDisplayStatus()"
          ],
          "added": [],
          "name": "android.hardware.display.WifiDisplayStatus",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pDevice.deviceAddress",
            "android.net.wifi.p2p.WifiP2pDevice.toString()",
            "android.net.wifi.p2p.WifiP2pDevice.wfdInfo",
            "android.net.wifi.p2p.WifiP2pDevice.GOdeviceName",
            "android.net.wifi.p2p.WifiP2pDevice.wpsKeypadSupported()",
            "android.net.wifi.p2p.WifiP2pDevice.wpsPbcSupported()",
            "android.net.wifi.p2p.WifiP2pDevice.WifiP2pDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "android.net.wifi.p2p.WifiP2pDevice.iconIdx",
            "android.net.wifi.p2p.WifiP2pDevice.wpsDisplaySupported()",
            "android.net.wifi.p2p.WifiP2pDevice.status",
            "android.net.wifi.p2p.WifiP2pDevice.groupownerAddress",
            "android.net.wifi.p2p.WifiP2pDevice.WifiP2pDevice()",
            "android.net.wifi.p2p.WifiP2pDevice.equals(java.lang.Object)",
            "android.net.wifi.p2p.WifiP2pDevice.update(android.net.wifi.p2p.WifiP2pDevice)",
            "android.net.wifi.p2p.WifiP2pDevice.deviceName",
            "android.net.wifi.p2p.WifiP2pDevice.primaryDeviceType"
          ],
          "added": [
            "android.net.wifi.p2p.WifiP2pDevice.ssDevInfo"
          ],
          "name": "android.net.wifi.p2p.WifiP2pDevice",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.WifiDisplay.WifiDisplay(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String)",
            "android.hardware.display.WifiDisplay.setDeviceInfo(int)",
            "android.hardware.display.WifiDisplay.equals(android.hardware.display.WifiDisplay)",
            "android.hardware.display.WifiDisplay.isRemembered()",
            "android.hardware.display.WifiDisplay.getDeviceName()",
            "android.hardware.display.WifiDisplay.EMPTY_ARRAY",
            "android.hardware.display.WifiDisplay.canConnect()",
            "android.hardware.display.WifiDisplay.getPrimaryDeviceType()",
            "android.hardware.display.WifiDisplay.getDeviceAlias()",
            "android.hardware.display.WifiDisplay.getFriendlyDisplayName()",
            "android.hardware.display.WifiDisplay.CREATOR",
            "android.hardware.display.WifiDisplay.isAvailable()",
            "android.hardware.display.WifiDisplay.getDeviceAddress()",
            "android.hardware.display.WifiDisplay.hasSameAddress(android.hardware.display.WifiDisplay)"
          ],
          "added": [
            "android.hardware.display.WifiDisplay.getDeviceInfo()"
          ],
          "name": "android.hardware.display.WifiDisplay",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.media.RemoteDisplay$Listener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.media.WFDUibcManager.setUIBCNegotiagedResolution(float, float)",
            "android.media.WFDUibcManager.WFDUibcManager(android.content.Context)",
            "android.media.WFDUibcManager.setCoupleShotMode(boolean)",
            "android.media.WFDUibcManager.stop()",
            "android.media.WFDUibcManager.start()"
          ],
          "added": [],
          "name": "android.media.WFDUibcManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.RemoteDisplayCallback.setContext(android.content.Context, android.media.RemoteDisplayCallback$Listener)"
          ],
          "added": [],
          "name": "android.media.RemoteDisplayCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.media.RemoteDisplayCallback$Listener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.display.WifiDisplaySessionInfo.toString()",
            "android.hardware.display.WifiDisplaySessionInfo.WifiDisplaySessionInfo(boolean, int, java.lang.String, java.lang.String, java.lang.String)"
          ],
          "added": [],
          "name": "android.hardware.display.WifiDisplaySessionInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$Listener.onDisplayConnecting(android.hardware.display.WifiDisplay, int)",
            "com.android.server.display.WifiDisplayController$Listener.onScanFinished()",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayConnecting(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayDisconnecting()",
            "com.android.server.display.WifiDisplayController$Listener.onDisplaySessionInfo(android.hardware.display.WifiDisplaySessionInfo)",
            "com.android.server.display.WifiDisplayController$Listener.onP2pConnected(java.net.InetAddress)",
            "com.android.server.display.WifiDisplayController$Listener.onScanStarted()",
            "com.android.server.display.WifiDisplayController$Listener.onFeatureStateChanged(int)",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayDisconnected()",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayChanged(android.hardware.display.WifiDisplay)",
            "com.android.server.display.WifiDisplayController$Listener.onClientUpdated(android.net.wifi.p2p.WifiP2pDevice)",
            "com.android.server.display.WifiDisplayController$Listener.onScanResults(android.hardware.display.WifiDisplay[])",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "com.android.server.display.WifiDisplayController$Listener.onDisplayConnectionFailed()",
            "com.android.server.display.WifiDisplayController$Listener.onP2pDisconnected()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver.this$0",
            "com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver.LocalDisplayAdapter$HotplugDisplayEventReceiver(com.android.server.display.LocalDisplayAdapter, android.os.Looper)",
            "com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver.onHotplug(long, int, boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.DisplayEventReceiver.DisplayEventReceiver(android.os.Looper)"
          ],
          "added": [],
          "name": "android.view.DisplayEventReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback.onStop()",
            "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback.VirtualDisplayAdapter$MediaProjectionCallback(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback.this$0",
            "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback.mAppToken"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.media.projection.IMediaProjectionCallback$Stub.IMediaProjectionCallback$Stub()"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjectionCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.OverlayDisplayWindow$5.OverlayDisplayWindow$5(com.android.server.display.OverlayDisplayWindow)",
            "com.android.server.display.OverlayDisplayWindow$5.onScale(android.view.ScaleGestureDetector)",
            "com.android.server.display.OverlayDisplayWindow$5.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.view.ScaleGestureDetector$SimpleOnScaleGestureListener.ScaleGestureDetector$SimpleOnScaleGestureListener()"
          ],
          "added": [],
          "name": "android.view.ScaleGestureDetector$SimpleOnScaleGestureListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.AutomaticBrightnessController$5.onSContextChanged(android.hardware.scontext.SContextEvent)",
            "com.android.server.display.AutomaticBrightnessController$5.this$0",
            "com.android.server.display.AutomaticBrightnessController$5.AutomaticBrightnessController$5(com.android.server.display.AutomaticBrightnessController)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.hardware.scontext.SContextAutoBrightness.getAmbientLux()",
            "android.hardware.scontext.SContextAutoBrightness.getCandela()"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextAutoBrightness",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDisplayAdapter.enable(boolean)",
            "com.android.server.display.MagnifierDisplayAdapter.getSyncRoot()",
            "com.android.server.display.MagnifierDisplayAdapter.mDisplayInfo",
            "com.android.server.display.MagnifierDisplayAdapter.registerLocked()",
            "com.android.server.display.MagnifierDisplayAdapter.mPolicy",
            "com.android.server.display.MagnifierDisplayAdapter.MagnifierDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, android.os.Handler)",
            "com.android.server.display.MagnifierDisplayAdapter.mTempSpec",
            "com.android.server.display.MagnifierDisplayAdapter.getHandler()",
            "com.android.server.display.MagnifierDisplayAdapter.dump(java.io.PrintWriter, java.lang.String)",
            "com.android.server.display.MagnifierDisplayAdapter.onChangeSurface(android.view.Surface)",
            "com.android.server.display.MagnifierDisplayAdapter.DEBUG",
            "com.android.server.display.MagnifierDisplayAdapter.updateMagnificationSpec(android.view.MagnificationSpec)",
            "com.android.server.display.MagnifierDisplayAdapter.mScale",
            "com.android.server.display.MagnifierDisplayAdapter.setMagnificationSettings(int, int, float)",
            "com.android.server.display.MagnifierDisplayAdapter.dumpLocked(java.io.PrintWriter)",
            "com.android.server.display.MagnifierDisplayAdapter.TAG",
            "com.android.server.display.MagnifierDisplayAdapter.getContext()",
            "com.android.server.display.MagnifierDisplayAdapter.mSurfaceCtl",
            "com.android.server.display.MagnifierDisplayAdapter.onCreateSurface(android.view.Surface, int, int)",
            "com.android.server.display.MagnifierDisplayAdapter.sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "com.android.server.display.MagnifierDisplayAdapter.mDevice",
            "com.android.server.display.MagnifierDisplayAdapter.mEnabled",
            "com.android.server.display.MagnifierDisplayAdapter.mCurrentDisplayId",
            "com.android.server.display.MagnifierDisplayAdapter.mUiHandler",
            "com.android.server.display.MagnifierDisplayAdapter.setCurrentDisplayIdMagnifier(int)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.MagnifierDevice.getDisplayDeviceInfoLocked()",
            "com.android.server.display.MagnifierDevice.mCurrentDisplayId",
            "com.android.server.display.MagnifierDevice.mSurface",
            "com.android.server.display.MagnifierDevice.getDisplayTokenLocked()",
            "com.android.server.display.MagnifierDevice.mPolicy",
            "com.android.server.display.MagnifierDevice.DEBUG",
            "com.android.server.display.MagnifierDevice.setSurface(android.view.Surface)",
            "com.android.server.display.MagnifierDevice.mInfo",
            "com.android.server.display.MagnifierDevice.setSurfaceInTransactionLocked(android.view.Surface)",
            "com.android.server.display.MagnifierDevice.MagnifierDevice(com.android.server.display.DisplayAdapter, android.os.IBinder, android.view.Surface, java.lang.String, com.android.server.display.MagnifierDisplayPolicy, int)",
            "com.android.server.display.MagnifierDevice.performTraversalInTransactionLocked()",
            "com.android.server.display.MagnifierDevice.TAG",
            "com.android.server.display.MagnifierDevice.mName"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pDeviceList.getDeviceList()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pDeviceList",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$11.onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)",
            "com.android.server.display.WifiDisplayController$11.WifiDisplayController$11(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$11.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.display.WifiDisplayController$20.WifiDisplayController$20(com.android.server.display.WifiDisplayController)",
            "com.android.server.display.WifiDisplayController$20.onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)",
            "com.android.server.display.WifiDisplayController$20.this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.net.wifi.p2p.WifiP2pInfo.groupOwnerAddress",
            "android.net.wifi.p2p.WifiP2pInfo.isGroupOwner"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pInfo",
          "change_type": 2
        }
      ],
      "name": "com.android.server.display.ss"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateKidsMode$KidsModeObserver.onChange(boolean)",
            "com.android.server.cocktailbar.mode.PrivateKidsMode$KidsModeObserver.this$0",
            "com.android.server.cocktailbar.mode.PrivateKidsMode$KidsModeObserver.PrivateKidsMode$KidsModeObserver(com.android.server.cocktailbar.mode.PrivateKidsMode, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKidsMode$KidsModeObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateKidsMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.mKidsModeObserver",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.access$000()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.PrivateKidsMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.mListener",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.access$100()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.getModeId()",
            "com.android.server.cocktailbar.mode.PrivateKidsMode.renewMode(int)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKidsMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode$AuthLockObserver.PrivateAuthLockMode$AuthLockObserver(com.android.server.cocktailbar.mode.PrivateAuthLockMode, android.os.Handler)",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode$AuthLockObserver.this$0",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode$AuthLockObserver.onChange(boolean)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateAuthLockMode$AuthLockObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.access$000()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.PrivateAuthLockMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.renewMode(int)",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.mListener",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.access$100()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.getModeId()",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.mAuthLockObserver",
            "com.android.server.cocktailbar.mode.PrivateAuthLockMode.DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateAuthLockMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateCarMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateCarMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateCarMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateCarMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateCarMode.PrivateCarMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateCarMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "com.android.server.cocktailbar.mode.PrivateCarMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateCarMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateCarMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateCarMode.static {}"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateCarMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.COCKTAIL_BAR_CLASS_NAME",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.PrivateEmergencyMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.COCKTAIL_BAR_PACKAGE_NAME",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateEmergencyMode.isEnableMode()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateEmergencyMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.NormalMode.renewMode(int)",
            "com.android.server.cocktailbar.mode.NormalMode.getCocktailType()",
            "com.android.server.cocktailbar.mode.NormalMode.getModeId()",
            "com.android.server.cocktailbar.mode.NormalMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.NormalMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.NormalMode.NormalMode()",
            "com.android.server.cocktailbar.mode.NormalMode.getModeName()",
            "com.android.server.cocktailbar.mode.NormalMode.getRegistrationType()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.NormalMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.mActivityManager",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.ACTION_LOCK_TASK_MODE",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.PrivateRestrictMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateRestrictMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateRestrictMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.getCocktailBarMode(java.lang.String)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.onSetModeForcely(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.resetMode(int, int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.restrictMode(boolean, int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_MODE_KNOX",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_MODE_PRIVATE_MODE",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mKnoxMode",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mPrivateModes",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.setMode(int, int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.refreshCocktailBarMode()",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.static {}",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.setupPrivateMode(com.android.server.cocktailbar.mode.CocktailBarMode)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_MODE_UNKNOWN",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.getCocktailBarMode(int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mListener",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.getCurrentModeId()",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_MODE_NORMAL",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.onResetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_MODE_KNOX_COM",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mNextPrivateModeId",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_TYPE_OVERLAY",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.CocktailBarModeManager(android.content.Context, com.android.server.cocktailbar.CocktailBarManagerServiceListener, android.content.BroadcastReceiver, android.os.Handler)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.DEBUG",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.isDisableCocktailBarMode(int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mNormalMode",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.getCocktailBarModeName(int)",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.TAG",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.COCKTAIL_TYPE_ALONE",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mCocktailBarModeId",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mContext",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.mPrivateModeMap",
            "com.android.server.cocktailbar.mode.CocktailBarModeManager.onSetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarModeManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.PrivateKioskMDMMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateKioskMDMMode.getDefinedCocktailType()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKioskMDMMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.PrivateMirroLinkMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.DEBUG",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateMirroLinkMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateMirroLinkMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.PrivateKnoxMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener, com.android.server.cocktailbar.CocktailBarManagerServiceListener)",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.TAG",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.mCurrentUserId",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.mServiceListener",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.mContext",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.static {}",
            "com.android.server.cocktailbar.mode.PrivateKnoxMode.DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKnoxMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.content.IntentFilter.match(android.content.ContentResolver, android.content.Intent, boolean, java.lang.String)",
            "android.content.IntentFilter.IntentFilter(java.lang.String)",
            "android.content.IntentFilter.getPriority()",
            "android.content.IntentFilter.countDataTypes()",
            "android.content.IntentFilter.getAutoVerify()",
            "android.content.IntentFilter.getDataSchemeSpecificPart(int)",
            "android.content.IntentFilter.addDataPath(java.lang.String, int)",
            "android.content.IntentFilter.writeToXml(org.xmlpull.v1.XmlSerializer)",
            "android.content.IntentFilter.addDataSchemeSpecificPart(java.lang.String, int)",
            "android.content.IntentFilter.countDataSchemes()",
            "android.content.IntentFilter.match(java.lang.String, java.lang.String, java.lang.String, android.net.Uri, java.util.Set, java.lang.String)",
            "android.content.IntentFilter.addDataAuthority(android.content.IntentFilter$AuthorityEntry)",
            "android.content.IntentFilter.countDataPaths()",
            "android.content.IntentFilter.hasExactDataType(java.lang.String)",
            "android.content.IntentFilter.hasAction(java.lang.String)",
            "android.content.IntentFilter.hasDataAuthority(android.content.IntentFilter$AuthorityEntry)",
            "android.content.IntentFilter.getDataType(int)",
            "android.content.IntentFilter.typesIterator()",
            "android.content.IntentFilter.hasDataSchemeSpecificPart(android.os.PatternMatcher)",
            "android.content.IntentFilter.setPriority(int)",
            "android.content.IntentFilter.addDataAuthority(java.lang.String, java.lang.String)",
            "android.content.IntentFilter.dump(android.util.Printer, java.lang.String)",
            "android.content.IntentFilter.addAction(java.lang.String)",
            "android.content.IntentFilter.addDataType(java.lang.String)",
            "android.content.IntentFilter.countCategories()",
            "android.content.IntentFilter.getDataPath(int)",
            "android.content.IntentFilter.actionsIterator()",
            "android.content.IntentFilter.addDataPath(android.os.PatternMatcher)",
            "android.content.IntentFilter.countDataAuthorities()",
            "android.content.IntentFilter.isVerified()",
            "android.content.IntentFilter.addCategory(java.lang.String)",
            "android.content.IntentFilter.matchAction(java.lang.String)",
            "android.content.IntentFilter.IntentFilter()",
            "android.content.IntentFilter.getDataScheme(int)",
            "android.content.IntentFilter.IntentFilter(android.content.IntentFilter)",
            "android.content.IntentFilter.getAction(int)",
            "android.content.IntentFilter.getHostsList()",
            "android.content.IntentFilter.countDataSchemeSpecificParts()",
            "android.content.IntentFilter.countActions()",
            "android.content.IntentFilter.schemesIterator()",
            "android.content.IntentFilter.addDataScheme(java.lang.String)",
            "android.content.IntentFilter.getDataAuthority(int)",
            "android.content.IntentFilter.hasDataScheme(java.lang.String)",
            "android.content.IntentFilter.getCategory(int)",
            "android.content.IntentFilter.hasCategory(java.lang.String)",
            "android.content.IntentFilter.hasDataPath(android.os.PatternMatcher)"
          ],
          "added": [],
          "name": "android.content.IntentFilter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "android.os.Debug.getCaller()",
            "android.os.Debug.saveDumpstate(java.lang.String)",
            "android.os.Debug.getMemInfo(long[])",
            "android.os.Debug.isProductShip()",
            "android.os.Debug.dumpNativeBacktraceToFile(int, java.lang.String)",
            "android.os.Debug.getPss(int, long[], long[])",
            "android.os.Debug.getCallers(int)",
            "android.os.Debug.getPssSwapPss(int, long[], long[])",
            "android.os.Debug.isDebuggerConnected()",
            "android.os.Debug.getCallers(int, java.lang.String)",
            "android.os.Debug.dumpResetReason(java.lang.String, java.lang.String)",
            "android.os.Debug.getMemoryInfo(int, android.os.Debug$MemoryInfo)"
          ],
          "added": [],
          "name": "android.os.Debug",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.CocktailBarManagerServiceListener.onSetMode(int, int, java.lang.String, int)",
            "com.android.server.cocktailbar.CocktailBarManagerServiceListener.onSwitchUser(int, int, int, int, int, android.os.IRemoteCallback)",
            "com.android.server.cocktailbar.CocktailBarManagerServiceListener.onUnsetMode(int, int, java.lang.String)",
            "com.android.server.cocktailbar.CocktailBarManagerServiceListener.onRestrictMode(boolean, int)",
            "com.android.server.cocktailbar.CocktailBarManagerServiceListener.onResetMode(int, int, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.CocktailBarManagerServiceListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.CocktailBarMode.COCKTAIL_TYPE_UNKNOWN",
            "com.android.server.cocktailbar.mode.CocktailBarMode.renewMode(int)",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_RESET",
            "com.android.server.cocktailbar.mode.CocktailBarMode.REGISTRATION_TYPE_NONE",
            "com.android.server.cocktailbar.mode.CocktailBarMode.getModeName()",
            "com.android.server.cocktailbar.mode.CocktailBarMode.REGISTRATION_TYPE_CONTENT_OBSERVER",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_RESTRICT_OFF",
            "com.android.server.cocktailbar.mode.CocktailBarMode.getModeId()",
            "com.android.server.cocktailbar.mode.CocktailBarMode.REGISTRATION_TYPE_BROADCAST_RECEIVER",
            "com.android.server.cocktailbar.mode.CocktailBarMode.getRegistrationType()",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_SET",
            "com.android.server.cocktailbar.mode.CocktailBarMode.COCKTAIL_BAR_TYPE_DISABLE",
            "com.android.server.cocktailbar.mode.CocktailBarMode.COCKTAIL_BAR_TYPE_ENABLE",
            "com.android.server.cocktailbar.mode.CocktailBarMode.COCKTAIL_TYPE_ALONE",
            "com.android.server.cocktailbar.mode.CocktailBarMode.getCocktailBarType()",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_INVALID",
            "com.android.server.cocktailbar.mode.CocktailBarMode.COCKTAIL_TYPE_OVERLAY",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_RESTRICT_ON",
            "com.android.server.cocktailbar.mode.CocktailBarMode.getCocktailType()",
            "com.android.server.cocktailbar.mode.CocktailBarMode.PRIVATE_MODE_ACTION_TYPE_NONE",
            "com.android.server.cocktailbar.mode.CocktailBarMode.onBroadcastReceived(android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mPrivateModeName",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.AbsPrivateMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getModeName()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.AbsPrivateMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.unregisterBroadcastReceiver(android.content.BroadcastReceiver)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mCocktailType",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getRegistrationType()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mRegistratonType",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getCocktailType()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.AbsPrivateMode(android.content.Context, int, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getModeId()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.renewMode(int)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mListener",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getDefinedCocktailType()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.onBroadcastReceived(android.content.Intent)",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mContext",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.isEnableMode()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.getDefinedPrivateModeName()",
            "com.android.server.cocktailbar.mode.AbsPrivateMode.mPrivateModeId"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.AbsPrivateMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener.onSetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener.onSetModeForcely(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener.getCurrentModeId()",
            "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener.onResetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener",
          "change_type": 2
        }
      ],
      "name": "com.android.server.cocktailbar.mode.ss"
    }
  ],
  "name": "android_framework"
}