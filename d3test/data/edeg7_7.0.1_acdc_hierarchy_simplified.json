{
  "children": [
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "onLooperPrepared()",
            "this$0",
            "LightsService$1(com.android.server.lights.LightsService, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "SVCLED_MODE_CHARGING",
            "mUseSoftwareAutoBrightness",
            "SVCLED_MODE_OTHERS",
            "access$2602(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "mLightSensor",
            "mUpdateSvcLEDDelay",
            "access$3000(com.android.server.lights.LightsService)",
            "finalize()",
            "mLights",
            "LIGHT_SEC_FLASH_CHARGING",
            "SVCLED_MODE_FULLY_CHARGED",
            "SVCLED_OFF",
            "access$1702(com.android.server.lights.LightsService, boolean)",
            "SVCLED_OTHERS",
            "systemReady()",
            "access$1200()",
            "SVCLED_CHARGING",
            "access$2000()",
            "access$002(com.android.server.lights.LightsService, boolean)",
            "access$600(com.android.server.lights.LightsService, int, int, int, int, int, boolean)",
            "LIGHT_SEC_FLASH",
            "LightsService(android.content.Context)",
            "mSvcLedMode",
            "mCoverManager",
            "LIGHT_SEC_FLASH_LOW_BATTERY",
            "access$1400(com.android.server.lights.LightsService)",
            "SVCLED_MODE_LOW_BATTERY",
            "mCoverNotiLight",
            "TAG_API",
            "clearSvcLedStateLocked(int)",
            "mCoverStateListener",
            "mCoverType",
            "SVCLED_LED_SERVICE_MASK",
            "mLightListener",
            "SVCLED_MODE_COUNT",
            "access$800(com.android.server.lights.LightsService)",
            "LIGHT_SEC_FLASH_CHARGING_ERROR",
            "access$1302(com.android.server.lights.LightsService, boolean)",
            "mInitializedWakeLockPath",
            "access$1800()",
            "handleForcedSvcLEDTask()",
            "initializeWakeLockPath()",
            "access$802(com.android.server.lights.LightsService, com.android.server.lights.LightsService$SvcLEDHandler)",
            "mSvcLedColor",
            "publishLocalService(java.lang.Class, java.lang.Object)",
            "mUseLEDAutoBrightness",
            "mCoverBatteryLight",
            "fileWriteInt(java.lang.String, int)",
            "model",
            "mWakeLockPath",
            "access$3300(com.android.server.lights.LightsService)",
            "access$500(com.android.server.lights.LightsService)",
            "init_native()",
            "TAG_LED",
            "access$2700(com.android.server.lights.LightsService)",
            "access$302(com.android.server.lights.LightsService, boolean)",
            "access$2502(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "acquireWakeLockForLED()",
            "mService",
            "access$100()",
            "access$200(com.android.server.lights.LightsService)",
            "SVCLED_BATTERY_MASK",
            "SVCLED_MODE_CHARGING_ERROR",
            "mSensorManager",
            "getLocalService(java.lang.Class)",
            "SVCLED_LED_SERVICE",
            "mInitCompleteForSvcLED",
            "static {}",
            "mSvcLedState",
            "SVCLED_MISSED_NOTIFICATION",
            "PRODUCT_NAME",
            "mSvcLedOnMS",
            "access$900(com.android.server.lights.LightsService)",
            "SUPPORT_LED_INDICATOR",
            "mUsePatternLED",
            "TAG",
            "access$1902(com.android.server.lights.LightsService, boolean)",
            "finalize_native(long)",
            "setLight_native(long, int, int, int, int, int, int)",
            "access$000(com.android.server.lights.LightsService)",
            "mSvcLEDThread",
            "setSvcLedStateLocked(int, int, int, int, int, boolean)",
            "access$700(com.android.server.lights.LightsService, boolean)",
            "mWakeLockAcquired",
            "access$2400(com.android.server.lights.LightsService, java.lang.Class)",
            "access$1300(com.android.server.lights.LightsService)",
            "mCoverOpened",
            "mH",
            "onBootPhase(int)",
            "mWakeUnlockPath",
            "releaseWakeLockForLED()",
            "mNewWakeLockPaths",
            "mLedLowPower",
            "access$2500(com.android.server.lights.LightsService)",
            "SVCLED_MODE_LED_SERVICE",
            "access$1700(com.android.server.lights.LightsService)",
            "mSvcLEDHandler",
            "access$1502(com.android.server.lights.LightsService, boolean)",
            "access$3100(com.android.server.lights.LightsService)",
            "enableSvcLEDLightSensorLocked(boolean)",
            "access$1100(com.android.server.lights.LightsService, int)",
            "MSG_FORCEDSVCLEDTASK",
            "access$202(com.android.server.lights.LightsService, int)",
            "initCoverState()",
            "fileWriteString(java.lang.String, java.lang.String)",
            "access$400(com.android.server.lights.LightsService)",
            "mAlarmManagerForSvcLED",
            "LIGHT_SEC_FLASH_MISSED_NOTIFICATION",
            "access$1900(com.android.server.lights.LightsService)",
            "access$2600(com.android.server.lights.LightsService)",
            "access$2800(com.android.server.lights.LightsService, int)",
            "getLight(int)",
            "access$1000(com.android.server.lights.LightsService)",
            "access$300(com.android.server.lights.LightsService)",
            "SVCLED_MODE_MISSED_NOTIFICATION",
            "SVCLED_CHARGING_ERROR",
            "SVCLED_LOW_BATTERY",
            "SVCLED_NOTIFICATIONS_MASK",
            "onStart()",
            "mUpdateSvcLEDPendingIntent",
            "mLedLowPowerPath",
            "access$2900(com.android.server.lights.LightsService)",
            "SVCLED_FULLY_CHARGED",
            "mPrevSvcLedState",
            "access$1600(com.android.server.lights.LightsService)",
            "isLightSensorEnabled",
            "NOVEL_PROJECT",
            "mLastSvcLedId",
            "ACTION_UPDATE_SVC_LED",
            "DEBUG",
            "access$2702(com.android.server.lights.LightsService, com.android.server.lights.Light)",
            "access$902(com.android.server.lights.LightsService, int)",
            "mContext",
            "mIsLEDChanged",
            "setSvcLedLightLocked(int)",
            "mDelayForcedSvcLEDTask",
            "mNativePointer",
            "mSvcLedOffMS",
            "callerInfoToString()",
            "LIGHT_SEC_FLASH_FULLY_CHARGED",
            "mCoverServLight"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getLight(int)",
            "LightsService$2(com.android.server.lights.LightsService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSensorChanged(android.hardware.SensorEvent)",
            "LightsService$5(com.android.server.lights.LightsService)",
            "onAccuracyChanged(android.hardware.Sensor, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "sendMessage(android.os.Message)",
            "LightsService$SvcLEDHandler(com.android.server.lights.LightsService, android.os.Looper)",
            "handleMessage(android.os.Message)",
            "sendMessageDelayed(android.os.Message, long)",
            "hasMessages(int)",
            "obtainMessage(int)",
            "removeMessages(int)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$SvcLEDHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LightsService$4(com.android.server.lights.LightsService)",
            "onCoverStateChanged(com.samsung.android.cover.CoverState)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "this$0",
            "LightsService$3(com.android.server.lights.LightsService)"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LightsService$SvcLEDReceiver(com.android.server.lights.LightsService, com.android.server.lights.LightsService$1)",
            "LightsService$SvcLEDReceiver(com.android.server.lights.LightsService)",
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$SvcLEDReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LightsService$LightImpl(com.android.server.lights.LightsService, int, com.android.server.lights.LightsService$1)",
            "mMode",
            "pulse()",
            "stopFlashing()",
            "setBrightness(int)",
            "mOnMS",
            "setColor(int)",
            "pulse(int, int)",
            "access$3200(com.android.server.lights.LightsService$LightImpl, int, int, int, int, int)",
            "mColor",
            "mId",
            "access$2200(com.android.server.lights.LightsService$LightImpl)",
            "mOffMS",
            "setFlashing(int, int, int, int)",
            "mIsIDUsingPatternLED",
            "LightsService$LightImpl(com.android.server.lights.LightsService, int)",
            "setLightLocked(int, int, int, int, int)",
            "setBrightness(int, int)",
            "mFlashing",
            "this$0",
            "turnOff()"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsService$LightImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LIGHT_ID_ATTENTION",
            "LIGHT_ID_BUTTONS_SUB",
            "LIGHT_ID_BLUETOOTH",
            "LIGHT_ID_KEYBOARD",
            "LIGHT_ID_NOTIFICATIONS",
            "LIGHT_ID_LED_SERVICE",
            "LightsManager()",
            "LIGHT_ID_BUTTONS",
            "LIGHT_ID_VOLUME",
            "LIGHT_ID_BACKLIGHT",
            "LIGHT_ID_BACKLIGHT_SUB",
            "LIGHT_ID_CONNECTIVITY",
            "LIGHT_ID_COUNT",
            "getLight(int)",
            "LIGHT_ID_BATTERY",
            "LIGHT_ID_WIFI"
          ],
          "added": [],
          "name": "com.android.server.lights.LightsManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LIGHT_FLASH_TIMED",
            "setBrightness(int)",
            "BRIGHTNESS_MODE_USER",
            "Light()",
            "setBrightness(int, int)",
            "BRIGHTNESS_MODE_SENSOR",
            "LIGHT_FLASH_HARDWARE",
            "pulse(int, int)",
            "setColor(int)",
            "turnOff()",
            "pulse()",
            "LIGHT_FLASH_NONE",
            "setFlashing(int, int, int, int)"
          ],
          "added": [],
          "name": "com.android.server.lights.Light",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getLooper()",
            "HandlerThread(java.lang.String)",
            "HandlerThread(java.lang.String, int)",
            "interrupt()",
            "run()",
            "getId()",
            "start()"
          ],
          "added": [],
          "name": "android.os.HandlerThread",
          "change_type": 2
        }
      ],
      "name": "com.android.server.lights"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "SmartCoverAppController$1()"
          ],
          "added": [],
          "name": "com.android.server.cover.SmartCoverAppController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "smartCoverAttachStateChanged(boolean, java.lang.String)",
            "mContext",
            "PATH_PLAYSTORE",
            "SmartCoverAppController(android.content.Context)",
            "mIsRegisterReceiver",
            "TAG",
            "SMARTCOVER_CATEGORY",
            "static {}",
            "access$100()",
            "SAFE_DEBUG",
            "access$200()",
            "mSmartCoverPackageName",
            "startSmartCoverService()",
            "PATH_SAMSUNGAPPS",
            "startCoverService(boolean, java.lang.String)",
            "mSmartCoverServiceIntent",
            "access$000()",
            "stopSmartCoverService()",
            "controlCoverService(boolean)",
            "packageChangeIntentReceiver",
            "getSmartCoverPackageName(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cover.SmartCoverAppController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CoverTestModeUtils$2(com.android.server.cover.CoverTestModeUtils, android.os.Handler)",
            "onChange(boolean, android.net.Uri)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "this$0",
            "CoverTestModeUtils$1(com.android.server.cover.CoverTestModeUtils)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$200(com.android.server.cover.CoverTestModeUtils)",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "SHIPPED",
            "access$400(com.android.server.cover.CoverTestModeUtils, int)",
            "mCallback",
            "CoverTestModeUtils(android.content.Context, com.android.server.cover.CoverTestModeUtils$OnCoverTestModeChanged)",
            "TEST_MODE_NONE",
            "getTestModeFromSetting()",
            "access$300(com.android.server.cover.CoverTestModeUtils)",
            "static {}",
            "COVER_TEST_MODE",
            "access$000()",
            "mTestModeChangeHandler",
            "mObserver",
            "sCurrentTestMode",
            "mContext",
            "access$100(com.android.server.cover.CoverTestModeUtils)",
            "getTestCoverType()",
            "TAG",
            "updateCoverTestMode(int)",
            "isTestMode()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onCoverTestModeChanged(int, boolean)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverTestModeUtils$OnCoverTestModeChanged",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "CoverDisabler(android.os.Looper, android.content.Context)",
            "mCoverManagerDisabled",
            "mHandler",
            "mLock",
            "isCoverManagerDisabled()",
            "disableCoverManager(boolean, android.os.IBinder, java.lang.String)",
            "SAFE_DEBUG",
            "mPowerManager",
            "manageDisableListLocked(boolean, android.os.IBinder, java.lang.String)",
            "gatherDisableLocked()",
            "handleDisableCoverManagerLocked(boolean)",
            "MSG_DISABLE_COVER_MANAGER",
            "disableCoverManagerLocked(boolean, android.os.IBinder, java.lang.String)",
            "mDisableCoverManagerWakeLock",
            "TAG",
            "access$100(com.android.server.cover.CoverDisabler, boolean, android.os.IBinder, java.lang.String)",
            "mContext",
            "mDisableRecords",
            "access$000(com.android.server.cover.CoverDisabler, boolean)",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CoverDisabler$DisableRecord(com.android.server.cover.CoverDisabler)",
            "token",
            "disable",
            "CoverDisabler$DisableRecord(com.android.server.cover.CoverDisabler, com.android.server.cover.CoverDisabler$1)",
            "this$0",
            "binderDied()",
            "pkg"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$DisableRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "CoverDisabler$CoverDisablerHandler(com.android.server.cover.CoverDisabler, android.os.Looper)",
            "this$0",
            "sendMessage(android.os.Message)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverDisabler$CoverDisablerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CoverHideAnimator$3(com.android.server.cover.CoverHideAnimator)",
            "this$0",
            "onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "AnimatorListenerAdapter()",
            "onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "android.animation.AnimatorListenerAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "handleMessage(android.os.Message)",
            "CoverHideAnimator$1(com.android.server.cover.CoverHideAnimator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "MSG_SEND_COVER_CANCEL_ANIMATION",
            "mAnimationInterpolator",
            "handleStartAnimation()",
            "FADE_OUT_ANIMATION_START_DELAY",
            "CoverHideAnimator(android.content.Context)",
            "removeViewFromWindow()",
            "mFadeInAnimatorListener",
            "access$700(com.android.server.cover.CoverHideAnimator)",
            "access$300(com.android.server.cover.CoverHideAnimator)",
            "FADE_IN_ANIMATION_DURATION",
            "FADE_OUT_ANIMATION_DURATION",
            "access$600(com.android.server.cover.CoverHideAnimator)",
            "access$400(com.android.server.cover.CoverHideAnimator)",
            "mCallbackRunnable",
            "mWindowLP",
            "TAG",
            "cancelHideAnimation()",
            "access$500(com.android.server.cover.CoverHideAnimator)",
            "access$302(com.android.server.cover.CoverHideAnimator, java.lang.Runnable)",
            "MSG_SEND_COVER_START_ANIMATION",
            "mFadeOutAnimatorListener",
            "access$000(com.android.server.cover.CoverHideAnimator)",
            "access$100(com.android.server.cover.CoverHideAnimator)",
            "access$200(com.android.server.cover.CoverHideAnimator)",
            "access$800(com.android.server.cover.CoverHideAnimator)",
            "mHandler",
            "handleCancelAnimation()",
            "mWm",
            "mCoverHideView",
            "mContext",
            "playCoverHideAnimation(java.lang.Runnable)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "onAnimationEnd(android.animation.Animator)",
            "CoverHideAnimator$2(com.android.server.cover.CoverHideAnimator)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverHideAnimator$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.animation.TimeInterpolator",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "onCoverAppCovered(boolean)",
            "updateCoverState(com.samsung.android.cover.CoverState)",
            "onUnbindSViewCoverService()",
            "onBindSViewCoverService()",
            "SViewCoverBaseServiceDelegate(android.content.Context)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.SViewCoverBaseServiceDelegate",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "StateNotifier(android.os.Looper, android.content.Context)",
            "handleSendCoverAttachState(boolean)",
            "updateCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState, boolean)",
            "DEBUG",
            "createCoverServiceConnectionLocked()",
            "mContext",
            "mSViewCoverBaseServiceDelegate",
            "MSG_SEND_COVER_ATTACH_STATE",
            "checkSystemFeatureForCoverType(com.samsung.android.cover.CoverState)",
            "registerListenerCallback(android.os.IBinder, android.content.ComponentName, int)",
            "updatePowerStateLocked(com.samsung.android.cover.CoverState)",
            "SAFE_DEBUG",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "mAttached",
            "sendCoverAttachStateLocked(boolean)",
            "mSendCoverVerifyAndAttachStateWakeLock",
            "TYPE_COVER_WINDOW_STATE_LISTENER",
            "access$300(com.android.server.cover.StateNotifier)",
            "access$400(com.android.server.cover.StateNotifier)",
            "mLock",
            "MSG_UPDATE_SVIEW_COVER_STATE",
            "updateSViewCoverServiceLocked(com.samsung.android.cover.CoverState)",
            "MSG_SEND_COVER_SWITCH_STATE",
            "handleSendCoverSwitchState(com.samsung.android.cover.CoverState, boolean)",
            "mSendCoverSwitchStateWakeLock",
            "onCoverAppCovered(boolean)",
            "unregisterCallback(android.os.IBinder)",
            "sendCoverSwitchStateLocked(com.samsung.android.cover.CoverState, boolean)",
            "TAG",
            "access$200(com.android.server.cover.StateNotifier, com.samsung.android.cover.CoverState)",
            "mHandler",
            "access$100(com.android.server.cover.StateNotifier, boolean)",
            "updateCoverSwitchStateLocked(com.samsung.android.cover.CoverState, boolean)",
            "handleUpdateSViewCoverService(com.samsung.android.cover.CoverState)",
            "mListeners",
            "mRunnableForSviewCoverWakeLock",
            "TYPE_STATE_LISTENER",
            "mUpdateSViewCoverWakeLock",
            "access$000(com.android.server.cover.StateNotifier, com.samsung.android.cover.CoverState, boolean)",
            "TYPE_COVER_STATE_LISTENER",
            "updateSViewCoverServiceConnectionLocked(boolean)",
            "mPowerManager",
            "mSendCoverStateWakeLock"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "StateNotifier$1(com.android.server.cover.StateNotifier)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "postDelayed(java.lang.Runnable, long)",
            "sendMessage(android.os.Message)",
            "this$0",
            "StateNotifier$StateNotifierHandler(com.android.server.cover.StateNotifier, android.os.Looper)",
            "handleMessage(android.os.Message)",
            "removeCallbacks(java.lang.Runnable)"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$StateNotifierHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "removeMessages(int)",
            "hasCallbacks(java.lang.Runnable)",
            "sendMessageDelayed(android.os.Message, long)",
            "this$0",
            "LedCoverController$LedCoverControllerHandler(com.android.server.cover.LedCoverController, android.os.Looper)",
            "hasMessages(int)",
            "sendMessage(android.os.Message)",
            "removeCallbacks(java.lang.Runnable)",
            "postDelayed(java.lang.Runnable, long)"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController$LedCoverControllerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getSerialManager(android.content.Context)",
            "mIsLedCoverPowered",
            "handleSendDataToLedCover(int, byte[])",
            "LedCoverController(android.os.Looper, android.content.Context)",
            "initializeCoverControlPath(android.content.Context)",
            "LED_COMMAND_BATTERY_CHARGING",
            "LED_COMMAND_VOLUME",
            "LED_COMMAND_INCOMING_CALL",
            "mLedCoverPowerPath",
            "powerControlLedCover(boolean)",
            "MSG_SEND_LED_DATA",
            "LED_COMMAND_BATTERY_CHARGING_END",
            "mIsLedOn",
            "sendDataToLedCover(int, byte[])",
            "LED_COMMAND_BRIGHTNESS",
            "LED_COMMAND_CALL_END",
            "LED_COMMAND_CLOCK",
            "updateLedCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "LED_COMMAND_REQ_LED_STATUS",
            "LED_COMMAND_MISSED_CALL_MSG",
            "mContext",
            "mSendLedDataWakeLock",
            "mIsLedCoverAttached",
            "LED_COMMAND_LED_OFF",
            "LED_COMMAND_LOW_BATTERY_ALERT",
            "mCoverColor",
            "LED_COMMAND_INDICATOR",
            "access$100(com.android.server.cover.LedCoverController, int, byte[])",
            "DEBUG",
            "LED_COMMAND_PEDOMETER",
            "mSerialManager",
            "mUpdateAttachStateWakeLock",
            "writeDataViaSerial(java.lang.String, byte[])",
            "access$400(com.android.server.cover.LedCoverController)",
            "LED_COMMAND_COLOR",
            "LED_COMMAND_LED_ON",
            "mHandler",
            "mLedCoverUARTPath",
            "MSG_UPDATE_COVER_ATTACH_STATE",
            "LED_COMMAND_POWER_ON_OFF",
            "access$300(com.android.server.cover.LedCoverController)",
            "isCoverPowered()",
            "LED_COMMAND_MUSIC",
            "mLedOnOffWakeLock",
            "mPowerManager",
            "MSG_LED_OFF_BY_SELF",
            "TAG",
            "SAFE_DEBUG",
            "LED_COMMAND_ALARM",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "sendPowerKeyToCover()",
            "access$002(com.android.server.cover.LedCoverController, boolean)",
            "access$200(com.android.server.cover.LedCoverController, boolean)",
            "isCoverAttached()",
            "mRunnable",
            "handleUpdateLedCoverAttachState(boolean)"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "LedCoverController$1(com.android.server.cover.LedCoverController)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cover.LedCoverController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getSerialPorts()",
            "openSerialPort(java.lang.String, int)"
          ],
          "added": [],
          "name": "android.hardware.SerialManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "close()",
            "write(java.nio.ByteBuffer, int)",
            "getName()"
          ],
          "added": [],
          "name": "android.hardware.SerialPort",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "NfcLedCoverController$CallDurationTask(com.android.server.cover.NfcLedCoverController, com.android.server.cover.NfcLedCoverController$1)",
            "prevSecond",
            "NfcLedCoverController$CallDurationTask(com.android.server.cover.NfcLedCoverController)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$CallDurationTask",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "sendMessage(android.os.Message)",
            "removeMessages(int)",
            "sendMessageDelayed(android.os.Message, long)",
            "this$0",
            "NfcLedCoverController$NfcLedCoverControllerHandler(com.android.server.cover.NfcLedCoverController, android.os.Looper)",
            "handleMessage(android.os.Message)",
            "hasMessages(int)",
            "sendEmptyMessage(int)"
          ],
          "added": [
            "removeCallbacksAndMessages(java.lang.Object)"
          ],
          "name": "com.android.server.cover.NfcLedCoverController$NfcLedCoverControllerHandler",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "CMD_LED_BATTERY_CHARGING_WIRELESS",
            "access$1400(com.android.server.cover.NfcLedCoverController)",
            "EVENT_TYPE_ALARM",
            "mPollTouchWakeLock",
            "updateNfcLedCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "CMD_LED_CALL_END",
            "CMD_LED_CALL_INCOMING",
            "CMD_LED_MUSIC",
            "CMD_INTERNAL_LED_REPLY",
            "CMD_LED_CLOCK_TIME_TICK",
            "scheduleLedOffTimerout(int, byte[])",
            "mTouchResponseWakeLock",
            "access$1500(com.android.server.cover.NfcLedCoverController, byte[])",
            "mPrevCommand",
            "CMD_LED_VOLUME",
            "MSG_SEND_NFC_LED_DATA_DELAYED",
            "mSendDataLock",
            "MSG_SEND_NFC_LED_DATA",
            "CMD_LED_FACTORY_MODE",
            "CMD_LED_NEW_MESSAGE",
            "sendCurrentClockCommand()",
            "DEBUG",
            "NfcLedCoverController(android.os.Looper, android.content.Context)",
            "SAFE_DEBUG",
            "access$600(com.android.server.cover.NfcLedCoverController)",
            "access$100(com.android.server.cover.NfcLedCoverController)",
            "EVENT_RESULT_REJECT",
            "handleSendPowerKeyToCover()",
            "getCallDuration()",
            "mResponsePattern",
            "MSG_SEND_POWER_KEY_TO_COVER",
            "RESPONSE_COMMAND_POS",
            "MSG_LED_OFF_BY_SELF",
            "access$200(com.android.server.cover.NfcLedCoverController, int, byte[])",
            "registerNfcTouchListenerCallback(int, android.os.IBinder, android.content.ComponentName)",
            "EVENT_TYPE_MAX",
            "access$700(com.android.server.cover.NfcLedCoverController, int)",
            "mPowerManager",
            "CMD_LED_CLEAR_ONGOING_EVENT",
            "isValidCoverStartData(byte[])",
            "mLedCoverTransceiveRetryCount",
            "access$1300(com.android.server.cover.NfcLedCoverController)",
            "handleClearOngoingEvent(int)",
            "mCallStartTime",
            "LED_COVER_RETRY_DONE_INTENT_ACTION",
            "mIsLedOn",
            "EVENT_TYPE_TIMER",
            "mContext",
            "handleInvalidCommand(int, byte[], byte[])",
            "TAG",
            "access$500(com.android.server.cover.NfcLedCoverController)",
            "CMD_LED_ALARM",
            "MSG_NFC_LED_HANDLE_EVENT_RESPONSE",
            "handleSendDataToNfcLedCover(int, byte[])",
            "mSendLedDataWakeLock",
            "CMD_LED_CLOCK",
            "RESPONSE_LEN_POS",
            "mLedOnOffWakeLock",
            "mCallDurationTimer",
            "getListenerTypeForCommand(int, byte[])",
            "getLenByteValue(byte[])",
            "isValidResponse(int, int, byte[])",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "unRegisterNfcTouchListenerCallback(android.os.IBinder)",
            "access$900(com.android.server.cover.NfcLedCoverController, int)",
            "sendDataToNfcLedCover(int, byte[])",
            "mPollingTouchEvents",
            "access$300(com.android.server.cover.NfcLedCoverController)",
            "CMD_INTERNAL_LED_CALL_INPROGRESS",
            "handlePollEventTouch(int)",
            "sendPowerKeyToCover()",
            "mLedCoverStartRetryCount",
            "stopCallInProgressDisplayTimer()",
            "CMD_INTERNAL_LED_ACCEPT_REJECT",
            "access$1100(com.android.server.cover.NfcLedCoverController)",
            "testCount",
            "mOngoingEvent",
            "mHandler",
            "setOngoingEvent(int, byte[])",
            "MSG_NFC_LED_POLL_EVENT_TOUCH",
            "CMD_LED_OFF",
            "LED_COVER_RETRY_DELAY",
            "static {}",
            "mCallInProgressDisplay",
            "getByteDataString(byte[])",
            "access$800(com.android.server.cover.NfcLedCoverController, int, int)",
            "access$402(com.android.server.cover.NfcLedCoverController, int)",
            "buildNfcCoverLedData(int, byte[])",
            "isSingleMissedEvent(byte[])",
            "EVENT_TYPE_CALL",
            "CMD_LED_INDICATOR",
            "MSG_CLEAR_ONGOING_EVENT",
            "LED_COVER_RETRY_COUNT_MAX",
            "mListeners",
            "clearOngoingEvent()",
            "CMD_LED_POWER_ON",
            "EVENT_RESULT_ACCEPT",
            "TEST",
            "EVENT_TYPE_SCHEDULE",
            "mIsLedCoverAttached",
            "EVENT_TOUCH_POLL_INTERVAL",
            "CMD_LED_BATTERY_CHARGING",
            "isFinishedTouchReply(byte[])",
            "mCallDurationUpdateTask",
            "mNfcAdapter",
            "startCallInProgressDisplayTimer(byte[])",
            "CMD_LED_BATTERY_LOW",
            "CMD_LED_BATTERY_CHARGING_WIRELESS_DELAY",
            "access$000(com.android.server.cover.NfcLedCoverController)",
            "access$1200(com.android.server.cover.NfcLedCoverController)",
            "handleEventResponse(int, int)",
            "tryStartLedCover()",
            "CMD_LED_CALL_INPROGRESS",
            "CMD_LED_MISSED_EVENT",
            "CMD_LED_VOICE_RECORDER"
          ],
          "added": [
            "mCallTimerLock",
            "notifyLedOffListeners(int)",
            "access$1600(com.android.server.cover.NfcLedCoverController, byte[])",
            "SYSTEM_EVENT_LED_OFF",
            "CMD_LED_VIDEO_CALL_INCOMING",
            "SYSTEM_EVENT_POWER_BUTTON_ON",
            "access$1402(com.android.server.cover.NfcLedCoverController, int)",
            "SYSTEM_EVENT_POWER_BUTTON_OFF",
            "EVENT_TYPE_SYSTEM_INTERNAL_EVENT",
            "access$1500(com.android.server.cover.NfcLedCoverController)"
          ],
          "name": "com.android.server.cover.NfcLedCoverController",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "data",
            "code",
            "toString()",
            "NfcLedCoverController$Command(com.android.server.cover.NfcLedCoverController, int, byte[])",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$Command",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.cover.NfcLedCoverController$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "format(java.lang.CharSequence, long)",
            "is24HourFormat(android.content.Context)",
            "is24HourFormat(android.content.Context, int)",
            "format(java.lang.CharSequence, java.util.Date)",
            "getBestDateTimePattern(java.util.Locale, java.lang.String)"
          ],
          "added": [],
          "name": "android.text.format.DateFormat",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "CoverManagerService$5(com.android.server.cover.CoverManagerService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "CoverManagerService$3(com.android.server.cover.CoverManagerService)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CoverManagerService$1(com.android.server.cover.CoverManagerService)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "CoverManagerService$6(com.android.server.cover.CoverManagerService)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "notifyCoverSwitchStateChanged(long, boolean)",
            "COVER_OPEN",
            "mCoverTestModeUtils",
            "readTouchChannelCount()",
            "SERVICE_VERSION",
            "unregisterCallbackForExternal(android.os.IBinder)",
            "COVER_CLOSED",
            "mCoverState",
            "getVersion()",
            "mInputManager",
            "mSmartCoverAppController",
            "MOBILE_KEYBOARD_KOR",
            "updateCoverSwitchStateLocked(boolean)",
            "access$302(com.android.server.cover.CoverManagerService, boolean)",
            "sendCoverSwitchStateLocked(boolean, boolean)",
            "mCoverHideAnimator",
            "needToBoost()",
            "mWindowManager",
            "registerListenerCallbackForExternal(android.os.IBinder, android.content.ComponentName, int)",
            "onCoverAppCovered(boolean)",
            "sendDataToNfcLedCover(int, byte[])",
            "sendBackoffRequest(int, boolean)",
            "sendTouchRegionForExternal(byte[], int, int)",
            "notifyCoverAttachStateChanged(long, boolean)",
            "COVER_DETACH",
            "mAnimationStartCallback",
            "mPackageName",
            "mHandler",
            "checkNeedThread(byte[], int, int)",
            "unregisterCallback(android.os.IBinder, boolean)",
            "mNfcLedCoverController",
            "notifySmartCoverAttachStateChanged(long, boolean, com.samsung.android.cover.CoverState)",
            "updateCoverSwitchState(boolean, boolean)",
            "registerCallback(android.os.IBinder, android.content.ComponentName)",
            "sendCoverAttachStateLocked(boolean, com.samsung.android.cover.CoverState)",
            "mCalledByTestModule",
            "sendTouchRegion(byte[], int, int)",
            "updateCoverAttachState(boolean, boolean, com.samsung.android.cover.CoverState)",
            "updateCoverAttachState(boolean, boolean)",
            "systemReady()",
            "TRANSMIT_POWER_DEFAULT",
            "isThemeCover(java.lang.String)",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "CoverManagerService(android.content.Context, com.android.server.wm.WindowManagerService, com.android.server.input.InputManagerService)",
            "DEBUG",
            "mStateNotifier",
            "mCoverVerifier",
            "getCoverSwitchStateFromInputManager()",
            "mCoverManagerWhiteLists",
            "mPackageManager",
            "TRANSMIT_POWER_HALLIC_REST",
            "getCoverState(boolean)",
            "isCoverManagerDisabled()",
            "registerNfcTouchListenerCallback(int, android.os.IBinder, android.content.ComponentName)",
            "TAG",
            "disableCoverManager(boolean, android.os.IBinder, java.lang.String)",
            "access$000(com.android.server.cover.CoverManagerService)",
            "getCoverState()",
            "registerListenerCallback(android.os.IBinder, android.content.ComponentName, int)",
            "readTouchChannelCountForExternal()",
            "MOBILE_KEYBOARD_US",
            "access$200(com.android.server.cover.CoverManagerService)",
            "mLedCoverController",
            "mPowerManager",
            "COVER_ATTACH",
            "mCoverDisabler",
            "sendPowerKeyToCover()",
            "SAFE_DEBUG",
            "unregisterNfcTouchListenerCallback(android.os.IBinder)",
            "access$100(com.android.server.cover.CoverManagerService)",
            "TRANSMIT_POWER_HALLIC_LED",
            "mContext",
            "mThread",
            "registerListenerCallback(android.os.IBinder, android.content.ComponentName, int, boolean)",
            "sendDataToCover(int, byte[])",
            "unregisterCallback(android.os.IBinder)",
            "getCoverAttachStateFromInputManager()",
            "mSystemReady",
            "mNeedBackOffRequest",
            "mOnCoverTestModeCallback",
            "COVER_ABSENT",
            "getCoverStateForExternal()",
            "sendCoverSwitchStateLocked(boolean, boolean, boolean, boolean)",
            "setCoverPackage(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isMatchedSignature(android.content.pm.Signature[], int)",
            "hasSamsungKey(android.content.pm.Signature[])",
            "SIGNATURE_MSC",
            "setupSignaturesMap()",
            "SIGNATURE_MOBILEDESK",
            "mPrefixPackage",
            "getPackageForPid(android.content.Context, int)",
            "SIGNATURE_SAMSUNG_APPLICATION",
            "setupWhiteList()",
            "SIGNATURE_LGUUWA",
            "isAllowedToUse(android.content.Context, int, int)",
            "SIGNATURE_SHEALTH",
            "TAG",
            "SAFE_DEBUG",
            "SIGNATURE_CHATONBLUE",
            "mWhiteList",
            "mSignaturesMap",
            "SIGNATURE_MAX",
            "static {}",
            "CoverManagerWhiteLists()",
            "SIGNATURE_SOUNDPHONE",
            "getSignatures(int)",
            "SIGNATURE_SAMSUNG_SHARED",
            "setPrefixPackage()",
            "getInstance()",
            "sInstance",
            "SIGNATURE_WHOWHO",
            "SIGNATURE_AMC_1",
            "convertPackageName(java.lang.String)",
            "SIGNATURE_AMC_2",
            "SIGNATURE_SAMSUNG_PLATFORM"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerWhiteLists",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onCoverTestModeChanged(int, boolean)",
            "this$0",
            "CoverManagerService$2(com.android.server.cover.CoverManagerService)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "this$0",
            "CoverManagerService$CoverManagerHandler(com.android.server.cover.CoverManagerService, android.os.Looper)",
            "post(java.lang.Runnable)",
            "postDelayed(java.lang.Runnable, long)"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$CoverManagerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mPreDefArray",
            "SMART_COVER_CMD_CHANGE",
            "start()",
            "SMART_COVER_CMD_MODEON",
            "sysfsWrite(java.lang.String, java.lang.String)",
            "mCoverHeight",
            "SMART_COVER_CMD_WRITE",
            "mCoverWidth",
            "NUM_FOR_CMD_DATA",
            "CMD_DELAY_TIME",
            "SYSFS_TSP_CMD",
            "CoverManagerService$CoverShapeThread(com.android.server.cover.CoverManagerService, byte[], int, int)",
            "mCoverShapeArray",
            "SMART_COVER_CMD",
            "run()",
            "this$0",
            "getShapeCmdData(int)",
            "sleepForCmdDelay(int)",
            "SMART_COVER_CMD_CLEAR"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$CoverShapeThread",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onUpdateCoverVerifiedLocked()",
            "isCoverVerifiedAndAttached()",
            "mIsCoverVerified",
            "mDefaultSViewCoverHeight",
            "mDefaultCoverModel",
            "mDefaultSViewCoverWidth",
            "TAG",
            "mDefaultClearCoverHeight",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "DEBUG",
            "getSupportSViewCoverWidth(int)",
            "mDefaultClearCoverWidth",
            "isFactoryMode()",
            "mDefaultCoverColor",
            "mDefaultMiniSViewCoverWidth",
            "onUpdateCoverAttachedLocked(boolean)",
            "SAFE_DEBUG",
            "mDefaultMiniSViewCoverHeight",
            "mIsCoverAttached",
            "getSupportSViewCoverHeight(int)",
            "initializeDefaultCoverState()",
            "isCoverAttached()",
            "CoverVerifier(android.content.Context)",
            "getDefaultTypeOfCover()",
            "updateCoverPropertiesLocked(com.samsung.android.cover.CoverState, com.samsung.android.cover.CoverState)",
            "isCoverVerified()",
            "mContext"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverVerifier",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CoverManagerService$4(com.android.server.cover.CoverManagerService)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setModel(int)",
            "setFakeCover(boolean)",
            "setType(int)",
            "heightPixel",
            "setWindowWidth(int)",
            "switchState",
            "getSmartCoverAppUri()",
            "copyFrom(com.samsung.android.cover.CoverState)",
            "type",
            "model",
            "CoverState(boolean, int, int, int, int, boolean)",
            "getAttachState()",
            "getType()",
            "getModel()",
            "setSerialNumber(java.lang.String)",
            "getSerialNumber()",
            "widthPixel",
            "setAttachState(boolean)",
            "updateCoverState(int, int, int, int, boolean, int)",
            "setSmartCoverCookie(byte[])",
            "setColor(int)",
            "attached",
            "smartCoverAppUri",
            "toString()",
            "setSmartCoverAppUri(java.lang.String)",
            "CoverState(boolean, int, int, boolean, int, java.lang.String, byte[], java.lang.String, boolean)",
            "color",
            "getSwitchState()",
            "getWindowWidth()",
            "getColor()",
            "getWindowHeight()",
            "setWindowHeight(int)",
            "CoverState()",
            "setSwitchState(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.CoverState",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "PATH_FILE_COVER_LED_UART_SLSI",
            "PATH_FILE_COVER_VERIFY",
            "readCmdResult(java.lang.String)",
            "sendCoverInformationToAgent(android.content.Context, java.lang.String, boolean)",
            "PATH_FILE_COVER_LED_UART_QCOM",
            "PATH_FILE_COVER_LED_PWR_QCOM",
            "PATH_FILE_COVER_LED_PWR_SLSI",
            "readResult()",
            "sCoverCoreNumLockHelper",
            "PATH_FILE_COVER_SERIAL_NUMBER",
            "readStatus()",
            "PATH_FILE_COVER_COLOR",
            "getTouchChannelCount(java.lang.String)",
            "getValueFromSysFS(java.lang.String, java.lang.String)",
            "isFileExists(java.lang.String)",
            "sCoverBusBooster",
            "PATH_FILE_COVER_TYPE",
            "SAFE_DEBUG",
            "getValueFromSysFS(java.lang.String, int)",
            "PATH_FILE_PARTIAL_DISP",
            "COVER_TOUCH_REGION_Y",
            "COVER_TOUCH_REGION_X",
            "setPartialScreen(boolean, int)",
            "PATH_FILE_COVER_DETECT",
            "showRuggedizedPopup(android.content.Context, boolean, boolean)",
            "BOOSTING_TIMEOUT",
            "static {}",
            "PATH_FILE_COVER_MODEL",
            "writeCmd(java.lang.String)",
            "CoverManagerUtils()",
            "sCoverCpuBooster",
            "performCPUBoostCover(android.content.Context)",
            "DEBUG",
            "TAG",
            "PATH_FILE_COVER_VERIFY_FAKE"
          ],
          "added": [],
          "name": "com.android.server.cover.CoverManagerUtils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isSupportSViewCover()",
            "sIsSupportFlipCover",
            "isSupportLEDCoverLSI()",
            "sIsDeviceSupportVerityCover",
            "isSupportWindowCover()",
            "FEATURE_COVER_NFC_AUTHENTICATION",
            "sIsClearCoverSystemFeatureEnabled",
            "isSupportNfcLedCover()",
            "sInstance",
            "sDeviceTypeProperty",
            "isSupportLEDCoverQCOM()",
            "FEATURE_COVER_SVIEWCOVER",
            "isSupportClearCover()",
            "sIsDeviceSupportDetectCover",
            "isSupportVerifyCover()",
            "static {}",
            "sIsSupportLEDCoverQCOM",
            "sIsSupportLEDCover",
            "sIsSupportSViewCover",
            "sIsSupportLEDCoverLSI",
            "Feature(android.content.Context)",
            "isChinaModel()",
            "isSupportLEDCover()",
            "isSupportSmartCover()",
            "isTablet()",
            "sHardwareProperty",
            "TAG",
            "FEATURE_COVER_NFC_LED_COVER",
            "FEATURE_COVER_SMARTCOVER",
            "getSystemProperties()",
            "sIsDeviceSupportQueried",
            "updateDeviceSupportFeature()",
            "isRuggedizedFeatureEnabled()",
            "FEATURE_COVER_CLEARCOVER",
            "sIsSupportNfcLedCover",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "DEBUG",
            "SAFE_DEBUG",
            "isMobileKeyboardFeatureEnabled()",
            "sIsNfcAuthSystemFeatureEnabled",
            "getInstance(android.content.Context)",
            "sIsSystemFeatureQueried",
            "isSupportDetectCover()",
            "sIsSmartCoverSystemFeatureEnabled",
            "sIsSupportWindowCover",
            "isNfcAuthEnabled()",
            "isSupportFlipCover()",
            "updateSystemFeature(android.content.Context)"
          ],
          "added": [],
          "name": "com.android.server.cover.Feature",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onCoverAppCovered(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverWindowStateListenerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onCoverSwitchStateChanged(boolean)",
            "onCoverAttachStateChanged(boolean)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverStateListenerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "type",
            "binderDied()",
            "pid",
            "onCoverSwitchStateChanged(boolean)",
            "onCoverSwitchStateChanged(com.samsung.android.cover.CoverState)",
            "token",
            "onCoverAppCovered(boolean)",
            "onCoverAttachStateChanged(boolean)",
            "component",
            "StateNotifier$CoverStateListenerInfo(com.android.server.cover.StateNotifier, android.os.IBinder, android.content.ComponentName, int, int, int)",
            "uid"
          ],
          "added": [],
          "name": "com.android.server.cover.StateNotifier$CoverStateListenerInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "coverCallback(com.samsung.android.cover.CoverState)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverManagerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "com.samsung.android.cover.ICoverWindowStateListenerCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "NfcLedCoverController$NfcLedTouchListenerInfo(com.android.server.cover.NfcLedCoverController, android.os.IBinder, android.content.ComponentName, int, int, int)",
            "this$0",
            "onCoverTouchAccept()",
            "type",
            "uid",
            "component",
            "onCoverTouchReject()",
            "binderDied()",
            "pid",
            "token"
          ],
          "added": [
            "onSystemCoverEvent(int, int[])"
          ],
          "name": "com.android.server.cover.NfcLedCoverController$NfcLedTouchListenerInfo",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "onCoverTouchAccept()",
            "onCoverTouchReject()"
          ],
          "added": [
            "onSystemCoverEvent(int, int[])"
          ],
          "name": "com.samsung.android.cover.INfcLedCoverTouchListenerCallback",
          "change_type": 3
        }
      ],
      "name": "com.android.server.cover"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "CertBlacklister$BlacklistObserver$2(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "start()",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "CertBlacklister$BlacklistObserver$1(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "start()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getValue()",
            "onChange(boolean)",
            "mBlacklist",
            "CertBlacklister$AuthenticationSettingObserver(java.lang.String, android.content.ContentResolver)",
            "mContentResolver",
            "mKey"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$AuthenticationSettingObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$400()",
            "mCertBlacklistListener",
            "isThisKeyBlacklisted(java.lang.String)",
            "BLACKLIST_ROOT",
            "buildAuthenticationSettingObserver(android.content.ContentResolver)",
            "setCertBlacklistListener(com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener)",
            "CertBlacklister(android.content.Context)",
            "AUTHENTICATION_BLOCKED_KEY",
            "PUBKEY_BLACKLIST_KEY",
            "readFile()",
            "TAG",
            "mIsBlocked",
            "access$000()",
            "buildPubkeyObserver(android.content.ContentResolver)",
            "static {}",
            "PUBKEY_PATH",
            "registerObservers(android.content.ContentResolver)",
            "isAuthenticationBlocked()",
            "BLACKLIST_SEPARATOR",
            "DBG",
            "mBlacklistObserver",
            "access$502(boolean)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$300(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "access$200(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "mBlacklist",
            "writeBlacklist()",
            "mPath",
            "mKey",
            "mName",
            "isThisKeyBlacklisted(java.lang.String)",
            "mTmpDir",
            "access$100(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver)",
            "getValue()",
            "readFile()",
            "access$202(com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver, java.lang.String)",
            "mContentResolver",
            "onChange(boolean)",
            "CertBlacklister$BlacklistObserver(java.lang.String, java.lang.String, java.lang.String, android.content.ContentResolver)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$BlacklistObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onAuthenticationBlocked(boolean)",
            "onCertBlacklistChanged()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.CertBlacklister$CertBlacklistListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onAuthenticationChallenge(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "setStateChangedCallback(com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback)",
            "close()",
            "connect()",
            "setConnection(com.samsung.accessory.manager.connectivity.Connectivity)",
            "mType",
            "mContext",
            "onInterrupted()",
            "getConnectivityType()",
            "sendStartAuth()",
            "sendStopAuth()",
            "sendSynchronously(byte[])",
            "getConnectivity()",
            "disconnect()",
            "Authenticator(android.content.Context)",
            "mConnectivity",
            "setConnection()"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.Authenticator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onConnectionStateChanged(int)",
            "AuthenticationSession$1(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "this$0",
            "onStateChanged(int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mStateLock",
            "access$400(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "MSG_CONNECTIVITY_CONNECTED",
            "setAuthenticationResultCallback(com.samsung.accessory.manager.SAccessoryManager$AuthenticationResultCallback)",
            "WAITING_FOR_CONNECTIVITY_OFF",
            "access$1400(com.samsung.accessory.manager.authentication.AuthenticationSession, boolean)",
            "SESSION_NONE",
            "mInternalState",
            "getAuthenticationResult()",
            "handleTearDown()",
            "handleSetConnection()",
            "mConnectAfterEnable",
            "MSG_SESSION_STOP",
            "replayAuthfail(int)",
            "SESSION_STATE_STARTING",
            "mSessionThread",
            "mConnectivityStateCallback",
            "getSessionState()",
            "handleStopSession(boolean)",
            "SESSION_STATE_STOPPING",
            "WAITING_FOR_CONNECTIVITY_ON",
            "mTeardownRequested",
            "access$100()",
            "MSG_CONNECTIVITY_SET_CONNECTION",
            "WAITING_FOR_CONNECTIVITY_ON_WHILE_SETUP",
            "setState(int)",
            "createNewSession(android.content.Context, java.lang.String, int)",
            "MSG_CONNECTIVITY_ON",
            "access$200(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "mContext",
            "setSessionCallback(com.samsung.accessory.manager.authentication.AuthenticationSession$SessionEventListener)",
            "mSessionEventListener",
            "access$900(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "access$1300(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "mTurnedOffWhileRunning",
            "MSG_CONNECTIVITY_OFF",
            "SESSION_STATE_READY",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "run()",
            "access$1200(com.samsung.accessory.manager.authentication.AuthenticationSession, int)",
            "disconnect()",
            "SESSION_TIMEOUT",
            "EVENT_SESSION_COMPLETE",
            "access$802(com.samsung.accessory.manager.authentication.AuthenticationSession, boolean)",
            "mSessionHandler",
            "mHandlerThread",
            "MSG_SESSION_REQUEST_TEAR_DOWN",
            "access$700(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "startAuthChall()",
            "MSG_CONNECTIVITY_DISCONNECTED",
            "setAuthenticator(android.content.Context, com.samsung.accessory.manager.authentication.Authenticator)",
            "SESSION_STATE_STARTED",
            "mResult",
            "mAuthenticator",
            "MSG_SESSION_TIMEOUT",
            "mState",
            "stopSession()",
            "SESSION_STATE_STOPPED",
            "MSG_CONNECTIVITY_CONNECT",
            "MSG_SESSION_START",
            "connect()",
            "WAITING_RECEIVED_START_WHILE_STOPPING",
            "access$1102(com.samsung.accessory.manager.authentication.AuthenticationSession, java.lang.Thread)",
            "mAuthResultCallback",
            "startSession()",
            "static {}",
            "getConnectivityType()",
            "SESSION_STATE_ERROR",
            "access$1000(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "TAG",
            "WAITING_FOR_CONNECTIVITY_OFF_WHILE_STOPPING",
            "EVENT_SESSION_STARTED",
            "access$502(com.samsung.accessory.manager.authentication.AuthenticationSession, int)",
            "MSG_CONNECTIVITY_TURNING_OFF",
            "access$000(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "getAuthenticationCallback()",
            "handleStartSession()",
            "access$1100(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "access$600(com.samsung.accessory.manager.authentication.AuthenticationSession)",
            "AuthenticationSession(android.content.Context, java.lang.String, int)",
            "VDBG",
            "EVENT_SESSION_STARTING",
            "MSG_CONNECTIVITY_READY",
            "EVENT_SESSION_STOPPED",
            "access$300(com.samsung.accessory.manager.authentication.AuthenticationSession, int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "hasMessages(int)",
            "this$0",
            "handleMessage(android.os.Message)",
            "AuthenticationSession$EventHandler(com.samsung.accessory.manager.authentication.AuthenticationSession, android.os.Looper)",
            "removeMessages(int)",
            "sendEmptyMessage(int)",
            "sendEmptyMessageDelayed(int, long)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$EventHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSessionEvent(int, com.samsung.accessory.manager.authentication.AuthenticationSession)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticationSession$SessionEventListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TAG",
            "enable()",
            "STATE_ERROR",
            "NFC_MAX_CONNECTION",
            "BT_MAX_CONNECTION",
            "STATE_OFF",
            "TYPE_NFC",
            "mStateChangedCallback",
            "sendStopAuth()",
            "STATE_DISCONNECTED",
            "getMaxConnection(int)",
            "TYPE_USB",
            "Connectivity(android.content.Context)",
            "TYPE_NONE",
            "setStateChangedCallback(com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback)",
            "STATE_CONNECTED",
            "TYPE_BT",
            "sendStartAuth()",
            "STATE_TURNING_OFF",
            "close()",
            "isEnabledInternally()",
            "sendSynchronously(byte[])",
            "isEnabled()",
            "mContext",
            "getOutputStream()",
            "NOT_SUPPORT",
            "disable()",
            "static {}",
            "mEnabledInternal",
            "connect(java.lang.String)",
            "getInputStream()",
            "STATE_ON",
            "disconnect()",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.connectivity.Connectivity",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onConnectionStateChanged(int)",
            "onStateChanged(int)"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.connectivity.Connectivity$StateChangedCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getReqFirmwareVersion()",
            "randNum",
            "mMsgHelper",
            "MsgBuilder()",
            "makeRandomNumber()",
            "getWriteCoverId(byte[])",
            "getReadCoverId()",
            "getReqPubKey()",
            "getDataVerification()",
            "getReqUrl()",
            "getKeyChange()",
            "getRandNum()",
            "mMsg"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.msg.MsgBuilder",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "authNFC(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "mType",
            "mMsgParser",
            "COMMAND_ATQS",
            "randNum",
            "COMMAND_REQURL",
            "COMMAND_WRITE_ID",
            "COMMAND_SEC_PUB_KEY",
            "TAG",
            "statusWord",
            "COMMAND_READ_ID",
            "mConnectivity",
            "onInterrupted()",
            "sendStartAuth()",
            "sendSynchronously(byte[])",
            "sendCommand(com.samsung.accessory.manager.authentication.AuthenticationResult, int)",
            "RETRY_TIME",
            "SW_SUCCESS",
            "SW_FAIL",
            "VDBG",
            "onAuthenticationChallenge(com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "COMMAND_VERIFICATION",
            "COMMAND_PUB_KEY",
            "checkError(int, byte[], com.samsung.accessory.manager.authentication.AuthenticationResult)",
            "SW_SECURITY_ATTACK",
            "COMMAND_FIRMWARE",
            "isInterrupted",
            "COMMAND_KEY_CHANGE",
            "sendStopAuth()",
            "AuthenticatorClientImpl(android.content.Context, int)",
            "mMsgBuilder",
            "byteArrayToString(byte[])",
            "DBG",
            "static {}"
          ],
          "added": [],
          "name": "com.samsung.accessory.manager.authentication.AuthenticatorClientImpl",
          "change_type": 2
        }
      ],
      "name": "com.samsung.accessory.manager.authentication"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "setDeviceInfo(android.media.midi.MidiDeviceInfo)",
            "getDeviceInfo()",
            "asBinder()",
            "closeDevice()"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceServer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDeviceOpened(android.media.midi.IMidiDeviceServer, android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceOpenCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDeviceStatusChanged(android.media.midi.MidiDeviceStatus)",
            "onDeviceAdded(android.media.midi.MidiDeviceInfo)",
            "onDeviceRemoved(android.media.midi.MidiDeviceInfo)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mMidiService",
            "publishBinderService(java.lang.String, android.os.IBinder)",
            "onStart()",
            "getContext()",
            "MidiService$Lifecycle(android.content.Context)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Lifecycle",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onPackageAdded(java.lang.String, int)",
            "onPackageModified(java.lang.String)",
            "MidiService$1(com.android.server.midi.MidiService)",
            "this$0",
            "onPackageRemoved(java.lang.String, int)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "removeDeviceConnection(android.os.IBinder)",
            "mUid",
            "removeDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "mListeners",
            "MidiService$Client(com.android.server.midi.MidiService, android.os.IBinder)",
            "close()",
            "mPid",
            "addListener(android.media.midi.IMidiDeviceListener)",
            "this$0",
            "access$1200(com.android.server.midi.MidiService$Client)",
            "addDeviceConnection(com.android.server.midi.MidiService$Device, android.media.midi.IMidiDeviceOpenCallback)",
            "mDeviceConnections",
            "mToken",
            "deviceAdded(com.android.server.midi.MidiService$Device)",
            "removeListener(android.media.midi.IMidiDeviceListener)",
            "deviceRemoved(com.android.server.midi.MidiService$Device)",
            "deviceStatusChanged(com.android.server.midi.MidiService$Device, android.media.midi.MidiDeviceStatus)",
            "toString()",
            "binderDied()",
            "getUid()"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Client",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "notifyDeviceStatusChanged(com.android.server.midi.MidiService$Device, android.media.midi.MidiDeviceStatus)",
            "getDevices()",
            "access$1100(com.android.server.midi.MidiService)",
            "mNextDeviceId",
            "mDevicesByInfo",
            "openDevice(android.os.IBinder, android.media.midi.MidiDeviceInfo, android.media.midi.IMidiDeviceOpenCallback)",
            "updateStickyDeviceStatus(int, android.media.midi.IMidiDeviceListener)",
            "EMPTY_STRING_ARRAY",
            "registerDeviceServer(android.media.midi.IMidiDeviceServer, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, int)",
            "access$000(com.android.server.midi.MidiService, java.lang.String)",
            "addPackageDeviceServers(java.lang.String)",
            "EMPTY_DEVICE_INFO_ARRAY",
            "closeDevice(android.os.IBinder, android.os.IBinder)",
            "registerListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
            "addDeviceLocked(int, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, android.media.midi.IMidiDeviceServer, android.content.pm.ServiceInfo, boolean, int)",
            "MidiService(android.content.Context)",
            "openBluetoothDevice(android.os.IBinder, android.bluetooth.BluetoothDevice, android.media.midi.IMidiDeviceOpenCallback)",
            "mBluetoothDevices",
            "access$800(com.android.server.midi.MidiService)",
            "mClients",
            "access$900(com.android.server.midi.MidiService)",
            "addPackageDeviceServer(android.content.pm.ServiceInfo)",
            "access$300(com.android.server.midi.MidiService)",
            "mContext",
            "unregisterDeviceServer(android.media.midi.IMidiDeviceServer)",
            "access$200(com.android.server.midi.MidiService)",
            "mPackageManager",
            "getServiceDeviceInfo(java.lang.String, java.lang.String)",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "TAG",
            "mPackageMonitor",
            "removeDeviceLocked(com.android.server.midi.MidiService$Device)",
            "getDeviceStatus(android.media.midi.MidiDeviceInfo)",
            "mBluetoothServiceUid",
            "access$100(com.android.server.midi.MidiService, java.lang.String)",
            "mDevicesByServer",
            "unregisterListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
            "getClient(android.os.IBinder)",
            "access$400(com.android.server.midi.MidiService)",
            "access$1000(com.android.server.midi.MidiService, com.android.server.midi.MidiService$Device)",
            "setDeviceStatus(android.media.midi.IMidiDeviceServer, android.media.midi.MidiDeviceStatus)",
            "removePackageDeviceServers(java.lang.String)",
            "static {}"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IMidiManager$Stub()"
          ],
          "added": [],
          "name": "android.media.midi.IMidiManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getClient()",
            "this$0",
            "mCallback",
            "mToken",
            "getToken()",
            "getDevice()",
            "MidiService$DeviceConnection(com.android.server.midi.MidiService, com.android.server.midi.MidiService$Device, com.android.server.midi.MidiService$Client, android.media.midi.IMidiDeviceOpenCallback)",
            "mDevice",
            "notifyClient(android.media.midi.IMidiDeviceServer)",
            "mClient",
            "toString()"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$DeviceConnection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDeviceStatus()",
            "mDeviceInfo",
            "getUid()",
            "setDeviceStatus(android.media.midi.MidiDeviceStatus)",
            "this$0",
            "MidiService$Device(com.android.server.midi.MidiService, android.bluetooth.BluetoothDevice)",
            "removeDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "MidiService$Device(com.android.server.midi.MidiService, android.media.midi.IMidiDeviceServer, android.media.midi.MidiDeviceInfo, android.content.pm.ServiceInfo, int)",
            "getDeviceInfo()",
            "access$702(com.android.server.midi.MidiService$Device, android.content.ServiceConnection)",
            "mUid",
            "setDeviceServer(android.media.midi.IMidiDeviceServer)",
            "closeLocked()",
            "access$500(com.android.server.midi.MidiService$Device)",
            "access$600(com.android.server.midi.MidiService$Device, android.media.midi.IMidiDeviceServer)",
            "getServiceInfo()",
            "getPackageName()",
            "toString()",
            "mDeviceConnections",
            "mServiceConnection",
            "setDeviceInfo(android.media.midi.MidiDeviceInfo)",
            "mServiceInfo",
            "isUidAllowed(int)",
            "mServer",
            "addDeviceConnection(com.android.server.midi.MidiService$DeviceConnection)",
            "mBluetoothDevice",
            "getDeviceServer()",
            "binderDied()",
            "mDeviceStatus"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Device",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isPrivate()",
            "getId()",
            "getInputPortCount()",
            "MidiDeviceInfo(int, int, int, int, java.lang.String[], java.lang.String[], android.os.Bundle, boolean)",
            "getOutputPortCount()",
            "getProperties()"
          ],
          "added": [],
          "name": "android.media.midi.MidiDeviceInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getOutputPortOpenCount(int)",
            "MidiDeviceStatus(android.media.midi.MidiDeviceInfo)",
            "isInputPortOpen(int)",
            "getDeviceInfo()"
          ],
          "added": [],
          "name": "android.media.midi.MidiDeviceStatus",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IMidiDeviceServer$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onServiceDisconnected(android.content.ComponentName)",
            "this$1",
            "onServiceConnected(android.content.ComponentName, android.os.IBinder)",
            "MidiService$Device$1(com.android.server.midi.MidiService$Device)"
          ],
          "added": [],
          "name": "com.android.server.midi.MidiService$Device$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.media.midi.IBluetoothMidiService$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "addBluetoothDevice(android.bluetooth.BluetoothDevice)"
          ],
          "added": [],
          "name": "android.media.midi.IBluetoothMidiService",
          "change_type": 2
        }
      ],
      "name": "com.android.server.midi"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "TwilightService$2(com.android.server.twilight.TwilightService)",
            "this$0",
            "onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onLocationChanged(android.location.Location)",
            "onProviderDisabled(java.lang.String)",
            "TwilightService$3(com.android.server.twilight.TwilightService)",
            "onStatusChanged(java.lang.String, int, android.os.Bundle)",
            "this$0",
            "onProviderEnabled(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DEBUG",
            "TAG",
            "access$200(com.android.server.twilight.TwilightService)",
            "mListeners",
            "mAlarmManager",
            "onStart()",
            "setTwilightState(com.android.server.twilight.TwilightState)",
            "mLocationListener",
            "mTwilightState",
            "access$300(com.android.server.twilight.TwilightService)",
            "getContext()",
            "access$400(com.android.server.twilight.TwilightService, com.android.server.twilight.TwilightState)",
            "publishLocalService(java.lang.Class, java.lang.Object)",
            "mEmptyLocationListener",
            "ACTION_UPDATE_TWILIGHT_STATE",
            "mLocationManager",
            "mUpdateLocationReceiver",
            "TwilightService(android.content.Context)",
            "mLocationHandler",
            "hasMoved(android.location.Location, android.location.Location)",
            "mLock",
            "access$100(android.location.Location, android.location.Location)",
            "mService"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setLocation(android.location.Location)",
            "FACTOR_GMT_OFFSET_LONGITUDE",
            "LOCATION_UPDATE_DISTANCE_METER",
            "mPassiveListenerEnabled",
            "TwilightService$LocationHandler(com.android.server.twilight.TwilightService)",
            "handleMessage(android.os.Message)",
            "mTwilightCalculator",
            "retrieveLocation()",
            "updateTwilightState()",
            "MSG_DO_TWILIGHT_UPDATE",
            "mLocation",
            "LOCATION_UPDATE_ENABLE_INTERVAL_MAX",
            "mNetworkListenerEnabled",
            "sendEmptyMessage(int)",
            "mLastUpdateInterval",
            "this$0",
            "MSG_GET_NEW_LOCATION_UPDATE",
            "requestTwilightUpdate()",
            "LOCATION_UPDATE_ENABLE_INTERVAL_MIN",
            "mDidFirstInit",
            "obtainMessage(int, java.lang.Object)",
            "mLastNetworkRegisterTime",
            "MSG_ENABLE_LOCATION_UPDATES",
            "enableLocationUpdates()",
            "MSG_PROCESS_NEW_LOCATION",
            "LOCATION_UPDATE_MS",
            "TwilightService$LocationHandler(com.android.server.twilight.TwilightService, com.android.server.twilight.TwilightService$1)",
            "sendEmptyMessageDelayed(int, long)",
            "sendMessage(android.os.Message)",
            "MIN_LOCATION_UPDATE_MS",
            "processNewLocation(android.location.Location)",
            "requestLocationUpdate()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$LocationHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mSunset",
            "NIGHT",
            "DAY",
            "calculateTwilight(long, double, double)",
            "ALTIDUTE_CORRECTION_CIVIL_TWILIGHT",
            "TwilightCalculator()",
            "C1",
            "UTC_2000",
            "mState",
            "C3",
            "C2",
            "mSunrise",
            "J0",
            "OBLIQUITY",
            "DEGREES_TO_RADIANS"
          ],
          "added": [],
          "name": "com.android.server.TwilightCalculator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onStatusChanged(java.lang.String, int, android.os.Bundle)",
            "onProviderEnabled(java.lang.String)",
            "onLocationChanged(android.location.Location)",
            "onProviderDisabled(java.lang.String)",
            "TwilightService$4(com.android.server.twilight.TwilightService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "registerListener(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "getCurrentState()",
            "TwilightService$1(com.android.server.twilight.TwilightService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TwilightService$TwilightListenerRecord(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "postUpdate()",
            "mHandler",
            "mListener",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightService$TwilightListenerRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getLastKnownLocation(java.lang.String)",
            "isProviderEnabled(java.lang.String)",
            "sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)",
            "getLastLocation()",
            "requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper)",
            "getAllProviders()",
            "removeUpdates(android.location.LocationListener)",
            "requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper)",
            "getProviders(android.location.Criteria, boolean)",
            "requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper)",
            "getBestProvider(android.location.Criteria, boolean)",
            "getProviders(boolean)",
            "getProvider(java.lang.String)",
            "requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener)",
            "notifyNSFLP(android.os.Message)"
          ],
          "added": [],
          "name": "android.location.LocationManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.location.LocationListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "Criteria()",
            "setCostAllowed(boolean)",
            "setAccuracy(int)",
            "setAltitudeRequired(boolean)",
            "setBearingRequired(boolean)",
            "setPowerRequirement(int)"
          ],
          "added": [],
          "name": "android.location.Criteria",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTwilightStateChanged()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "registerListener(com.android.server.twilight.TwilightListener, android.os.Handler)",
            "getCurrentState()"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "equals(java.lang.Object)",
            "mIsNight",
            "isNight()",
            "getTodaySunset()",
            "getYesterdaySunset()",
            "mTodaySunset",
            "toString()",
            "mYesterdaySunset",
            "hashCode()",
            "mTomorrowSunrise",
            "equals(com.android.server.twilight.TwilightState)",
            "getTodaySunrise()",
            "getTomorrowSunrise()",
            "mTodaySunrise",
            "TwilightState(boolean, long, long, long, long)"
          ],
          "added": [],
          "name": "com.android.server.twilight.TwilightState",
          "change_type": 2
        }
      ],
      "name": "com.android.server.twilight"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "producerQueue",
            "startLogFileWriter(java.util.concurrent.CountDownLatch)",
            "log(int, java.lang.String, java.lang.String)",
            "MSG_WRITE_LOG",
            "flush()",
            "access$600(com.android.server.enterprise.log.FileLogger)",
            "mCalendar",
            "access$100(com.android.server.enterprise.log.FileLogger, java.util.concurrent.CountDownLatch)",
            "LIMIT_FOR_LOGS_IN_DAYS",
            "mLogFileWriter",
            "access$500(long)",
            "TAG",
            "getDayBoundaryTimestamp(long)",
            "access$702(com.android.server.enterprise.log.FileLogger, com.android.server.enterprise.log.FileLogger$LogFileWriter)",
            "copyLogs(java.io.FileOutputStream)",
            "static {}",
            "LOG_ENTRY_SECTION_SEPARATOR",
            "LOG_FILES_DIR",
            "access$300(com.android.server.enterprise.log.FileLogger)",
            "cleanupLogs()",
            "MSG_QUEUE_LOG",
            "mHandler",
            "DAY_IN_SECONDS",
            "FileLogger(java.lang.String)",
            "access$200(com.android.server.enterprise.log.FileLogger)",
            "consumerQueue"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "open()",
            "val$file",
            "close(java.io.FileInputStream)",
            "close(java.lang.Object)",
            "this$0",
            "FileLogger$3(com.android.server.enterprise.log.FileLogger, java.io.File, java.io.FileOutputStream)",
            "val$outFile",
            "process(java.io.FileInputStream)",
            "process(java.lang.Object)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "accept(java.io.File, java.lang.String)",
            "FileLogger$1(com.android.server.enterprise.log.FileLogger)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "sendMessageAtFrontOfQueue(android.os.Message)",
            "FileLogger$FileLoggerHandler(com.android.server.enterprise.log.FileLogger, android.os.Looper)",
            "obtainMessage(int, java.lang.Object)",
            "lb",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$FileLoggerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$file",
            "close(java.lang.Object)",
            "FileLogger$LogFileWriter$1(com.android.server.enterprise.log.FileLogger$LogFileWriter, java.io.File)",
            "this$1",
            "flush(java.io.BufferedWriter)",
            "flush(java.lang.Object)",
            "process(java.io.BufferedWriter)",
            "process(java.lang.Object)",
            "open()",
            "close(java.io.BufferedWriter)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogFileWriter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "entries",
            "FileLogger$LogBuffer(com.android.server.enterprise.log.FileLogger$1)",
            "lastTimeStamp",
            "FileLogger$LogBuffer()",
            "CAPACITY"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogBuffer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "FileLogger$LogFileWriter(com.android.server.enterprise.log.FileLogger, com.android.server.enterprise.log.FileLogger$1)",
            "doInBackground(java.lang.Object[])",
            "FileLogger$LogFileWriter(com.android.server.enterprise.log.FileLogger)",
            "execute(java.lang.Object[])",
            "this$0",
            "getStatus()",
            "doInBackground(java.util.concurrent.CountDownLatch[])",
            "lb"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$LogFileWriter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "compare(java.io.File, java.io.File)",
            "this$0",
            "FileLogger$2(com.android.server.enterprise.log.FileLogger)",
            "compare(java.lang.Object, java.lang.Object)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.FileLogger$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "flush(java.lang.Object)",
            "close(java.lang.Object)",
            "sync(java.lang.Object)",
            "process(java.lang.Object)",
            "open()",
            "IOExceptionHandler$IOProcessor()"
          ],
          "added": [],
          "name": "com.android.server.enterprise.utils.IOExceptionHandler$IOProcessor",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "log(int, java.lang.String, java.lang.String)",
            "TAG",
            "level",
            "ConsoleLogger(java.lang.String)",
            "isLoggable(int)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.ConsoleLogger",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$file",
            "process(java.lang.Object)",
            "sync(java.lang.Object)",
            "this$0",
            "flush(java.lang.Object)",
            "process(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "close(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "open()",
            "flush(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "sync(android.os.ParcelFileDescriptor$AutoCloseOutputStream)",
            "close(java.lang.Object)",
            "LogManagerService$2(com.android.server.enterprise.log.LogManagerService, android.os.ParcelFileDescriptor)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "copyLogs(android.os.ParcelFileDescriptor)",
            "LogManagerService(android.content.Context, com.android.server.enterprise.EnterpriseDeviceManagerService)",
            "getLogger(int)",
            "setLogLevel(int, int)",
            "TAG",
            "LOGGER_NAMES",
            "initLog()",
            "checkAdminExistsInELMDB(int)",
            "mEdms",
            "mLogReceiver",
            "DISABLED",
            "ENABLED",
            "enableLogging(int)",
            "LOG_CONFIG_FILE",
            "isValidLogType(int)",
            "disableLogging(int)",
            "isValidLogLevel(int)",
            "static {}",
            "checkCallingUidAccess()",
            "getLogLevel(int)",
            "isLoggingEnabled(int)",
            "LOGGER_TYPES",
            "createLogger(int)",
            "access$000(com.android.server.enterprise.log.LogManagerService, int)",
            "mEdmStorageProvider",
            "mContext"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "ILogManager$Stub()"
          ],
          "added": [],
          "name": "android.app.enterprise.ILogManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "LogManagerService$1(com.android.server.enterprise.log.LogManagerService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.LogManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "level",
            "flush()",
            "log(int, java.lang.String, java.lang.String)",
            "loggerName",
            "isLoggable(int)",
            "Logger(java.lang.String)",
            "getLogLevel()",
            "setLogLevel(int)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.log.Logger",
          "change_type": 2
        }
      ],
      "name": "com.android.server.enterprise.log"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "getCmdDetail()",
            "CmdInfo(com.android.server.display.CmdInfo$CmdType, int)",
            "CREATOR",
            "CmdInfo(com.android.server.display.CmdInfo$CmdType)",
            "CmdInfo(android.os.Parcel)",
            "cmdDetail",
            "static {}",
            "describeContents()",
            "CmdInfo(int, int)",
            "writeToParcel(android.os.Parcel, int)",
            "cmdType",
            "CmdInfo(android.os.Parcel, com.android.server.display.CmdInfo$1)",
            "getCmdType()",
            "readFromParcel(android.os.Parcel)",
            "TAG"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CmdInfo$1()",
            "newArray(int)",
            "createFromParcel(android.os.Parcel)"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "name()",
            "$VALUES",
            "SET_IP",
            "valueOf(java.lang.String)",
            "values()",
            "SET_BUSY_FLAG",
            "CmdInfo$CmdType(java.lang.String, int)",
            "START_PLAYER",
            "START_SOURCE",
            "ordinal()",
            "static {}"
          ],
          "added": [],
          "name": "com.android.server.display.CmdInfo$CmdType",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "RampAnimator$1(com.android.server.display.RampAnimator)"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$1000(com.android.server.display.RampAnimator)",
            "access$700(com.android.server.display.RampAnimator)",
            "access$300(com.android.server.display.RampAnimator)",
            "mTargetValue",
            "cancelAnimationCallback()",
            "access$902(com.android.server.display.RampAnimator, boolean)",
            "access$100(com.android.server.display.RampAnimator)",
            "access$800(com.android.server.display.RampAnimator)",
            "mAnimatedValue",
            "TAG",
            "mLastFrameTimeNanos",
            "mListener",
            "RampAnimator(java.lang.Object, android.util.IntProperty)",
            "access$200(com.android.server.display.RampAnimator)",
            "animateTo(int, int)",
            "reset()",
            "mAnimationCallback",
            "access$000(com.android.server.display.RampAnimator)",
            "postAnimationCallback()",
            "mAnimating",
            "access$400(com.android.server.display.RampAnimator)",
            "mProperty",
            "mRate",
            "mFirstTime",
            "access$102(com.android.server.display.RampAnimator, long)",
            "mObject",
            "access$302(com.android.server.display.RampAnimator, float)",
            "access$600(com.android.server.display.RampAnimator)",
            "isAnimating()",
            "mCurrentValue",
            "access$602(com.android.server.display.RampAnimator, int)",
            "mChoreographer",
            "setListener(com.android.server.display.RampAnimator$Listener)",
            "access$500(com.android.server.display.RampAnimator)"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getInstance()",
            "getFrameIntervalNanos()",
            "getFrameTimeNanos()",
            "postCallback(int, java.lang.Runnable, java.lang.Object)",
            "postFrameCallback(android.view.Choreographer$FrameCallback)",
            "removeCallbacks(int, java.lang.Runnable, java.lang.Object)"
          ],
          "added": [],
          "name": "android.view.Choreographer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onAnimationEnd()"
          ],
          "added": [],
          "name": "com.android.server.display.RampAnimator$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setValue(java.lang.Object, int)",
            "IntProperty(java.lang.String)"
          ],
          "added": [],
          "name": "android.util.IntProperty",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAddr()",
            "DEBUG",
            "ERR_NONE",
            "disconnect()",
            "isConnected()",
            "ERR_BUSY",
            "ERR_NOT_SUPPORT",
            "sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "getInstance(java.net.InetAddress, int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "mMsgHandler",
            "sendBusyflag(int)",
            "mSession",
            "connect()",
            "ERR_CONCURRENT_OPERATION",
            "REQ_DEV_SINK",
            "request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "ERR_SCREEN_OFF",
            "getConnectAddrList()",
            "DEFAULT_WBP_VERSION",
            "TAG",
            "mListner",
            "updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "WfdBridgeBase(com.android.server.display.WfdBridgeBase$BridgeListner)",
            "REQ_DEV_SOURCE"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TAG",
            "disconnect()",
            "mListner",
            "mBridgeConnType",
            "request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "CONNECT_TYPE_NOT_CONNECTED",
            "CONNECT_TYPE_CONNECTED",
            "updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "mSocket",
            "WfdBridgeClient(java.net.InetAddress, int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "mSession",
            "CONNECT_TYPE_INITIALIZED",
            "isConnected()",
            "mMsgHandler",
            "CONNECT_TYPE_CONNECTING",
            "getAddr()",
            "run()",
            "sendBusyflag(int)",
            "connect()",
            "mInetAddr",
            "sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "getConnectAddrList()",
            "mClientPeer",
            "mPort"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeClient",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onBridgeConnected()",
            "onConnRequest(int, int, java.net.InetAddress)",
            "onError(int)",
            "onOK(java.net.InetAddress)",
            "onGetStatus()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BridgeListner",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAddr()",
            "mMsgHandler",
            "sendBusyflag(int)",
            "DEBUG",
            "mServerSocket",
            "run()",
            "getConnectAddrList()",
            "connect()",
            "getIndexFromDeviceInfo(android.net.wifi.p2p.WifiP2pDevice)",
            "mClientList",
            "mListner",
            "WfdBridgeServer(int, com.android.server.display.WfdBridgeBase$BridgeListner)",
            "mSession",
            "isConnected()",
            "mPort",
            "request(android.net.wifi.p2p.WifiP2pDevice, int, int)",
            "sendMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "mLastUpdatedClient",
            "disconnect()",
            "updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "TAG"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeServer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "$SwitchMap$com$android$server$display$CmdInfo$CmdType",
            "static {}"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mSocReader",
            "TAG",
            "mSocket",
            "this$0",
            "mWbpVersion",
            "socketState()",
            "mIsLegacyDevice",
            "start()",
            "WfdBridgeBase$BridgePeer(com.android.server.display.WfdBridgeBase, java.net.Socket, com.android.server.display.WfdBridgeBase$WBPMsgHandler)",
            "closeSocket()",
            "sleep(long)",
            "mSocWriter",
            "mBusyFlag",
            "send(java.lang.String)",
            "isSocClosed()",
            "isSocConnected()",
            "mMsgHandler",
            "mDevice",
            "getInetAddress()",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BridgePeer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "SUPPORT_RVF_SINK",
            "SUPPORT_SIDESYNC_SINK",
            "parseSupportedType(java.util.StringTokenizer)",
            "deviceAddress",
            "SUPPORT_SIDESYNC_SOURCE",
            "WfdBridgeBase$BrigePeerDevice(com.android.server.display.WfdBridgeBase)",
            "SUPPORT_RVF_SOURCE",
            "WfdBridgeBase$BrigePeerDevice(com.android.server.display.WfdBridgeBase, android.net.wifi.p2p.WifiP2pDevice)",
            "mSupportedDevice",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$BrigePeerDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WBPMSGTYPE_DESTROY",
            "WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer, int, int)",
            "mPeer",
            "WBPMSGTYPE_WBP_PLAY",
            "mDev",
            "WBPMSGTYPE_WBP_SET_PARAMETER",
            "WBPMSGTYPE_WBP_TRIGGER",
            "toString()",
            "WBPMSGTYPE_TRIGGER_BUSYFLAG",
            "mMsgType",
            "WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "WBPMSGTYPE_WBP_SETUP",
            "WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, int)",
            "WBPMSGTYPE_TRIGGER_M1",
            "mType",
            "this$0",
            "TAG",
            "WBPMSGTYPE_WBP_GET_PARAMETER",
            "WfdBridgeBase$WBPMsg(com.android.server.display.WfdBridgeBase, java.lang.String, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "mMsg",
            "WBPMSGTYPE_NOT_PARSED_LEGACY",
            "WBPMSGTYPE_NOT_PARSED"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$WBPMsg",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "send_WBP_TRIGGER(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "STR_ScreenMirroring",
            "STR_RVF",
            "STR_Source",
            "getSupportedDevList()",
            "send_WBP_GET_PARAM_RES(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "triggerMsg(int, com.android.server.display.WfdBridgeBase$BridgePeer)",
            "parseBridgeCmdInfo(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "send_WBP_TRIGGER_RES(com.android.server.display.WfdBridgeBase$WBPMsg, int)",
            "STR_CRLF",
            "this$0",
            "putMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "destroy()",
            "send_WBP_GET_PARAM(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "WfdBridgeBase$WBPMsgHandler(com.android.server.display.WfdBridgeBase)",
            "send_busyFlag(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "STR_AllShareCast",
            "start()",
            "parseRequest(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "TAG",
            "mMsgList",
            "STR_MirrorMouse",
            "STR_Sink",
            "parseMsg(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "parseResponse(com.android.server.display.WfdBridgeBase$WBPMsg)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WfdBridgeBase$WBPMsgHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$device",
            "val$event",
            "run()",
            "DisplayAdapter$1(com.android.server.display.DisplayAdapter, com.android.server.display.DisplayDevice, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$000(com.android.server.display.DisplayAdapter)",
            "createMode(int, int, float)",
            "NEXT_COLOR_TRANSFORM_ID",
            "mSyncRoot",
            "getName()",
            "static {}",
            "mListener",
            "NEXT_DISPLAY_MODE_ID",
            "DISPLAY_DEVICE_EVENT_REMOVED",
            "mContext",
            "sendTraversalRequestLocked()",
            "getSyncRoot()",
            "registerLocked()",
            "DisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, java.lang.String)",
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "createColorTransform(int)",
            "mName",
            "getContext()",
            "DISPLAY_DEVICE_EVENT_CHANGED",
            "dumpLocked(java.io.PrintWriter)",
            "mHandler",
            "getHandler()",
            "DISPLAY_DEVICE_EVENT_ADDED"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayAdapter$2(com.android.server.display.DisplayAdapter)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayDeviceEvent(com.android.server.display.DisplayDevice, int)",
            "onTraversalRequested()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayAdapter$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "requestColorTransformAndModeInTransactionLocked(int, int)",
            "mBuiltInDisplayId",
            "mBrightness",
            "findDisplayInfoIndexLocked(int, int)",
            "mSupportedColorTransforms",
            "LocalDisplayAdapter$LocalDisplayDevice(com.android.server.display.LocalDisplayAdapter, android.os.IBinder, int, android.view.SurfaceControl$PhysicalDisplayInfo[], int)",
            "mInfo",
            "updatePhysicalDisplayInfoLocked(android.view.SurfaceControl$PhysicalDisplayInfo[], int)",
            "mDefaultColorTransformId",
            "getDisplayDeviceInfoLocked()",
            "requestDisplayStateLocked(int, int)",
            "this$0",
            "applyPendingDisplayDeviceInfoChangesLocked()",
            "findColorTransform(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "mBacklight",
            "mActiveColorTransformInvalid",
            "dumpLocked(java.io.PrintWriter)",
            "mActivePhysIndex",
            "static {}",
            "mState",
            "mHavePendingChanges",
            "getDisplayTokenLocked()",
            "mActiveModeInvalid",
            "mActiveModeId",
            "mSupportedModes",
            "updateDeviceInfoLocked()",
            "access$000(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)",
            "mActiveColorTransformId",
            "findDisplayModeRecord(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "mDefaultModeId",
            "$assertionsDisabled",
            "mEnableScreenRotateWithContent",
            "getUniqueId()",
            "mDisplayInfos"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "yDpi",
            "refreshRate",
            "width",
            "xDpi",
            "colorTransform",
            "appVsyncOffsetNanos",
            "secure",
            "density",
            "height",
            "presentationDeadlineNanos"
          ],
          "added": [],
          "name": "android.view.SurfaceControl$PhysicalDisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getSyncRoot()",
            "BUILT_IN_DISPLAY_IDS_TO_SCAN",
            "PROPERTY_EMULATOR_CIRCULAR",
            "mDevices",
            "mHotplugReceiver",
            "TAG",
            "access$200(com.android.server.display.LocalDisplayAdapter, int)",
            "tryDisconnectDisplayLocked(int)",
            "LocalDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener)",
            "getPowerModeForState(int)",
            "access$100(com.android.server.display.LocalDisplayAdapter, int)",
            "getHandler()",
            "registerLocked()",
            "sendTraversalRequestLocked()",
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "static {}",
            "mIsDualDisplay",
            "tryConnectDisplayLocked(int)",
            "DEBUG",
            "UNIQUE_ID_PREFIX",
            "getContext()"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setDisplayState(int)",
            "val$oldState",
            "run()",
            "this$1",
            "val$state",
            "setDisplayBrightness(int)",
            "val$displayId",
            "val$token",
            "LocalDisplayAdapter$LocalDisplayDevice$1(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice, int, int, int, android.os.IBinder)"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LocalDisplayAdapter$DisplayModeRecord(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "mMode",
            "hasMatchingMode(android.view.SurfaceControl$PhysicalDisplayInfo)",
            "toString()"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$DisplayModeRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getPhysicalHeight()",
            "getRefreshRate()",
            "EMPTY_ARRAY",
            "getPhysicalWidth()",
            "Display$Mode(int, int, int, float)",
            "getModeId()"
          ],
          "added": [],
          "name": "android.view.Display$Mode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "setVirtualDisplayMirroringDisplayLocked(android.os.IBinder, int)",
            "mHandler",
            "access$100(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "TAG",
            "setVirtualDisplaySurfaceLocked(android.os.IBinder, android.view.Surface)",
            "releaseVirtualDisplayLocked(android.os.IBinder)",
            "resizeVirtualDisplayLocked(android.os.IBinder, int, int, int)",
            "handleMediaProjectionStoppedLocked(android.os.IBinder)",
            "sendTraversalRequestLocked()",
            "VirtualDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener)",
            "getNextUniqueIndex(java.lang.String)",
            "mVirtualDisplayDevices",
            "DEBUG",
            "handleBinderDiedLocked(android.os.IBinder)",
            "getSyncRoot()",
            "UNIQUE_ID_PREFIX",
            "setVirtualDisplayFixedOrientationLocked(android.os.IBinder, int)",
            "access$200(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "binderDied()",
            "setSurfaceLocked(android.view.Surface)",
            "REFRESH_RATE",
            "stopLocked()",
            "mMode",
            "mHeight",
            "mDensityDpi",
            "VirtualDisplayAdapter$VirtualDisplayDevice(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder, android.os.IBinder, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int, com.android.server.display.VirtualDisplayAdapter$Callback, java.lang.String, int)",
            "getUniqueId()",
            "mMirroringDisplay",
            "mSurface",
            "this$0",
            "access$000(com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice)",
            "getDisplayTokenLocked()",
            "dumpLocked(java.io.PrintWriter)",
            "mInfo",
            "mPendingChanges",
            "mDisplayState",
            "setMirroringDisplayLocked(int)",
            "mName",
            "resizeLocked(int, int, int)",
            "mWidth",
            "setFixedOrientationLocked(int)",
            "PENDING_RESIZE",
            "performTraversalInTransactionLocked()",
            "requestDisplayStateLocked(int, int)",
            "mOwnerUid",
            "mStopped",
            "mCallback",
            "mOwnerPackageName",
            "setSurfaceInTransactionLocked(android.view.Surface)",
            "destroyLocked(boolean)",
            "mUniqueIndex",
            "mFixedOrientation",
            "mFlags",
            "PENDING_SURFACE_CHANGE",
            "getDisplayDeviceInfoLocked()",
            "mAppToken",
            "updateDeviceInfoLocked()"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$VirtualDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "MSG_ON_DISPLAY_PAUSED",
            "MSG_ON_DISPLAY_STOPPED",
            "dispatchDisplayStopped()",
            "sendEmptyMessage(int)",
            "MSG_ON_DISPLAY_RESUMED",
            "VirtualDisplayAdapter$Callback(android.hardware.display.IVirtualDisplayCallback, android.os.Handler)",
            "dispatchDisplayPaused()",
            "dispatchDisplayResumed()",
            "mCallback"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$Callback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onStopped()",
            "asBinder()",
            "onResumed()",
            "onPaused()"
          ],
          "added": [],
          "name": "android.hardware.display.IVirtualDisplayCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getScreenBrightness()",
            "waitUntilClean(java.lang.Runnable)",
            "access$100(com.android.server.display.DisplayPowerState)",
            "invokeCleanListenerIfNeeded()",
            "mScreenState",
            "access$602(com.android.server.display.DisplayPowerState, boolean)",
            "getScreenState()",
            "mCleanListener",
            "mDisplayId",
            "setColorFadeLevel(float)",
            "dismissColorFade()",
            "access$1102(com.android.server.display.DisplayPowerState, boolean)",
            "setGlobalScreenStateHint(int)",
            "access$1800(com.android.server.display.DisplayPowerState)",
            "setScreenBrightness(int)",
            "mFinalBrightnessDiff",
            "setColorFadeStateRunnable(com.android.server.display.DisplayPowerController$ColorFadeStateRunnable)",
            "mColorFadePrepared",
            "access$1700(com.android.server.display.DisplayPowerState)",
            "SCREEN_BRIGHTNESS",
            "access$400(com.android.server.display.DisplayPowerState)",
            "mBrightByColorFadeExit",
            "getGlobalScreenStateHint()",
            "mGlobalScreenStateHint",
            "access$002(com.android.server.display.DisplayPowerState, boolean)",
            "postScreenUpdateThreadSafe()",
            "DisplayPowerState(int, com.android.server.display.DisplayBlanker, com.android.server.display.ColorFade, android.content.Context)",
            "access$300(com.android.server.display.DisplayPowerState)",
            "getColorFadeLevel()",
            "access$1600()",
            "mScreenBrightness",
            "access$1302(com.android.server.display.DisplayPowerState, boolean)",
            "scheduleColorFadeDraw()",
            "setScreenState(int)",
            "COLOR_FADE_LEVEL",
            "prepareColorFade(android.content.Context, int)",
            "mColorFadeStateRunnable",
            "access$200(com.android.server.display.DisplayPowerState)",
            "dismissColorFadeResources()",
            "mHandler",
            "access$1200(com.android.server.display.DisplayPowerState)",
            "mColorFade",
            "mColorFadeDrawPending",
            "mScreenUpdatePending",
            "mBlanker",
            "mPhotonicModulator",
            "access$1300(com.android.server.display.DisplayPowerState)",
            "access$900(com.android.server.display.DisplayPowerState)",
            "DEBUG",
            "access$1000(com.android.server.display.DisplayPowerState)",
            "mContext",
            "access$1500(com.android.server.display.DisplayPowerState)",
            "dump(java.io.PrintWriter)",
            "mUseMarkTracker",
            "mColorFadeReady",
            "TAG",
            "mChoreographer",
            "static {}",
            "mBacklight",
            "scheduleScreenUpdate()",
            "access$802(com.android.server.display.DisplayPowerState, boolean)",
            "access$700(com.android.server.display.DisplayPowerState)",
            "mScreenUpdateRunnable",
            "mScreenReady",
            "mColorFadeDrawRunnable",
            "access$500()",
            "mColorFadeLevel",
            "access$1400(com.android.server.display.DisplayPowerState)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setValue(com.android.server.display.DisplayPowerState, int)",
            "DisplayPowerState$2(java.lang.String)",
            "get(java.lang.Object)",
            "get(com.android.server.display.DisplayPowerState)",
            "setValue(java.lang.Object, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayPowerState$3(com.android.server.display.DisplayPowerState)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setValue(java.lang.Object, float)",
            "get(com.android.server.display.DisplayPowerState)",
            "get(java.lang.Object)",
            "setValue(com.android.server.display.DisplayPowerState, float)",
            "DisplayPowerState$1(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "DisplayPowerState$4(com.android.server.display.DisplayPowerState)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayPowerState$PhotonicModulator$1(com.android.server.display.DisplayPowerState$PhotonicModulator)",
            "this$1",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$PhotonicModulator$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mPendingBacklight",
            "DisplayPowerState$PhotonicModulator(com.android.server.display.DisplayPowerState)",
            "access$1900(com.android.server.display.DisplayPowerState$PhotonicModulator)",
            "mBacklightChangeInProgress",
            "mActualState",
            "mPhotonicModulatorTimeMeasurement",
            "setBrightness(int)",
            "mPendingState",
            "mStateChangeInProgress",
            "INITIAL_SCREEN_STATE",
            "mRequestDisplayStateDoneListener",
            "this$0",
            "mLock",
            "start()",
            "INITIAL_BACKLIGHT",
            "mActualBacklight",
            "setState(int, int)",
            "access$2002(com.android.server.display.DisplayPowerState$PhotonicModulator, boolean)",
            "mPendingRequestDisplayState",
            "run()",
            "dump(java.io.PrintWriter)",
            "getFinalMarkerPosition(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerState$PhotonicModulator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "registerRequestDisplayStateDoneListener(java.lang.Runnable)",
            "requestDisplayState(int, int)",
            "requestDisplayState(int, int, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayBlanker",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "FloatProperty(java.lang.String)"
          ],
          "added": [],
          "name": "android.util.FloatProperty",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "onChange(boolean)",
            "MagnifierDisplayPolicy$1(com.android.server.display.MagnifierDisplayPolicy, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mCropWidth",
            "SECTOR_LEFT",
            "getHeight()",
            "mHoverZoomObserver",
            "getPrecision(float)",
            "mFixedHeight",
            "isHoverZoom()",
            "updateDisplayInfo(android.util.DisplayMetrics)",
            "mPointerSize",
            "getPointerSize()",
            "getWidth()",
            "updateSettings(int, int, float)",
            "mDisplayMetrics",
            "mPointerMargin",
            "DEBUG",
            "mDefaultWidth",
            "mBorderPadding",
            "mOnSizeChangeListener",
            "removeOnSizeChanageListener(com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener)",
            "getDefaultDisplay()",
            "mIsHoverZoom",
            "dump(java.io.PrintWriter, java.lang.String)",
            "mCropHeight",
            "setPointMargin()",
            "mWindowManager",
            "SECTOR_RIGHT",
            "access$502(com.android.server.display.MagnifierDisplayPolicy, boolean)",
            "MagnifierDisplayPolicy(android.content.Context)",
            "mDefaultDisplay",
            "access$500(com.android.server.display.MagnifierDisplayPolicy)",
            "SECTOR_CENTER",
            "setPadding(android.graphics.Rect)",
            "access$600(com.android.server.display.MagnifierDisplayPolicy)",
            "mDm",
            "mFixedWidth",
            "toString()",
            "getDefaultDisplayInfo()",
            "mScale",
            "SECTOR_NONE",
            "getDisplayInfo(android.view.MagnificationSpec)",
            "mDefaultDisplayInfo",
            "setPrecision()",
            "addOnSizeChanageListener(com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener)",
            "access$400(com.android.server.display.MagnifierDisplayPolicy)",
            "checkUpdateDisplayInfo()",
            "mContext",
            "mLastDisplayInfo",
            "TAG",
            "mDefaultHeight"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IDisplayManager$Stub()",
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.hardware.display.IDisplayManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mSurfaceOffset",
            "mSurfaceCropRect",
            "mAbsOffset",
            "access$200(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "access$000(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "mPointOffset",
            "this$0",
            "MagnifierDisplayPolicy$DisplayInfo(com.android.server.display.MagnifierDisplayPolicy)",
            "getPointOffset()",
            "toString()",
            "getSurfaceOffset()",
            "getSurfaceCropRect()",
            "access$300(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "access$100(com.android.server.display.MagnifierDisplayPolicy$DisplayInfo)",
            "getAbsOffset()"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$DisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSizeChanged(boolean)",
            "MagnifierSurfaceControl$1(com.android.server.display.MagnifierSurfaceControl)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mDrawableCloseMarginTop",
            "mDrawableCloseMarginRight",
            "mBorderSurface",
            "show()",
            "mDrawable",
            "mDrawableClose",
            "mDrawableScreenChangeMarginTop",
            "mDrawableHandlerSize",
            "mBorderLock",
            "MagnifierSurfaceControl$Border(android.content.Context, int, int, int)",
            "mContext",
            "mBorderFxSession",
            "mShowing",
            "mBorderSurfaceControl",
            "mPadding",
            "dismiss()",
            "TAG",
            "mDrawableCloseSize",
            "fingerMagnifierState",
            "setPosition(android.graphics.Point)",
            "setSize(int, int)",
            "isRTL(android.content.Context)",
            "getPadding()",
            "mDrawableScreenChangeMarginRight",
            "mDrawableScreenChangeSize",
            "mDrawableScreenChange",
            "hide()",
            "DEBUG"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$Border",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DEBUG",
            "MagnifierSurfaceControl$HoverPoint(android.content.Context, int, int)",
            "TAG",
            "setPosition(android.graphics.Point)",
            "mDrawable",
            "show()",
            "hide()",
            "mPointSurfaceControl",
            "dismiss()",
            "mPointFxSession",
            "mPointLock",
            "mPointSurface"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$HoverPoint",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IDLE",
            "TAG",
            "mState",
            "mCurrentDisplayId",
            "FEATURE_OVERLAYMAGNIFIER",
            "access$500(com.android.server.display.MagnifierSurfaceControl)",
            "show(android.view.MagnificationSpec)",
            "mHandler",
            "mLock",
            "access$700(com.android.server.display.MagnifierSurfaceControl)",
            "updateMagnificationSpec(android.view.MagnificationSpec)",
            "hide()",
            "mSizeChangeListener",
            "access$100(com.android.server.display.MagnifierSurfaceControl)",
            "mContext",
            "mPoint",
            "access$000(com.android.server.display.MagnifierSurfaceControl)",
            "access$702(com.android.server.display.MagnifierSurfaceControl, com.android.server.display.MagnifierSurfaceControl$Border)",
            "access$600(com.android.server.display.MagnifierSurfaceControl)",
            "mFxSession",
            "access$900(com.android.server.display.MagnifierSurfaceControl)",
            "mPolicy",
            "CREATED",
            "dump(java.io.PrintWriter, java.lang.String)",
            "access$1100(com.android.server.display.MagnifierSurfaceControl)",
            "access$200(com.android.server.display.MagnifierSurfaceControl)",
            "destroyMainSurface()",
            "create()",
            "mListener",
            "onDisplayChanged(int)",
            "HIDDEN",
            "MagnifierSurfaceControl(android.content.Context, com.android.server.display.MagnifierSurfaceControl$Listener, android.os.Handler, com.android.server.display.MagnifierDisplayPolicy, int)",
            "createDefaultSurface()",
            "onDisplayAdded(int)",
            "STABILIZER",
            "access$1000(com.android.server.display.MagnifierSurfaceControl)",
            "DEBUG",
            "access$1002(com.android.server.display.MagnifierSurfaceControl, int)",
            "static {}",
            "access$400(com.android.server.display.MagnifierSurfaceControl)",
            "onDisplayRemoved(int)",
            "dismiss()",
            "SHOWN",
            "mDisplayManager",
            "access$800(com.android.server.display.MagnifierSurfaceControl)",
            "mSurfaceControl",
            "mSurface",
            "access$300(com.android.server.display.MagnifierSurfaceControl)",
            "mLastOffsetY",
            "mLastOffsetX",
            "mBorder"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onCreateSurface(android.view.Surface, int, int)",
            "onChangeSurface(android.view.Surface)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierSurfaceControl$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSizeChanged(boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayPolicy$OnSizeChangeListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onChange(boolean)",
            "this$1",
            "OverlayDisplayAdapter$1$1(com.android.server.display.OverlayDisplayAdapter$1, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayAdapter$OverlayDisplayHandle$2(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "run()",
            "this$1"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "MIN_HEIGHT",
            "chooseOverlayGravity(int)",
            "mOverlays",
            "TAG",
            "getHandler()",
            "static {}",
            "MODE_PATTERN",
            "access$000(com.android.server.display.OverlayDisplayAdapter)",
            "updateOverlayDisplayDevicesLocked()",
            "access$100(com.android.server.display.OverlayDisplayAdapter)",
            "getSyncRoot()",
            "updateOverlayDisplayDevices()",
            "dumpLocked(java.io.PrintWriter)",
            "UNIQUE_ID_PREFIX",
            "mUiHandler",
            "OverlayDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, android.os.Handler)",
            "mCurrentOverlaySetting",
            "registerLocked()",
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "getContext()",
            "DISPLAY_PATTERN",
            "MAX_WIDTH",
            "DEBUG",
            "MIN_WIDTH",
            "MAX_HEIGHT"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayAdapter$OverlayDisplayDevice(com.android.server.display.OverlayDisplayAdapter, android.os.IBinder, java.lang.String, java.util.List, int, int, float, long, boolean, int, android.graphics.SurfaceTexture, int)",
            "mInfo",
            "getDisplayDeviceInfoLocked()",
            "destroyLocked()",
            "mState",
            "mActiveMode",
            "getDisplayTokenLocked()",
            "mName",
            "requestColorTransformAndModeInTransactionLocked(int, int)",
            "this$0",
            "mDefaultMode",
            "mModes",
            "getUniqueId()",
            "mSecure",
            "mSurfaceTexture",
            "mDisplayPresentationDeadlineNanos",
            "mRawModes",
            "performTraversalInTransactionLocked()",
            "mRefreshRate",
            "setSurfaceInTransactionLocked(android.view.Surface)",
            "mSurface",
            "onModeChangedLocked(int)",
            "setStateLocked(int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mHeight",
            "mDensityDpi",
            "mWidth",
            "OverlayDisplayAdapter$OverlayMode(int, int, int)",
            "toString()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayAdapter$OverlayDisplayHandle$3(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "this$1",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$1",
            "onModeChangedLocked(int)",
            "OverlayDisplayAdapter$OverlayDisplayHandle$1(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, android.os.IBinder, java.lang.String, java.util.List, int, int, float, long, boolean, int, android.graphics.SurfaceTexture, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayAdapter$1(com.android.server.display.OverlayDisplayAdapter)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "DEFAULT_MODE_INDEX",
            "mSecure",
            "mModes",
            "access$700(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "mNumber",
            "mActiveMode",
            "mShowRunnable",
            "mDevice",
            "onStateChanged(int)",
            "access$800(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "showLocked()",
            "mResizeRunnable",
            "access$300(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "access$200(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, int)",
            "access$400(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "OverlayDisplayAdapter$OverlayDisplayHandle(com.android.server.display.OverlayDisplayAdapter, java.lang.String, java.util.List, int, boolean, int)",
            "access$500(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "mDismissRunnable",
            "access$802(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle, com.android.server.display.OverlayDisplayWindow)",
            "dumpLocked(java.io.PrintWriter)",
            "mGravity",
            "mWindow",
            "dismissLocked()",
            "mName",
            "access$600(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "onWindowDestroyed()",
            "onActiveModeChangedLocked(int)",
            "onWindowCreated(android.graphics.SurfaceTexture, float, long, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "OverlayDisplayAdapter$OverlayDisplayHandle$4(com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle)",
            "this$1"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayAdapter$OverlayDisplayHandle$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "updateTexImage()",
            "release()",
            "getTransformMatrix(float[])",
            "SurfaceTexture(int)"
          ],
          "added": [],
          "name": "android.graphics.SurfaceTexture",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)",
            "onSurfaceTextureUpdated(android.graphics.SurfaceTexture)",
            "OverlayDisplayWindow$2(com.android.server.display.OverlayDisplayWindow)",
            "onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture, int, int)",
            "onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setScaleX(float)",
            "setScaleY(float)",
            "setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)",
            "setPivotX(float)",
            "setPivotY(float)",
            "getLayoutParams()",
            "getScaleY()",
            "getScaleX()",
            "setOpaque(boolean)"
          ],
          "added": [],
          "name": "android.view.TextureView",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayWindow$4(com.android.server.display.OverlayDisplayWindow)",
            "onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTouch(android.view.View, android.view.MotionEvent)",
            "this$0",
            "OverlayDisplayWindow$3(com.android.server.display.OverlayDisplayWindow)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.view.TextureView$SurfaceTextureListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "access$100(com.android.server.display.OverlayDisplayWindow)",
            "resize(int, int, int, boolean)",
            "show()",
            "OverlayDisplayWindow(android.content.Context, java.lang.String, int, int, int, int, boolean, com.android.server.display.OverlayDisplayWindow$Listener)",
            "access$000(com.android.server.display.OverlayDisplayWindow)",
            "dismiss()",
            "mLiveTranslationY",
            "access$300(com.android.server.display.OverlayDisplayWindow)",
            "DEBUG",
            "mScaleGestureDetector",
            "mSecure",
            "mOnTouchListener",
            "clearLiveState()",
            "mDefaultDisplay",
            "access$200(com.android.server.display.OverlayDisplayWindow)",
            "mOnGestureListener",
            "MIN_SCALE",
            "mHeight",
            "access$824(com.android.server.display.OverlayDisplayWindow, float)",
            "DISABLE_MOVE_AND_RESIZE",
            "saveWindowParams()",
            "mWindowVisible",
            "access$724(com.android.server.display.OverlayDisplayWindow, float)",
            "WINDOW_ALPHA",
            "mTitle",
            "mTextureView",
            "mListener",
            "access$500(com.android.server.display.OverlayDisplayWindow)",
            "mSurfaceTextureListener",
            "createWindow()",
            "mWindowY",
            "mName",
            "mWindowContent",
            "mWindowParams",
            "mWindowX",
            "mGestureDetector",
            "INITIAL_SCALE",
            "mWindowScale",
            "dump(java.io.PrintWriter, java.lang.String)",
            "mDisplayManager",
            "mContext",
            "mWidth",
            "MAX_SCALE",
            "mTitleTextView",
            "access$600(com.android.server.display.OverlayDisplayWindow)",
            "mDisplayListener",
            "mOnScaleGestureListener",
            "mWindowManager",
            "updateDefaultDisplayInfo()",
            "updateWindowParams()",
            "mDefaultDisplayInfo",
            "relayout()",
            "mGravity",
            "access$400(com.android.server.display.OverlayDisplayWindow)",
            "mDensityDpi",
            "mLiveTranslationX",
            "mLiveScale",
            "resize(int, int, int)",
            "TAG",
            "access$932(com.android.server.display.OverlayDisplayWindow, float)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayWindow$1(com.android.server.display.OverlayDisplayWindow)",
            "onDisplayRemoved(int)",
            "onDisplayChanged(int)",
            "onDisplayAdded(int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.view.ScaleGestureDetector$OnScaleGestureListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "setQuickScaleEnabled(boolean)",
            "ScaleGestureDetector(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener)",
            "getScaleFactor()",
            "getFocusY()",
            "getFocusX()",
            "onTouchEvent(android.view.MotionEvent)"
          ],
          "added": [],
          "name": "android.view.ScaleGestureDetector",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onWindowDestroyed()",
            "onStateChanged(int)",
            "onWindowCreated(android.graphics.SurfaceTexture, float, long, int)"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLDisplay",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "glGetAttribLocation(int, java.lang.String)",
            "glCreateProgram()",
            "glVertexAttribPointer(int, int, int, boolean, int, int)",
            "glDeleteBuffers(int, int[], int)",
            "glClear(int)",
            "glUniformMatrix4fv(int, int, boolean, float[], int)",
            "glGenTextures(int, int[], int)",
            "glUseProgram(int)",
            "glFlush()",
            "glReleaseShaderCompiler()",
            "glTexParameteri(int, int, int)",
            "glUniform1i(int, int)",
            "glAttachShader(int, int)",
            "glCompileShader(int)",
            "glFinish()",
            "glClearColor(float, float, float, float)",
            "glBindTexture(int, int)",
            "glGetUniformLocation(int, java.lang.String)",
            "glLinkProgram(int)",
            "glGetShaderiv(int, int, int[], int)",
            "glGetShaderSource(int)",
            "glBufferData(int, int, java.nio.Buffer, int)",
            "glGetError()",
            "glViewport(int, int, int, int)",
            "glCreateShader(int)",
            "glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer)",
            "glDeleteProgram(int)",
            "glUniform1f(int, float)",
            "glGetShaderInfoLog(int)",
            "glGenBuffers(int, int[], int)",
            "glDrawArrays(int, int, int)",
            "glDeleteShader(int)",
            "glEnableVertexAttribArray(int)",
            "glDeleteTextures(int, int[], int)",
            "glUniform2fv(int, int, float[], int)",
            "glBindBuffer(int, int)",
            "glActiveTexture(int)",
            "glShaderSource(int, java.lang.String)"
          ],
          "added": [],
          "name": "android.opengl.GLES20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mTexNames",
            "DEBUG",
            "mGLBuffers",
            "destroyGLShaders()",
            "mEglDisplay",
            "ColorFade(int)",
            "DEJANK_FRAMES",
            "destroyGLBuffers()",
            "mProjMatrix",
            "createEglContext()",
            "mEglSurface",
            "mTex1D",
            "mEglConfig",
            "checkGlErrors(java.lang.String)",
            "mVertexLoc",
            "captureScreenshotTextureAndSetViewport()",
            "mEglContext",
            "checkGlErrors(java.lang.String, boolean)",
            "initGLShaders(android.content.Context)",
            "mSurfaceControl",
            "prepare(android.content.Context, int)",
            "createSurface()",
            "mMode",
            "mAlphaLoc",
            "mCreatedResources",
            "mDeviceDimVec",
            "mFeather",
            "mTexMatrixLoc",
            "mSaturationLoc",
            "mSurfaceVisible",
            "sine80Tex",
            "mTimeMeasurementForPrepare",
            "drawEdgeUnite(float)",
            "destroyScreenshotTexture()",
            "mDisplayManager",
            "mCollapseLoc",
            "mSurface",
            "showSurface(float)",
            "attachEglContext()",
            "mDisplayManagerInternal",
            "mDisplayHeight",
            "mProgram",
            "segments70",
            "segmentsSIn33",
            "COLOR_FADE_LAYER",
            "detachEglContext()",
            "interpol_SineInOut80Interpolation_getStep(float)",
            "mTimeMeasurement",
            "mDisplayLayerStack",
            "mScaleLoc",
            "mVertexBuffer",
            "dump(java.io.PrintWriter)",
            "mDeviceDimLoc",
            "mTexCoordLoc",
            "segments80",
            "mTex1DLoc",
            "createEglSurface()",
            "mTex1DGenerated",
            "setupGradientTexture()",
            "static {}",
            "logEglError(java.lang.String)",
            "readFile(android.content.Context, int)",
            "interpol_SineInOut70Interpolation_getStep(float)",
            "setQuad(java.nio.FloatBuffer, float, float, float, float)",
            "MODE_FADE",
            "TAG",
            "destroyGradientTexture()",
            "mTexCoordBuffer",
            "MODE_COOL_DOWN",
            "interpol_SineIn33Interpolation_getStep(float)",
            "mOpacityLoc",
            "mDisplayWidth",
            "ortho(float, float, float, float, float, float)",
            "MODE_EDGE_UNITE",
            "mPrepared",
            "mSurfaceAlpha",
            "destroyEglSurface()",
            "mDisplayId",
            "loadShader(android.content.Context, int, int)",
            "dismiss()",
            "dismissResources()",
            "draw(float)",
            "initGLBuffers()",
            "mOpacity",
            "createNativeFloatBuffer(int)",
            "mSurfaceLayout",
            "MODE_EDGE_COLLAPSE",
            "destroySurface()",
            "mTexMatrix",
            "mTexNamesGenerated",
            "drawEdgeCollapse(float)",
            "mSurfaceSession",
            "mProjMatrixLoc",
            "MODE_WARM_UP",
            "mTexUnitLoc",
            "mGammaLoc",
            "drawFaded(float, float, float, float)"
          ],
          "added": [],
          "name": "com.android.server.display.ColorFade",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLContext",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLSurface",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "eglInitialize(android.opengl.EGLDisplay, int[], int, int[], int)",
            "eglChooseConfig(android.opengl.EGLDisplay, int[], int, android.opengl.EGLConfig[], int, int, int[], int)",
            "eglCreateContext(android.opengl.EGLDisplay, android.opengl.EGLConfig, android.opengl.EGLContext, int[], int)",
            "eglGetDisplay(int)",
            "EGL_NO_DISPLAY",
            "EGL_NO_CONTEXT",
            "eglGetError()",
            "eglCreateWindowSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, java.lang.Object, int[], int)",
            "eglDestroySurface(android.opengl.EGLDisplay, android.opengl.EGLSurface)",
            "EGL_NO_SURFACE",
            "eglMakeCurrent(android.opengl.EGLDisplay, android.opengl.EGLSurface, android.opengl.EGLSurface, android.opengl.EGLContext)",
            "eglSwapBuffers(android.opengl.EGLDisplay, android.opengl.EGLSurface)"
          ],
          "added": [],
          "name": "android.opengl.EGL14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.opengl.EGLConfig",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "mDisplayManagerInternal",
            "ColorFade$NaturalSurfaceLayout(android.hardware.display.DisplayManagerInternal, int, android.view.SurfaceControl)",
            "onDisplayTransaction()",
            "dispose()",
            "mDisplayId",
            "mSurfaceControl"
          ],
          "added": [],
          "name": "com.android.server.display.ColorFade$NaturalSurfaceLayout",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IpRemoteDisplayController$1(com.android.server.display.IpRemoteDisplayController, android.os.Handler, android.content.ContentResolver)",
            "onChange(boolean, android.net.Uri)",
            "this$0",
            "val$resolver"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$event",
            "val$param",
            "this$0",
            "IpRemoteDisplayController$12(com.android.server.display.IpRemoteDisplayController, int, int)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayError(int)",
            "IpRemoteDisplayController$7(com.android.server.display.IpRemoteDisplayController)",
            "onDisplayDisconnected()",
            "onDisplayConnected(android.view.Surface, int, int, int, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "val$connectedMode",
            "IpRemoteDisplayController$5(com.android.server.display.IpRemoteDisplayController, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTerminateRequested()",
            "IpRemoteDisplayController$6(com.android.server.display.IpRemoteDisplayController)",
            "onHeadSetConnected()",
            "onQoSLevelChanged(int)",
            "onTransportChanged(int)",
            "onWeakNetwork()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$ipAddr",
            "val$deviceType",
            "val$port",
            "IpRemoteDisplayController$3(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, int, java.lang.String)",
            "this$0",
            "run()",
            "val$options"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "IpRemoteDisplayController$13(com.android.server.display.IpRemoteDisplayController)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "IpRemoteDisplayController$2(com.android.server.display.IpRemoteDisplayController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$1700(com.android.server.display.IpRemoteDisplayController)",
            "access$2500(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "access$802(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "connectWfdBridgeServer(java.net.InetAddress)",
            "DEBUG",
            "reportFeatureState()",
            "handleConnectionFailure(boolean)",
            "access$800(com.android.server.display.IpRemoteDisplayController)",
            "mSupportsProtectedBuffers",
            "mAdvertisedDisplay",
            "RTSP_TIMEOUT_SECONDS",
            "isDongleRenameAvailable()",
            "access$1002(com.android.server.display.IpRemoteDisplayController, boolean)",
            "access$700(com.android.server.display.IpRemoteDisplayController)",
            "setParamData(org.json.JSONObject, int, int, int, boolean, boolean, int, boolean, boolean, int)",
            "access$1300(com.android.server.display.IpRemoteDisplayController, int, int)",
            "access$1600(com.android.server.display.IpRemoteDisplayController)",
            "requestResume()",
            "access$100(com.android.server.display.IpRemoteDisplayController)",
            "access$302(com.android.server.display.IpRemoteDisplayController, boolean)",
            "mListener",
            "TAG",
            "mHandler",
            "access$2600(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "access$300(com.android.server.display.IpRemoteDisplayController)",
            "access$1800(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "access$1500(com.android.server.display.IpRemoteDisplayController)",
            "access$1100(com.android.server.display.IpRemoteDisplayController, int)",
            "createWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "broadcastWfdState(int)",
            "mHDMIConnected",
            "getWifiDisplayBridgeStatus()",
            "access$102(com.android.server.display.IpRemoteDisplayController, boolean)",
            "mPrevNativeDisposeCompleted",
            "mRemoteDisplayConnected",
            "mAdvertisedDisplayFlags",
            "requestPause()",
            "advertiseDisplay(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "enableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String)",
            "mAdvertisedDisplayHeight",
            "notifyBridgeStatus(int)",
            "requestDataSetting(org.json.JSONObject, int)",
            "updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "mConnectState",
            "access$200(com.android.server.display.IpRemoteDisplayController, int)",
            "mConnectedDevice",
            "requestPopup(int)",
            "mWfdBridgeServer",
            "requestEnableWifiDisplay(android.net.wifi.p2p.WifiP2pDevice, int)",
            "access$500(com.android.server.display.IpRemoteDisplayController)",
            "launchWfdPlayerByWBS(int, java.net.InetAddress)",
            "access$602(com.android.server.display.IpRemoteDisplayController, boolean)",
            "mRequestPendingSetup",
            "isWfdEngineRunning()",
            "tryCommunication(int)",
            "sendDisplayEventToExtendedListener(int, int)",
            "access$1400(com.android.server.display.IpRemoteDisplayController)",
            "disableWifiDisplay(int)",
            "disconnectWfdBridgeServer()",
            "enableWifiDisplay(int, java.net.InetAddress)",
            "mBridgeReceiver",
            "access$400(com.android.server.display.IpRemoteDisplayController)",
            "requestDisableWifiDisplay(int)",
            "mAdvertisedDisplaySurface",
            "tryCommunication(android.net.wifi.p2p.WifiP2pDevice, int)",
            "unadvertiseDisplay()",
            "mRemoteDisplay",
            "access$1900(com.android.server.display.IpRemoteDisplayController)",
            "requestEnableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String)",
            "mRemoteDisplayInterface",
            "mWfdUibcManager",
            "access$1200(com.android.server.display.IpRemoteDisplayController)",
            "notifyExitHomeSyncApp()",
            "mAdvertisedDisplayWidth",
            "mRtspTimeout",
            "access$000(com.android.server.display.IpRemoteDisplayController)",
            "access$900(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, int, java.lang.String)",
            "IpRemoteDisplayController(android.content.Context, android.os.Handler, com.android.server.display.IpRemoteDisplayController$Listener)",
            "isWifiDisplayBridgeAvailable()",
            "mDisconnectByUser",
            "mWifiDisplayOnSetting",
            "requestEnableWifiDisplay(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "access$2100(com.android.server.display.IpRemoteDisplayController, boolean)",
            "computeFeatureState()",
            "notifyEnterHomeSyncApp()",
            "access$2000(com.android.server.display.IpRemoteDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "isRunningHomeSync",
            "launchWfdPlayer(int, java.net.InetAddress)",
            "requestScreenMirroringEnable(boolean)",
            "access$600(com.android.server.display.IpRemoteDisplayController)",
            "disconnect()",
            "mContext"
          ],
          "added": [
            "access$1400(com.android.server.display.IpRemoteDisplayController, int, int)",
            "access$2200(com.android.server.display.IpRemoteDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int, int)",
            "access$2100(com.android.server.display.IpRemoteDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "access$1700(com.android.server.display.IpRemoteDisplayController, boolean)",
            "access$2700(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "access$2000(com.android.server.display.IpRemoteDisplayController)",
            "access$2300(com.android.server.display.IpRemoteDisplayController, boolean)",
            "access$1200(com.android.server.display.IpRemoteDisplayController, int)",
            "access$1300(com.android.server.display.IpRemoteDisplayController)",
            "access$1102(com.android.server.display.IpRemoteDisplayController, boolean)",
            "access$2800(com.android.server.display.IpRemoteDisplayController, int, java.net.InetAddress)",
            "access$1100(com.android.server.display.IpRemoteDisplayController)",
            "access$1800(com.android.server.display.IpRemoteDisplayController)"
          ],
          "name": "com.android.server.display.IpRemoteDisplayController",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "val$display",
            "val$oldDisplayHeight",
            "val$oldDisplayWidth",
            "this$0",
            "run()",
            "val$oldDisplay",
            "val$connectedMode",
            "val$height",
            "IpRemoteDisplayController$11(com.android.server.display.IpRemoteDisplayController, android.view.Surface, android.view.Surface, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay, int, int, int, boolean, int, int, int)",
            "val$surface",
            "val$flags",
            "val$oldSurface",
            "val$requestPendingSetup",
            "val$width"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "val$deviceType",
            "IpRemoteDisplayController$8(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress, int)",
            "val$addr",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onBridgeConnected()",
            "onGetStatus()",
            "IpRemoteDisplayController$WfdBridgeAdapter$1(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "onConnRequest(int, int, java.net.InetAddress)",
            "onError(int)",
            "onOK(java.net.InetAddress)",
            "this$1"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IpRemoteDisplayController$9(com.android.server.display.IpRemoteDisplayController, int)",
            "run()",
            "this$0",
            "val$featureState"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$9",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$deviceType",
            "val$isPendingRequest",
            "val$remoteP2pMacAddr",
            "val$options",
            "IpRemoteDisplayController$4(com.android.server.display.IpRemoteDisplayController, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, int, java.lang.String)",
            "run()",
            "val$ipAddr",
            "val$deviceName",
            "this$0",
            "val$port"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "val$addr",
            "val$reqDevType",
            "IpRemoteDisplayController$10(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress, int)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$10",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$2402(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "getBridgeConnType()",
            "access$2200(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "getState()",
            "mBridge",
            "CONNECT_TYPE_SERVER",
            "SOURCE_STATE_SHIFT",
            "SCREEN_OFF",
            "SOURCE_STATE_MASK",
            "IpRemoteDisplayController$WfdBridgeAdapter(com.android.server.display.IpRemoteDisplayController, java.net.InetAddress)",
            "SINK_STATE_MASK",
            "WFD_BRIDGE_PORT",
            "isWfdEngineRunning()",
            "mPendingType",
            "startWFDEngine(int, int, java.net.InetAddress)",
            "TAG",
            "SCREEN_ON",
            "setSinkState(int)",
            "this$0",
            "SINK_STATE_SHIFT",
            "access$2300(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "disconnect()",
            "mBridgeListner",
            "updateClientDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "SCREEN_STATE_MASK",
            "access$2400(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "requestSource(int)",
            "connect()",
            "isConnected()",
            "mScreenState",
            "requestSink(android.net.wifi.p2p.WifiP2pDevice, int)",
            "access$2302(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "mPendingDev",
            "STATE_DISABLED",
            "mSinkState",
            "mSourceState",
            "SCREEN_STATE_SHIFT",
            "getConnAddr()",
            "setSourceState(int)",
            "CONNECT_TYPE_CLIENT",
            "STATE_ENABLED",
            "setScreenState(int)"
          ],
          "added": [
            "access$2500(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)",
            "access$2502(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "access$2602(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter, int)",
            "access$2600(com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter)"
          ],
          "name": "com.android.server.display.IpRemoteDisplayController$WfdBridgeAdapter",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "onDisplayDisconnected()",
            "onDisplayConnectionFailed()",
            "onFeatureStateChanged(int)",
            "onQosLevelChanged(int)",
            "onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "onDisplayDisconnecting()",
            "onDisplayConnecting(android.hardware.display.WifiDisplay, int)"
          ],
          "added": [],
          "name": "com.android.server.display.IpRemoteDisplayController$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "dispose()",
            "isDongleRenameAvailable()",
            "setDeviceName(java.lang.String)",
            "listen(java.lang.String, android.media.RemoteDisplay$Listener, android.os.Handler, java.lang.String, java.lang.String)",
            "pause()",
            "setParam(int, java.lang.String)",
            "resume()"
          ],
          "added": [],
          "name": "android.media.RemoteDisplay",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "offsetOf(int)",
            "mCount",
            "push(long, float)",
            "mRingLux",
            "size()",
            "AutomaticBrightnessController$AmbientLightRingBuffer(long)",
            "getLux(int)",
            "mStart",
            "clear()",
            "mCapacity",
            "mRingTime",
            "BUFFER_SLACK",
            "toString()",
            "getTime(int)",
            "mEnd",
            "prune(long)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$1",
            "run()",
            "AutomaticBrightnessController$SettingsObserver$1(com.android.server.display.AutomaticBrightnessController$SettingsObserver)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$SettingsObserver$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "AutomaticBrightnessController$AutomaticBrightnessHandler(com.android.server.display.AutomaticBrightnessController, android.os.Looper)",
            "removeMessages(int)",
            "post(java.lang.Runnable)",
            "sendEmptyMessageAtTime(int, long)",
            "this$0",
            "sendEmptyMessageDelayed(int, long)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "AutomaticBrightnessController$UserSwitchedReceiver(com.android.server.display.AutomaticBrightnessController)",
            "onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$UserSwitchedReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "AutomaticBrightnessController$2(com.android.server.display.AutomaticBrightnessController)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "AutomaticBrightnessController$SettingsObserver(com.android.server.display.AutomaticBrightnessController, android.os.Handler)",
            "onChange(boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$SettingsObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mLowBoundary",
            "mOffset",
            "this$0",
            "mLux",
            "mOrgCd",
            "AutomaticBrightnessController$OffsetPoint(com.android.server.display.AutomaticBrightnessController, float, float, int)",
            "mOffsetType",
            "mHighBoundary",
            "toString()",
            "BOUNDARY_RATIO"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$OffsetPoint",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTwilightStateChanged()",
            "AutomaticBrightnessController$6(com.android.server.display.AutomaticBrightnessController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "printOffsetList(java.util.ArrayList)",
            "removeAllSubOffsetPointsLocked()",
            "refreshFixedOffsetPointsLocked(int)",
            "SIZE_DEFAULT_LIST",
            "removeAllReverseUserOffsetPointsLocked(int)",
            "getStringForOffsetList(java.util.ArrayList)",
            "init()",
            "getSlope(float, float, float, float)",
            "mOffsetList",
            "this$0",
            "getOffset(float)",
            "resetPersonalAutoBrightness()",
            "AutomaticBrightnessController$PersonalAutoBrightness(com.android.server.display.AutomaticBrightnessController)",
            "HBM_LUX",
            "addSubOffsetPointsIfNeededLocked(int)",
            "addToListAfterBoundaryCheckLocked(float, int, float)",
            "addPoint(float, int)",
            "mOp0Lux",
            "getPersonalScreenAutoBrightness(float)",
            "getPersonalAutoBrightnessHighHysteresis(float)",
            "BASIS_LUX",
            "checkReversePointsByUsingAutoBrightnessTableValue(int)",
            "mOpBeforeHbmLux",
            "dump(java.io.PrintWriter)",
            "getPersonalAutoBrightnessLowHysteresis(float)",
            "getIndex(java.util.ArrayList, float)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$PersonalAutoBrightness",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "MIN_ABS_ACCELERATION",
            "SAMPLING_PERIOD_MS",
            "mCnt",
            "RADIANS_TO_DEGREES",
            "lowpassFilter(float, float, float)",
            "handleAccelerationDistrust(float)",
            "vectorMagnitude(float, float, float)",
            "mAccelerationDistrust",
            "tiltAngle(float, float)",
            "mTiltDistrust",
            "MAX_DEVIATION_FROM_GRAVITY",
            "onSensorChanged(android.hardware.SensorEvent)",
            "AutomaticBrightnessController$3(com.android.server.display.AutomaticBrightnessController)",
            "ACCELERATING_TIME_CONSTANT_MS",
            "onAccuracyChanged(android.hardware.Sensor, int)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mTimeMeasurement",
            "getTwilightGamma(long, long, long)",
            "mTemporaryScreenBrightnessSettingOverride",
            "access$1200(com.android.server.display.AutomaticBrightnessController)",
            "getAmbientLuxAndCandelaFromSensorHub()",
            "mLastHBM",
            "mAmbientCandela",
            "access$1400(com.android.server.display.AutomaticBrightnessController)",
            "mScreenAutoBrightness",
            "lastLightSensorEventTime",
            "access$1700(com.android.server.display.AutomaticBrightnessController, long)",
            "mDynamicAutoBrightnessConfig",
            "AMBIENT_LIGHT_HORIZON",
            "DEBUG",
            "access$1300(com.android.server.display.AutomaticBrightnessController)",
            "mContext",
            "calculateAmbientLux(long)",
            "DEBUG_PRETEND_LIGHT_SENSOR_ABSENT",
            "access$402(com.android.server.display.AutomaticBrightnessController, long)",
            "sendLuxLevel(float, boolean)",
            "mIsSupportedSensorHubAutoBrightness",
            "mPersonalAutoBrightness",
            "mLockPAB",
            "prepareBrightnessAdjustmentSample()",
            "HBM_LEVEL_SYSFS_PATH",
            "access$3402(com.android.server.display.AutomaticBrightnessController, boolean)",
            "changeModeInSensorHubAutoBrightness(int)",
            "access$1100(com.android.server.display.AutomaticBrightnessController)",
            "mLastScreenAutoBrightnessGamma",
            "mDozing",
            "access$1000(com.android.server.display.AutomaticBrightnessController)",
            "access$2400(com.android.server.display.AutomaticBrightnessController, boolean)",
            "access$2512(com.android.server.display.AutomaticBrightnessController, int)",
            "access$2902(com.android.server.display.AutomaticBrightnessController, float)",
            "getAutomaticScreenBrightness()",
            "WEIGHTING_INTERCEPT",
            "MSG_PRINT_LAST_LIGHT_SENSOR_EVENT",
            "handleLightSensorEvent(long, float)",
            "BRIGHTNESS_ADJUSTMENT_SAMPLE_DEBOUNCE_MILLIS",
            "AUTO_BRIGHTNESS_LEVEL_PATH",
            "access$1800(com.android.server.display.AutomaticBrightnessController)",
            "lastRawBrightnessValue",
            "mBrightnessAdjustmentSampleOldLux",
            "mDarkeningLuxThreshold",
            "updateAmbientLux()",
            "access$1900(com.android.server.display.AutomaticBrightnessController)",
            "mLightSensorWarmUpTimeConfig",
            "mSettingsObserver",
            "mWasTconMaxLevel",
            "DARKENING_LIGHT_HYSTERESIS",
            "mUseSystemPowerSaveMode",
            "mPendingScreenAutoBrightness",
            "setAmbientLux(float)",
            "access$1500(com.android.server.display.AutomaticBrightnessController)",
            "HBM_USER_ENABLE",
            "isPabUpdatePending()",
            "mRecentLightSamples",
            "mAmbientLux",
            "access$2802(com.android.server.display.AutomaticBrightnessController, float)",
            "notifySurfaceFlinger()",
            "access$1600(com.android.server.display.AutomaticBrightnessController)",
            "mSContextManager",
            "getAmbientLux()",
            "mExistCommonLuxPath",
            "mSensorHubAutoBrightnessListener",
            "setOutdoorMode(boolean)",
            "mScreenBrightnessSetting",
            "mLightSensorRate",
            "access$2500(com.android.server.display.AutomaticBrightnessController)",
            "mScreenAutoBrightnessSpline",
            "access$3002(com.android.server.display.AutomaticBrightnessController, float)",
            "mExistMdnieAutoBrightnessLevelPath",
            "access$3300(com.android.server.display.AutomaticBrightnessController, boolean)",
            "mPendingScreenBrightnessSetting",
            "TWILIGHT_ADJUSTMENT_MAX_GAMMA",
            "mScreenBrightnessModeSetting",
            "setLightSensorEnabled(boolean)",
            "mResetAmbientLuxAfterWarmUpConfig",
            "mLastObservedSensorHubLuxTime",
            "access$800(com.android.server.display.AutomaticBrightnessController)",
            "setScreenAutoBrightnessAdjustment(float)",
            "access$3202(com.android.server.display.AutomaticBrightnessController, boolean)",
            "access$2600(com.android.server.display.AutomaticBrightnessController, long, float)",
            "access$2900(com.android.server.display.AutomaticBrightnessController)",
            "AutomaticBrightnessController(com.android.server.display.AutomaticBrightnessController$Callbacks, android.os.Looper, android.hardware.SensorManager, android.util.Spline, int, int, int, float, int, long, long, boolean, android.hardware.scontext.SContextManager, boolean, com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig, android.content.Context)",
            "USE_TWILIGHT_ADJUSTMENT",
            "updatePersonalScreenAutoBrightnessTableLocked(boolean)",
            "TAG",
            "mTwilight",
            "SPECIFIC_HBM_FEATURE",
            "mScreenBrightnessRangeMinimum",
            "mSECAverageLux",
            "updateFinalAutoBrightness(boolean, float, float, float)",
            "isManualAutoBrightnessValid()",
            "mRecentSensorHubSamples",
            "configure(boolean, float, boolean, boolean, boolean, boolean, float, boolean, boolean, int)",
            "mPrevUsingVariableMaxManualBrightness",
            "mUseAutoBrightness",
            "TAG_DAB",
            "mLightSensorListener",
            "updateAutoBrightnessSEC(boolean)",
            "mScreenAutoBrightnessAdjustment",
            "mBrightnessAdjustmentSamplePending",
            "mCallbacks",
            "TAG_PAB",
            "mBrightnessAdjustmentSampleOldAdjustment",
            "OFFSET_FIX",
            "access$000(com.android.server.display.AutomaticBrightnessController)",
            "mManualAdjustment",
            "updateAutoBrightness(boolean)",
            "mPrevTconBrightnessMode",
            "cancelBrightnessAdjustmentSample()",
            "mDebounceLuxDirection",
            "isHbmEnabled()",
            "mTiltAngle",
            "access$3500(com.android.server.display.AutomaticBrightnessController)",
            "mAutoBrightnessForEbookOnly",
            "mHandler",
            "applyLightSensorMeasurement(long, float)",
            "TCON_BRIGHTNESS_MODE_PATH",
            "dump(java.io.PrintWriter)",
            "mBrightnessAdjustmentSampleOldGamma",
            "printLastLightSensorEvent()",
            "calculateWeight(long, long)",
            "mBrighteningLightDebounceConfig",
            "weightIntegral(long)",
            "TAG_SENSOR",
            "USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT",
            "mHBMDisableLevel",
            "mNeedToAddPersonalAutoBrightnessPoint",
            "MDNIE_AUTO_BRIGHTNESS_LEVEL_PATH",
            "mHandlerRegisterInSeperateThread",
            "OFFSET_SUB",
            "mBrightnessAdjustmentSampleOldBrightness",
            "clampScreenBrightness(int)",
            "mLastObservedLux",
            "mExistTconBrightnessModePath",
            "nextAmbientLightDarkeningTransition(long)",
            "mLastTemporaryScreenBrightnessSettingOverride",
            "mPrevCommonLux",
            "updateAmbientLux(long)",
            "access$2102(com.android.server.display.AutomaticBrightnessController, boolean)",
            "mLightSensor",
            "access$700(com.android.server.display.AutomaticBrightnessController)",
            "mUserSwitched",
            "access$500(com.android.server.display.AutomaticBrightnessController)",
            "collectBrightnessAdjustmentSample()",
            "access$2000(com.android.server.display.AutomaticBrightnessController)",
            "access$600(com.android.server.display.AutomaticBrightnessController)",
            "mHandlerRegisterInSeperate",
            "mTiltListener",
            "mLastObservedLuxTime",
            "access$2200(com.android.server.display.AutomaticBrightnessController)",
            "access$2100(com.android.server.display.AutomaticBrightnessController)",
            "mSensorManager",
            "nextAmbientLightBrighteningTransition(long)",
            "BRIGHTENING_LIGHT_HYSTERESIS",
            "OFFSET_USER",
            "mBrighteningLuxThreshold",
            "isAmbientLuxValid()",
            "mExistTconLuxPath",
            "access$3000(com.android.server.display.AutomaticBrightnessController)",
            "applyLightSensorMeasurementSEC(long, float)",
            "access$300(com.android.server.display.AutomaticBrightnessController)",
            "access$200(com.android.server.display.AutomaticBrightnessController)",
            "access$2300(com.android.server.display.AutomaticBrightnessController)",
            "checkMarkerUserDetach(int)",
            "mLightSensorEnableTime",
            "mSensorListenerRegistrationRunnable",
            "SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA",
            "mDarkeningLightDebounceConfig",
            "MSG_BRIGHTNESS_ADJUSTMENT_SAMPLE",
            "mScreenBrightnessRangeMaximum",
            "COMMON_LUX_PATH",
            "mDozeScaleFactor",
            "mSensorListenerUnregistrationRunnable",
            "mTwilightListener",
            "mDebounceLuxTime",
            "mHasRetailModeApp",
            "mUsingVariableMaxManualBrightness",
            "access$2702(com.android.server.display.AutomaticBrightnessController, long)",
            "mAmbientLightRingBuffer",
            "mPrevAutoBrightnessLevel",
            "TCON_LUX_PATH",
            "mAmbientLuxValid",
            "mLowHysteresis",
            "MSG_UPDATE_AMBIENT_LUX",
            "mUseManualAutoBrightness",
            "mScreenBrightnessSettingDefault",
            "access$900(com.android.server.display.AutomaticBrightnessController)",
            "mTiltSensor",
            "SPECIFIC_HBM_LUX",
            "mSettingAutoBrightness",
            "readFromFile(java.lang.String)",
            "mPrevTconLuxLevel",
            "mExistAutoBrightnessLevelPath",
            "AMBIENT_LIGHT_PREDICTION_TIME_MILLIS",
            "MANUAL_LUX_LIMIT",
            "mLightSensorEnabled",
            "check_HBM_Detail()",
            "mIsLockZone",
            "access$100(com.android.server.display.AutomaticBrightnessController, boolean)",
            "access$3102(com.android.server.display.AutomaticBrightnessController, long)",
            "lastLightSensorValue",
            "access$1602(com.android.server.display.AutomaticBrightnessController, float)",
            "updateAmbientLuxSEC(long)",
            "mLatestAnimationTarget",
            "static {}",
            "mHighHysteresis",
            "TWILIGHT_ADJUSTMENT_TIME"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSensorChanged(android.hardware.SensorEvent)",
            "AutomaticBrightnessController$4(com.android.server.display.AutomaticBrightnessController)",
            "onAccuracyChanged(android.hardware.Sensor, int)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "AutomaticBrightnessController$1(com.android.server.display.AutomaticBrightnessController)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getStringType()",
            "getMaximumRange()"
          ],
          "added": [],
          "name": "android.hardware.Sensor",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.SensorEventListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "unregisterListener(android.hardware.SensorEventListener)",
            "registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)",
            "cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)",
            "getDefaultSensor(int, boolean)",
            "registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)",
            "requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor)",
            "getDefaultSensor(int)"
          ],
          "added": [],
          "name": "android.hardware.SensorManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.scontext.SContextListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getFeatureLevel(int)",
            "registerListener(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute)",
            "registerListener(android.hardware.scontext.SContextListener, int)",
            "unregisterListener(android.hardware.scontext.SContextListener)",
            "registerListener(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute, android.os.Looper)",
            "unregisterListener(android.hardware.scontext.SContextListener, int)",
            "registerListener(android.hardware.scontext.SContextListener, int, android.os.Looper)",
            "isAvailableService(int)",
            "setReferenceData(int, android.hardware.scontext.SContextAttribute)",
            "changeParameters(android.hardware.scontext.SContextListener, int, android.hardware.scontext.SContextAttribute)",
            "registerListener(android.hardware.scontext.SContextListener, int, int)"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.hardware.scontext.SContextAttribute",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "updateBrightness()"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$Callbacks",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mAutoBrightnessLevelStepRatioForEbook",
            "getDynamicAutoBrightnessHighHysteresis(float)",
            "sendAutoBrightnessTablePacket(byte[])",
            "initDynamicAutoBrightnessSlopeTables()",
            "mBrightnessLevelsForEbookOnly",
            "mLowHysteresisLevels",
            "mLowHysteresisSlope",
            "getDynamicAutoBrightnessValue(float)",
            "getAutoBrightnessTablePacket()",
            "getDynamicAutoBrightnessLevelStepRatio(float, boolean)",
            "getDynamicAutoBrightnessLowHysteresis(float)",
            "mAutoBrightnessLevelStepRatioAt0Lux",
            "mValueOfVirtualZeroCandela",
            "mMinimumBrightnessStepValue",
            "mBrightnessValues",
            "mHighHysteresisValuesForEbookOnly",
            "mLowHysteresisLevelsForEbookOnly",
            "isTablet()",
            "mAutoBrightnessLevelStepRatio",
            "mBrightnessValuesForEbookOnly",
            "mHighHysteresisLevels",
            "mHighHysteresisLevelsForEbookOnly",
            "mLowHysteresisValues",
            "mLowLimitAtHighestAutoBrightnessLevel",
            "mMinimumExpressiveBrightnessValues",
            "mBrightnessLevels",
            "mHighHysteresisSlope",
            "mLowHysteresisSlopeForEbookOnly",
            "getSlope(int, int, int, int, boolean)",
            "mHighHysteresisValues",
            "dumpAutoBrightnessTables(java.io.PrintWriter)",
            "getFinalDynamicAutoBrightnessValue(float, float)",
            "mLowHysteresisValuesForEbookOnly",
            "access$400(com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig, java.io.PrintWriter)",
            "this$0",
            "DisplayPowerController$DynamicAutoBrightnessConfig(com.android.server.display.DisplayPowerController)",
            "mBrightnessValueSlopeForEbookOnly",
            "mBrightnessValueSlope",
            "mHighHysteresisSlopeForEbookOnly",
            "mIsTablet",
            "initializeProperties()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$DynamicAutoBrightnessConfig",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "SContextAutoBrightnessAttribute(int)",
            "SContextAutoBrightnessAttribute(byte[])"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextAutoBrightnessAttribute",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "pow(float, float)"
          ],
          "added": [],
          "name": "android.util.FloatMath",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "removeMessages(int)",
            "this$0",
            "sendMessage(android.os.Message)",
            "obtainMessage(int, java.lang.Object)",
            "post(java.lang.Runnable)",
            "handleMessage(android.os.Message)",
            "runWithScissors(java.lang.Runnable, long)",
            "postAtFrontOfQueue(java.lang.Runnable)",
            "sendMessageAtTime(android.os.Message, long)",
            "DisplayPowerController$DisplayControllerHandler(com.android.server.display.DisplayPowerController, android.os.Looper)",
            "obtainMessage(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$DisplayControllerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "val$pw",
            "DisplayPowerController$7(com.android.server.display.DisplayPowerController, java.io.PrintWriter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "DisplayPowerController$3(com.android.server.display.DisplayPowerController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "DisplayPowerController$5(com.android.server.display.DisplayPowerController)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "AccelerateInterpolator(float)"
          ],
          "added": [],
          "name": "android.view.animation.AccelerateInterpolator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "updateColorWeaknessMode(boolean, boolean)",
            "access$1500()",
            "HBM_LUX",
            "blockScreenOn()",
            "Manual_ADJ_Table",
            "readOneLine(java.lang.String)",
            "mCallbacks",
            "initialize()",
            "mPendingWaitForNegativeProximityLocked",
            "normalizeAbsoluteBrightness(int)",
            "mLock",
            "mProximityThreshold",
            "clampScreenBrightness(int)",
            "TAG",
            "USE_SLOW_AUTO_BRIGHTNESS_CHANGE",
            "MARKER_TRACKING_RATE_SLOW",
            "TAG_DAB",
            "USE_DYNAMIC_ANTI_GLARE",
            "sendOnProximityNegativeWithWakelock()",
            "mColorFadeStateRunnable",
            "setPendingProximityDebounceTime(long)",
            "mProximitySensorEnabled",
            "mScreenBrightnessRangeMinimum",
            "AVAILABLE_COLOR_WEAKNESS_MODE",
            "mOnProximityPositiveRunnable",
            "EDGE_UNITE_EFFECT_ENABLED",
            "mUsingVariableMaxManualBrightness",
            "handleProximitySensorEvent(long, boolean)",
            "access$000(com.android.server.display.DisplayPowerController)",
            "setActualDisplayState(int, int)",
            "mOnProximityNegativeRunnable",
            "mPowerState",
            "mAllowAutoBrightnessWhileDozingConfig",
            "COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS",
            "access$800(com.android.server.display.DisplayPowerController)",
            "Manual_Step",
            "reportedToPolicyToString(int)",
            "mScreenOnOffAlreadyDone",
            "mRampAnimatorListener",
            "mAppliedDimming",
            "mPassRampAnimation",
            "CLEAR_VIEW_BRIGHTNESS_MODE_PATH",
            "EDGE_COLLAPSE_EFFECT_ENABLED",
            "mAppliedLowPower",
            "mWaitingForNegativeProximity",
            "animateScreenBrightness(int, int)",
            "mSection_Brightness",
            "PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY",
            "mAppliedAutoBrightness",
            "EDGE_UNITE_LCD_OFF_DURATION_MILLIS",
            "getFinalBrightness(int)",
            "access$1100(com.android.server.display.DisplayPowerController, long, boolean)",
            "mBlanker",
            "DUAL_SCREEN_COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS",
            "access$500(com.android.server.display.DisplayPowerController)",
            "mDisplayReadyLocked",
            "access$1200(com.android.server.display.DisplayPowerController)",
            "mProximity",
            "mScreenBrightnessRangeMaximum",
            "mPendingProximity",
            "access$700(com.android.server.display.DisplayPowerController)",
            "mContext",
            "mColorFadeOnAnimator",
            "EDGE_COLLAPSE_LCD_OFF_DURATION_MILLIS",
            "mWindowManagerPolicy",
            "POWERSAVEMODE_BRIGHTNESS_OFFSET",
            "access$1000(com.android.server.display.DisplayPowerController)",
            "TAG_SENSOR",
            "requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)",
            "MSG_UPDATE_POWER_STATE",
            "mScreenBrightnessDarkConfig",
            "getColumnOrder(int)",
            "initManualAutobrightnessTable()",
            "mIsCheckDynamicAntiGlareDone",
            "mManualAutoBrightnessAdjustment",
            "access$1800(com.android.server.display.DisplayPowerController)",
            "SCREEN_ON_BLOCKED_TRACE_NAME",
            "CLEAR_VIEW_BRIGHTNESS_MODE_RATIO",
            "setScreenOnAndElectronBeamExit()",
            "mLastUpdateCoverStateTime",
            "mScreenBrightnessBeforeFinal",
            "mHandler",
            "access$200(com.android.server.display.DisplayPowerController)",
            "getCurrentScreenBrightnessBeforeFinal()",
            "mClearViewColorWeaknessEnabledMode",
            "sendOnProximityPositiveWithWakelock()",
            "$assertionsDisabled",
            "updateBrightness()",
            "BRIGHTNESS_MODE_CLEAR_VIEW",
            "sendUpdatePowerStateLocked()",
            "isSensorhubAutoBrightnessAvailable()",
            "mProximitySensor",
            "mFinalTemporaryScreenBrightness",
            "getClearViewBrightnessRatio(float)",
            "dumpLocal(java.io.PrintWriter)",
            "dump(java.io.PrintWriter)",
            "BRIGHTNESS_RAMP_RATE_FAST",
            "USE_COLOR_FADE_ON_ANIMATION",
            "mCleanListener",
            "mSContextManager",
            "isProximitySensorAvailable()",
            "static {}",
            "mLatestAnimationTarget",
            "mOnStateChangedRunnable",
            "mPendingScreenOnUnblocker",
            "mScreenBrightnessRampAnimator",
            "mStrAutoBrightnessTablePacket",
            "REPORTED_TO_POLICY_SCREEN_OFF",
            "Manual_Adding_Brightness",
            "DisplayPowerController(android.content.Context, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager, com.android.server.display.DisplayBlanker)",
            "mPendingRequestChangedLocked",
            "clearPendingProximityDebounceTime()",
            "mActualDisplayState",
            "PROXIMITY_NEGATIVE",
            "COLOR_WEAKNESS_MODE_PATH",
            "REPORTED_TO_POLICY_SCREEN_ON",
            "mPendingScreenAutoBrightness",
            "BRIGHTNESS_MODE_COLOR_WEAKNESS",
            "getManualAddingBrightnessInfo(int)",
            "mScreenOnEvenThoughProximityPositive",
            "PROXIMITY_POSITIVE",
            "mReportedScreenStateToPolicy",
            "mIsScreenOnWithoutBrightnessAnimation",
            "animateScreenStateChange(int, int, boolean)",
            "updatePowerState()",
            "access$1600(com.android.server.display.DisplayPowerController)",
            "access$1300(com.android.server.display.DisplayPowerController)",
            "getManualADJInfo(int)",
            "BRIGHTNESS_RAMP_RATE_SLOW",
            "DISPLAY_SUB",
            "mPendingProximityDebounceTime",
            "TYPICAL_PROXIMITY_THRESHOLD",
            "mPrevOutdoorMode",
            "setProximitySensorEnabled(boolean)",
            "access$1702(com.android.server.display.DisplayPowerController, java.lang.String)",
            "LUX_FOR_DYNAMIC_ANTI_GLARE",
            "mDynamicAutoBrightnessConfig",
            "mSensorManager",
            "mOldLowPowerMode",
            "MSG_SCREEN_ON_UNBLOCKED",
            "mScreenBrightnessDimConfig",
            "mLastMultiScreenState",
            "mScreenOffBecauseOfProximity",
            "mColorFadeFadesConfig",
            "mPendingUpdatePowerStateLocked",
            "REPORTED_TO_POLICY_SCREEN_TURNING_ON",
            "COLOR_WEAKNESS_MODE_RATIO",
            "access$300(com.android.server.display.DisplayPowerController, java.io.PrintWriter)",
            "access$900(com.android.server.display.DisplayPowerController)",
            "mPendingScreenOff",
            "MARKER_TRACKING_RATE_FAST",
            "PATH_DEVICE_BRIGHTNESS_STEP",
            "mPendingRequestLocked",
            "PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY",
            "sendUpdatePowerState()",
            "sendOnStateChangedWithWakelock()",
            "COLOR_FADE_ON_ANIMATION_DURATION_MILLIS",
            "access$1400(com.android.server.display.DisplayPowerController)",
            "debounceProximitySensor()",
            "mWaitProximityToggled",
            "setScreenState(int, int)",
            "mBatteryStats",
            "DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT",
            "createAutoBrightnessSpline(int[], int[])",
            "mAnimatorListener",
            "mAutomaticBrightnessController",
            "mUnfinishedBusiness",
            "mPowerRequest",
            "mUseSoftwareAutoBrightnessConfig",
            "mColorFadeOffAnimator",
            "mProximitySensorListener",
            "PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY_FOR_COVER",
            "PROXIMITY_UNKNOWN",
            "mDynamicAutoBrightnessEnabled",
            "DEBUG",
            "access$1900(com.android.server.display.DisplayPowerController)",
            "mUseABCForDynamicAntiGlare",
            "mOldDisplayPolicy",
            "SCREEN_DIM_MINIMUM_REDUCTION",
            "mIsSupportedSensorhubAutoBrightness",
            "mTimeMeasurement",
            "MSG_PROXIMITY_SENSOR_DEBOUNCED",
            "mPendingScreenOnEvenThoughProximityPositiveLocked",
            "setScreenState(int)",
            "mScreenBrightnessDozeConfig",
            "access$600(com.android.server.display.DisplayPowerController)",
            "proximityToString(int)",
            "DISPLAY_MAIN",
            "BRIGHTNESS_MODE_NONE",
            "mOldUseTemporaryScreenBrightnessSettingOverride",
            "mScreenOnBlockStartRealTime",
            "clampAbsoluteBrightness(int)",
            "unblockScreenOn()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onAnimationStart(android.animation.Animator)",
            "this$0",
            "DisplayPowerController$1(com.android.server.display.DisplayPowerController)",
            "onAnimationRepeat(android.animation.Animator)",
            "onAnimationCancel(android.animation.Animator)",
            "onAnimationEnd(android.animation.Animator)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "DisplayPowerController$2(com.android.server.display.DisplayPowerController)",
            "onAnimationEnd()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSensorChanged(android.hardware.SensorEvent)",
            "this$0",
            "DisplayPowerController$8(com.android.server.display.DisplayPowerController)",
            "onAccuracyChanged(android.hardware.Sensor, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayPowerController$6(com.android.server.display.DisplayPowerController)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayPowerController$4(com.android.server.display.DisplayPowerController)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "DisplayPowerController$ScreenOnUnblocker(com.android.server.display.DisplayPowerController, com.android.server.display.DisplayPowerController$1)",
            "onScreenOn()",
            "DisplayPowerController$ScreenOnUnblocker(com.android.server.display.DisplayPowerController)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$ScreenOnUnblocker",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "of(java.lang.Class, java.lang.Class, java.lang.String)"
          ],
          "added": [],
          "name": "android.util.Property",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "createSpline(float[], float[])",
            "interpolate(float)"
          ],
          "added": [],
          "name": "android.util.Spline",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "releaseSuspendBlocker()",
            "onDisplayStateChange(int, int)",
            "onStateChanged()",
            "acquireSuspendBlocker()",
            "onColorFadeExit(boolean)",
            "onProximityNegative()",
            "onSetInteractiveNeeded(int, int)",
            "onProximityPositive()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "this$0",
            "DisplayPowerController$ColorFadeStateRunnable(com.android.server.display.DisplayPowerController)",
            "setState(boolean)",
            "mExit"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayPowerController$ColorFadeStateRunnable",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onScreenOn()"
          ],
          "added": [],
          "name": "android.view.WindowManagerPolicy$ScreenOnListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "WifiDisplayAdapter$WifiDisplayHandler(com.android.server.display.WifiDisplayAdapter, android.os.Looper)",
            "this$0",
            "sendEmptyMessage(int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$WifiDisplayHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$11(com.android.server.display.WifiDisplayAdapter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onScanFinished()",
            "onDisplayConnecting(android.hardware.display.WifiDisplay)",
            "onDisplayDisconnected()",
            "WifiDisplayAdapter$17(com.android.server.display.WifiDisplayAdapter)",
            "onClientUpdated(android.net.wifi.p2p.WifiP2pDevice)",
            "onDisplayDisconnecting()",
            "onDisplayChanged(android.hardware.display.WifiDisplay)",
            "onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "onDisplayConnecting(android.hardware.display.WifiDisplay, int)",
            "onP2pConnected(java.net.InetAddress)",
            "onScanResults(android.hardware.display.WifiDisplay[])",
            "this$0",
            "onScanStarted()",
            "onDisplaySessionInfo(android.hardware.display.WifiDisplaySessionInfo)",
            "onP2pDisconnected()",
            "onFeatureStateChanged(int)",
            "onDisplayConnectionFailed()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$17",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayAdapter$23(com.android.server.display.WifiDisplayAdapter)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$23",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayAdapter$6(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "val$address",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$event",
            "run()",
            "WifiDisplayAdapter$14(com.android.server.display.WifiDisplayAdapter, int, int)",
            "this$0",
            "val$param"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayAdapter$WifiDisplayDevice(com.android.server.display.WifiDisplayAdapter, android.os.IBinder, java.lang.String, int, int, float, int, java.lang.String, android.view.Surface)",
            "getDisplayDeviceInfoLocked()",
            "setSurfaceInTransactionLocked(android.view.Surface)",
            "mInfo",
            "mWidth",
            "destroyLocked()",
            "mName",
            "mRefreshRate",
            "getNameLocked()",
            "getDisplayTokenLocked()",
            "mSurface",
            "getUniqueId()",
            "mFlags",
            "mMode",
            "this$0",
            "performTraversalInTransactionLocked()",
            "mAddress",
            "mHeight",
            "setNameLocked(java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$WifiDisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "this$0",
            "WifiDisplayAdapter$9(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$9",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayAdapter$25(com.android.server.display.WifiDisplayAdapter)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$25",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "WifiDisplayAdapter$3(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayAdapter$1(com.android.server.display.WifiDisplayAdapter)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayAdapter$2(com.android.server.display.WifiDisplayAdapter)",
            "onDisplayDisconnecting()",
            "this$0",
            "onFeatureStateChanged(int)",
            "onDisplayConnectionFailed()",
            "onDisplayDisconnected()",
            "onQosLevelChanged(int)",
            "onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "onDisplayConnecting(android.hardware.display.WifiDisplay, int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "this$0",
            "WifiDisplayAdapter$21(com.android.server.display.WifiDisplayAdapter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "val$remoteP2pMacAddr",
            "run()",
            "val$isPendingRequest",
            "val$options",
            "val$port",
            "val$ipAddr",
            "val$deviceName",
            "val$deviceType"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter$21",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$10(com.android.server.display.WifiDisplayAdapter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$10",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$connectingMode",
            "val$address",
            "run()",
            "this$0",
            "WifiDisplayAdapter$7(com.android.server.display.WifiDisplayAdapter, int, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$12(com.android.server.display.WifiDisplayAdapter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$19(com.android.server.display.WifiDisplayAdapter, android.net.wifi.p2p.WifiP2pDevice, int)",
            "val$device",
            "val$type",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$19",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "val$address",
            "run()",
            "this$0",
            "val$connectingMode",
            "val$isPendingRequest",
            "WifiDisplayAdapter$8(com.android.server.display.WifiDisplayAdapter, int, java.lang.String, boolean)"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter$8",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayAdapter$13(com.android.server.display.WifiDisplayAdapter)",
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayAdapter$5(com.android.server.display.WifiDisplayAdapter)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayAdapter$4(com.android.server.display.WifiDisplayAdapter)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "WifiDisplayAdapter$22(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$22",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$15(com.android.server.display.WifiDisplayAdapter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$15",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "this$0",
            "WifiDisplayAdapter$24(com.android.server.display.WifiDisplayAdapter)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$24",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mSettingsPendingIntent",
            "access$1802(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "mDisplays",
            "mIpRemoteDisplayListener",
            "mCurrentStatus",
            "requestDisableWiFiP2P()",
            "access$200(com.android.server.display.WifiDisplayAdapter)",
            "access$1100(com.android.server.display.WifiDisplayAdapter)",
            "access$2700(com.android.server.display.WifiDisplayAdapter)",
            "renameDisplayDeviceLocked(java.lang.String)",
            "mConnectState",
            "mPendingNotificationUpdate",
            "requestEnableLocked(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "requestResumeLocked()",
            "getScreenSharingStatus()",
            "mDisplayController",
            "access$000(com.android.server.display.WifiDisplayAdapter)",
            "IsRunningIpRemoteDisplay()",
            "notifyEnterHomeSyncApp()",
            "isSinkAvailable()",
            "access$002(com.android.server.display.WifiDisplayAdapter, com.android.server.display.WifiDisplayController)",
            "mLastRememberedDisplay",
            "access$3000(com.android.server.display.WifiDisplayAdapter)",
            "access$1300(com.android.server.display.WifiDisplayAdapter)",
            "scheduleDLNADisconnectReqBroadcastLocked()",
            "access$400(com.android.server.display.WifiDisplayAdapter)",
            "isWfdEngineRunning()",
            "access$2102(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "addDisplayDeviceLocked(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "mActiveDisplayState",
            "requestConnectLocked(int, java.lang.String, boolean)",
            "setSourceState(int)",
            "isDLNADeviceConnected()",
            "mLastConnectedDLNADevice",
            "mWifiDisplayListener",
            "MSG_DLNA_DISCONNECT_REQ_BROADCAST",
            "mDisplayDevice",
            "requestDisconnectForMirroringSwitching()",
            "requestDisconnectLocked()",
            "access$1500(com.android.server.display.WifiDisplayAdapter)",
            "requestRenameLocked(java.lang.String, java.lang.String)",
            "handleSendDLNADisconnectReqBroadcast()",
            "setSinkState(int)",
            "setParameter(int, int, java.lang.String)",
            "isWifiDisplayBridgeAvailable()",
            "mConnectedDLNADevice",
            "handleSendStartFABBroadcast()",
            "sendDisplayEventToExtendedListener(int, int)",
            "mSupportsProtectedBuffers",
            "registerLocked()",
            "requestStopScanLocked()",
            "updateRememberedDLNADevice()",
            "findAvailableDisplayLocked(java.lang.String)",
            "access$2000(com.android.server.display.WifiDisplayAdapter)",
            "renameDongleLocked(java.lang.String)",
            "mPersistentDataStore",
            "access$2100(com.android.server.display.WifiDisplayAdapter)",
            "access$2602(com.android.server.display.WifiDisplayAdapter, int)",
            "access$900(com.android.server.display.WifiDisplayAdapter)",
            "notifyExitHomeSyncApp()",
            "requestEnableLocked(java.lang.String, java.lang.String, int, java.lang.String)",
            "DISPLAY_NAME_PREFIX",
            "access$2400(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "access$2900(com.android.server.display.WifiDisplayAdapter)",
            "access$902(com.android.server.display.WifiDisplayAdapter, int)",
            "dumpLocked(java.io.PrintWriter)",
            "access$600(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String)",
            "mPendingStatusChangeBroadcast",
            "mPendingStopFloatingIconBroadcast",
            "access$1400(com.android.server.display.WifiDisplayAdapter)",
            "access$702(com.android.server.display.WifiDisplayAdapter, int)",
            "isSourceAvailable()",
            "mHandler",
            "isWfdConnected()",
            "mQoSLevel",
            "access$1302(com.android.server.display.WifiDisplayAdapter, int)",
            "access$2802(com.android.server.display.WifiDisplayAdapter, int)",
            "handleUpdateNotification()",
            "access$1800(com.android.server.display.WifiDisplayAdapter)",
            "mActiveDisplay",
            "mScreenSharingStatus",
            "access$2500(com.android.server.display.WifiDisplayAdapter)",
            "access$500(com.android.server.display.WifiDisplayAdapter)",
            "scheduleStopFloatingIconBroadcastLocked()",
            "access$2200(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "access$100(com.android.server.display.WifiDisplayAdapter)",
            "requestConnectLocked(java.lang.String)",
            "handleSendStopFABBroadcast()",
            "mAvailableDisplays",
            "getDLNADeviceAddress()",
            "requestPauseLocked()",
            "mScanState",
            "access$202(com.android.server.display.WifiDisplayAdapter, com.android.server.display.IpRemoteDisplayController)",
            "restartWifiDisplayLocked()",
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "mScanRequestedInConnected",
            "getContext()",
            "mRememberedDisplays",
            "updateRememberedDisplaysLocked()",
            "getLastConnectedDisplay(boolean)",
            "mSessionInfo",
            "access$1200(com.android.server.display.WifiDisplayAdapter)",
            "MSG_SEND_STATUS_CHANGE_BROADCAST",
            "mFeatureState",
            "ACTION_DISCONNECT",
            "WifiDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, com.android.server.display.PersistentDataStore)",
            "WFD_NOTIFICATION",
            "requestClearConnectedDisplayInfo()",
            "turnOffPeriodicWifiScan(boolean)",
            "MSG_START_FAB_BROADCAST",
            "mDisconnectPendingIntent",
            "fixRememberedDisplayNamesFromAvailableDisplaysLocked()",
            "isConnWithPinSupported(java.lang.String)",
            "access$1900(com.android.server.display.WifiDisplayAdapter)",
            "scheduleUpdateNotificationLocked()",
            "requestEnableLocked(android.net.wifi.p2p.WifiP2pDevice, int)",
            "getHandler()",
            "mSinkState",
            "getDLNADeviceName()",
            "isDongleRenameAvailableLocked()",
            "getLastConnectedDLNADevice()",
            "TAG",
            "access$1000(com.android.server.display.WifiDisplayAdapter)",
            "access$1502(com.android.server.display.WifiDisplayAdapter, int)",
            "requestSaveConnectedDisplayInfo()",
            "handleSendStatusChangeBroadcast()",
            "requestForgetLocked(java.lang.String)",
            "DEBUG",
            "access$1700(com.android.server.display.WifiDisplayAdapter)",
            "requestStartScanLocked()",
            "scheduleStartFloatingIconBroadcastLocked()",
            "access$700(com.android.server.display.WifiDisplayAdapter)",
            "setLastConnectedDLNADevice(android.hardware.display.DLNADevice)",
            "setScreenSharingStatus(int)",
            "MSG_STOP_FAB_BROADCAST",
            "access$2302(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplaySessionInfo)",
            "getDLNAType()",
            "isKDDIServiceConnected()",
            "MSG_UPDATE_NOTIFICATION",
            "rememberedDisplayLocked(android.hardware.display.WifiDisplay)",
            "requestDisableLocked()",
            "requestConnectWithPinLocked(java.lang.String)",
            "insertLog(java.lang.String, java.lang.String)",
            "mSourceState",
            "access$800(com.android.server.display.WifiDisplayAdapter)",
            "scheduleStatusChangedBroadcastLocked()",
            "requestConnectLocked(int, java.lang.String)",
            "mPendingStartFloatingIconBroadcast",
            "access$1602(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "removeLastConnectedDLNADevice()",
            "getSyncRoot()",
            "updateDisplaysLocked()",
            "mNotificationManager",
            "setScanningChannelLocked(int)",
            "access$300(com.android.server.display.WifiDisplayAdapter)",
            "mBroadcastReceiver",
            "removeDisplayDeviceLocked()",
            "getWifiDisplayBridgeStatus()",
            "mPendingDLNADisconnectReqBroadcast",
            "mIpRemoteDisplayController",
            "getDLNADeviceUid()",
            "getWifiDisplayStatusLocked()"
          ],
          "added": [
            "access$2700(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "access$1400(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String)",
            "access$3002(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplaySessionInfo)",
            "access$3900(com.android.server.display.WifiDisplayAdapter)",
            "access$3502(com.android.server.display.WifiDisplayAdapter, int)",
            "access$4000(com.android.server.display.WifiDisplayAdapter)",
            "access$2600(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "access$2302(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "access$3600(com.android.server.display.WifiDisplayAdapter)",
            "access$600(com.android.server.display.WifiDisplayAdapter)",
            "access$1600(com.android.server.display.WifiDisplayAdapter, int, int)",
            "access$3700(com.android.server.display.WifiDisplayAdapter)",
            "access$2002(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay)",
            "access$2102(com.android.server.display.WifiDisplayAdapter, android.hardware.display.WifiDisplay[])",
            "access$3200(com.android.server.display.WifiDisplayAdapter)",
            "access$902(com.android.server.display.WifiDisplayAdapter, boolean)",
            "access$1702(com.android.server.display.WifiDisplayAdapter, int)",
            "access$3800(com.android.server.display.WifiDisplayAdapter)",
            "access$1502(com.android.server.display.WifiDisplayAdapter, android.hardware.display.DLNADevice)",
            "access$2400(com.android.server.display.WifiDisplayAdapter)",
            "access$3300(com.android.server.display.WifiDisplayAdapter)",
            "access$2200(com.android.server.display.WifiDisplayAdapter)",
            "access$2300(com.android.server.display.WifiDisplayAdapter)",
            "access$1902(com.android.server.display.WifiDisplayAdapter, int)",
            "access$802(com.android.server.display.WifiDisplayAdapter, int)",
            "access$3100(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "access$3400(com.android.server.display.WifiDisplayAdapter)"
          ],
          "name": "com.android.server.display.WifiDisplayAdapter",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayAdapter$20(com.android.server.display.WifiDisplayAdapter, java.lang.String, java.lang.String, int, java.lang.String)",
            "this$0",
            "val$port",
            "run()",
            "val$options",
            "val$ipAddr",
            "val$deviceType"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$address",
            "WifiDisplayAdapter$18(com.android.server.display.WifiDisplayAdapter, java.lang.String)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$18",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayAdapter$16(com.android.server.display.WifiDisplayAdapter)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayAdapter$16",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "loadRememberedDLNADeviceFromXml(org.xmlpull.v1.XmlPullParser)",
            "mRememberedWifiDisplays",
            "forgetRememberedDLNADevice()",
            "applyWifiDisplayAliases(android.hardware.display.WifiDisplay[])",
            "saveIfNeeded()",
            "loadFromXml(org.xmlpull.v1.XmlPullParser)",
            "TAG",
            "applyWifiDisplayAlias(android.hardware.display.WifiDisplay)",
            "getRememberedWifiDisplay(java.lang.String)",
            "rememberDLNADevice(android.hardware.display.DLNADevice)",
            "loadIfNeeded()",
            "PersistentDataStore()",
            "mLoaded",
            "mAtomicFile",
            "forgetWifiDisplay(java.lang.String)",
            "clearState()",
            "getRememberedWifiDisplays()",
            "loadRememberedWifiDisplaysFromXml(org.xmlpull.v1.XmlPullParser)",
            "findRememberedWifiDisplay(java.lang.String)",
            "mRememberedDLNADevice",
            "rememberWifiDisplay(android.hardware.display.WifiDisplay)",
            "saveToXml(org.xmlpull.v1.XmlSerializer)",
            "setDirty()",
            "getRememberedDLNADevice()",
            "mDirty",
            "load()",
            "save()"
          ],
          "added": [],
          "name": "com.android.server.display.PersistentDataStore",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [
            "DLNADevice(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean)",
            "getUid()",
            "equals(android.hardware.display.DLNADevice)",
            "getDLNAType()",
            "getIpAddress()",
            "getMacAddressFromARP()",
            "isSwitchingDevice()",
            "getDeviceName()",
            "getP2pMacAddress()",
            "getNetType()"
          ],
          "name": "android.hardware.display.DLNADevice",
          "change_type": 1
        },
        {
          "size": 1,
          "removed": [
            "DisplayManagerService$LocalService$1$1(com.android.server.display.DisplayManagerService$LocalService$1)",
            "run()",
            "this$2"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "this$0",
            "obtainMessage(int, int, int)",
            "DisplayManagerService$DisplayManagerHandler(com.android.server.display.DisplayManagerService, android.os.Looper)",
            "sendEmptyMessage(int)",
            "sendMessage(android.os.Message)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$DisplayManagerHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "FORCE_WIFI_DISPLAY_ENABLE",
            "getDisplayInfoInternal(int, int, int, android.os.IBinder, boolean)",
            "registerDefaultDisplayAdapter()",
            "MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER",
            "access$5300(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "access$2500(com.android.server.display.DisplayManagerService)",
            "mPersistentDataStore",
            "access$3400(com.android.server.display.DisplayManagerService, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "MSG_DELIVER_DISPLAY_EVENT",
            "handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)",
            "mTempCallbacks",
            "resumeWifiDisplayInternal()",
            "handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)",
            "mInputMethodTargetDisplayId",
            "requestColorTransformInternal(int, int)",
            "forgetWifiDisplayInternal(java.lang.String)",
            "access$300(com.android.server.display.DisplayManagerService)",
            "removeScaledPids()",
            "access$3300(com.android.server.display.DisplayManagerService)",
            "mDisplayPowerController",
            "mDisplayTransactionListeners",
            "access$5102(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayPowerController)",
            "access$3700(com.android.server.display.DisplayManagerService, android.os.IBinder, int)",
            "requestDisplayStateInternal(int, int, int)",
            "access$3500(com.android.server.display.DisplayManagerService, android.os.IBinder, int, int, int)",
            "access$5000(com.android.server.display.DisplayManagerService, int, int)",
            "deliverDisplayEvent(int, int)",
            "registerWifiDisplayAdapterLocked()",
            "handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)",
            "mExternalTouchViewport",
            "mOnlyCore",
            "onStart()",
            "mContext",
            "access$900(com.android.server.display.DisplayManagerService)",
            "mPendingrequestDisplayState",
            "updateDisplayStateLocked(com.android.server.display.DisplayDevice, int, int)",
            "shouldRegisterNonEssentialDisplayAdaptersLocked()",
            "mSubDisplayState",
            "access$5400(com.android.server.display.DisplayManagerService, int, android.view.DisplayInfo)",
            "mIsForceUnblankDisplay",
            "wifiDevice",
            "unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "mMainDisplayBrightness",
            "windowManagerAndInputReady()",
            "isWfdConnected()",
            "startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "mLockPMS",
            "bDSSEnabled",
            "setDisplayPropertiesInternal(int, boolean, float, int, boolean)",
            "MSG_DELIVER_DISPLAY_EVENT_SEC",
            "TAG",
            "mMainDisplayState",
            "mProjectionService",
            "mWindowManagerInternal",
            "access$5500(com.android.server.display.DisplayManagerService)",
            "WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT",
            "mNextNonDefaultDisplayId",
            "access$1100(com.android.server.display.DisplayManagerService)",
            "saveWifiDisplayInfo(com.android.server.display.DisplayDevice)",
            "access$5800(com.android.server.display.DisplayManagerService)",
            "sendDisplayEventLocked(int, int)",
            "access$5600(com.android.server.display.DisplayManagerService, int, boolean, float, int, boolean)",
            "MSG_UPDATE_VIEWPORT",
            "access$2600(com.android.server.display.DisplayManagerService)",
            "access$2300(com.android.server.display.DisplayManagerService, int)",
            "dumpInternal(java.io.PrintWriter)",
            "stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "mWifiDisplayAdapter",
            "mCallbacks",
            "getWifiDisplayStatusInternal()",
            "startWifiDisplayScanInternal(int)",
            "access$700(com.android.server.display.DisplayManagerService)",
            "access$3800(com.android.server.display.DisplayManagerService, android.os.IBinder, int)",
            "mDefaultViewports",
            "updateDisplayStateLocked(com.android.server.display.DisplayDevice)",
            "onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)",
            "performTraversalInTransactionFromWindowManagerInternal()",
            "publishLocalService(java.lang.Class, java.lang.Object)",
            "mTempDisplayStateWorkQueue",
            "MSG_REQUEST_TRAVERSAL",
            "handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)",
            "setVirtualDisplaySurfaceInternal(android.os.IBinder, android.view.Surface)",
            "access$400(com.android.server.display.DisplayManagerService)",
            "setDisplayOffsetsInternal(int, int, int)",
            "access$2200(com.android.server.display.DisplayManagerService, int)",
            "mScaledPids",
            "access$2000(com.android.server.display.DisplayManagerService, android.hardware.display.IDisplayManagerCallback, int)",
            "access$4100(com.android.server.display.DisplayManagerService)",
            "access$1400(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "applyGlobalDisplayStateLocked(java.util.List)",
            "mSyncRoot",
            "getProjectionService()",
            "mSingleDisplayDemoMode",
            "access$4000(com.android.server.display.DisplayManagerService, java.io.PrintWriter)",
            "setDisplayInfoOverrideFromWindowManagerInternal(int, android.view.DisplayInfo)",
            "access$5700(com.android.server.display.DisplayManagerService, int, int, int)",
            "publishBinderService(java.lang.String, android.os.IBinder, boolean)",
            "access$1800(com.android.server.display.DisplayManagerService, int, int, int, android.os.IBinder, boolean)",
            "mHandlerThreadPmsDisplay",
            "updateLogicalDisplaysLocked()",
            "registerOverlayDisplayAdapterLocked()",
            "mTempDefaultViewports",
            "mGlobalDisplayState",
            "mDisplayAdapterListener",
            "mGlobalDisplayBrightness",
            "access$5802(com.android.server.display.DisplayManagerService, boolean)",
            "access$2900(com.android.server.display.DisplayManagerService)",
            "mCocktailSize",
            "configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)",
            "scheduleTraversalLocked(boolean)",
            "access$1900(com.android.server.display.DisplayManagerService, int)",
            "getDisplayIdsInternal(int)",
            "DEBUG",
            "registerAdditionalDisplayAdapters()",
            "changedMirroringDisplay(com.android.server.display.DisplayDevice)",
            "mHandler",
            "mInputManagerInternal",
            "registerVirtualDisplayAdapterLocked()",
            "mSubDisplayBrightness",
            "MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS",
            "static {}",
            "DEBUG_DUALSCREEN",
            "access$3600(com.android.server.display.DisplayManagerService, android.os.IBinder, android.view.Surface)",
            "mLockDisplayBlanker",
            "onBootPhase(int)",
            "releaseVirtualDisplayInternal(android.os.IBinder)",
            "connectWifiDisplayInternal(java.lang.String)",
            "access$4600(com.android.server.display.DisplayManagerService)",
            "updateDisplayDeviceInfo(com.android.server.display.DisplayDevice, com.android.server.display.DisplayDevice)",
            "mUiHandler",
            "access$3000(com.android.server.display.DisplayManagerService)",
            "access$2100(com.android.server.display.DisplayManagerService)",
            "access$600(com.android.server.display.DisplayManagerService)",
            "setVirtualDisplayFixedOrientationInternal(android.os.IBinder, int)",
            "disconnectWifiDisplayInternal()",
            "access$1500(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "renameWifiDisplayInternal(java.lang.String, java.lang.String)",
            "mSafeMode",
            "access$1300(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)",
            "mDisplayAdapters",
            "access$1200(com.android.server.display.DisplayManagerService)",
            "registerCallbackInternal(android.hardware.display.IDisplayManagerCallback, int)",
            "DisplayManagerService(android.content.Context)",
            "access$2700(com.android.server.display.DisplayManagerService, java.lang.String, java.lang.String)",
            "mVirtualDisplayAdapter",
            "DEBUG_BENDED",
            "handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)",
            "access$800(com.android.server.display.DisplayManagerService)",
            "mInputMethodTargetRotation",
            "registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "access$4602(com.android.server.display.DisplayManagerService, boolean)",
            "addScaledPid(int, java.lang.String)",
            "assignDisplayIdLocked(boolean)",
            "mWifiDisplayScanRequestCount",
            "performTraversalInTransactionLocked()",
            "access$3900(com.android.server.display.DisplayManagerService, android.os.IBinder)",
            "setViewportLocked(android.hardware.display.DisplayViewport, com.android.server.display.LogicalDisplay, com.android.server.display.DisplayDevice)",
            "mHandlerPmsDisplay",
            "findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)",
            "getDisplayIdOfDeviceInternal(int)",
            "mIsDualDisplay",
            "mIsInputMethodDisplayEnabled",
            "assignLayerStackLocked(int)",
            "mCocktailShiftSize",
            "access$5100(com.android.server.display.DisplayManagerService)",
            "setVirtualDisplayMirroringDisplayInternal(android.os.IBinder, int)",
            "systemReady(boolean, boolean)",
            "mTempExternalTouchViewport",
            "resizeVirtualDisplayInternal(android.os.IBinder, int, int, int)",
            "access$3200(com.android.server.display.DisplayManagerService, int, int)",
            "mTempDisplayInfo",
            "access$3100(com.android.server.display.DisplayManagerService)",
            "DUBUG_MAGNIFIER",
            "access$2800(com.android.server.display.DisplayManagerService, java.lang.String)",
            "access$500(com.android.server.display.DisplayManagerService, int, int)",
            "mDisplayDevices",
            "createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "pauseWifiDisplayInternal()",
            "registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)",
            "access$5200(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "clearViewportsLocked()",
            "registerMagnifierDisplayAdapterLocked()",
            "access$4800(com.android.server.display.DisplayManagerService)",
            "removeScaledPid(int)",
            "setInputMethodDisplayEnabled(boolean, int)",
            "access$1600(com.android.server.display.DisplayManagerService, boolean)",
            "requestGlobalDisplayStateInternal(int, int)",
            "mMagnifierDisplayAdapter",
            "access$1000(com.android.server.display.DisplayManagerService)",
            "access$2400(com.android.server.display.DisplayManagerService, java.lang.String)",
            "mLogicalDisplays",
            "mPendingTraversal",
            "access$1700(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$CallbackRecord)",
            "addLogicalDisplayLocked(com.android.server.display.DisplayDevice)",
            "stopWifiDisplayScanInternal(int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayManagerService$LocalService$2(com.android.server.display.DisplayManagerService$LocalService)",
            "this$1",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isValidMediaProjection(android.media.projection.IMediaProjection)"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjectionManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTraversalRequested()",
            "this$0",
            "DisplayManagerService$DisplayAdapterListener(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)",
            "DisplayManagerService$DisplayAdapterListener(com.android.server.display.DisplayManagerService)",
            "onDisplayDeviceEvent(com.android.server.display.DisplayDevice, int)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$DisplayAdapterListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getRequestedColorTransformIdLocked()",
            "setHasContentLocked(boolean)",
            "mTempLayerStackRect",
            "mPrimaryDisplayDeviceInfo",
            "hasContentLocked()",
            "isValidLocked()",
            "mOverrideDisplayInfo",
            "mBaseDisplayInfo",
            "mDisplayOffsetX",
            "mDisplayOffsetY",
            "getPrimaryDisplayDeviceLocked()",
            "getRequestedModeIdLocked()",
            "setRequestedColorTransformIdLocked(int)",
            "mRequestedColorTransformId",
            "LogicalDisplay(int, int, com.android.server.display.DisplayDevice)",
            "getDisplayInfoLocked()",
            "setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)",
            "mLayerStack",
            "mRequestedModeId",
            "mInfo",
            "setDisplayOffsetsLocked(int, int)",
            "getDisplayIdLocked()",
            "getDisplayOffsetYLocked()",
            "mTempDisplayRect",
            "mDisplayId",
            "getDisplayOffsetXLocked()",
            "mPrimaryDisplayDevice",
            "BLANK_LAYER_STACK",
            "setRequestedModeIdLocked(int)",
            "updateLocked(java.util.List)",
            "dumpLocked(java.io.PrintWriter)",
            "configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice, boolean)",
            "mHasContent"
          ],
          "added": [],
          "name": "com.android.server.display.LogicalDisplay",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mRequestDisplayStateDoneListener",
            "registerRequestDisplayStateDoneListener(java.lang.Runnable)",
            "this$1",
            "val$callbacks",
            "requestDisplayState(int, int, int)",
            "access$4900(com.android.server.display.DisplayManagerService$LocalService$1, int, int, int)",
            "requestDesiredDisplayState(int, int, int)",
            "requestDisplayState(int, int)",
            "DisplayManagerService$LocalService$1(com.android.server.display.DisplayManagerService$LocalService, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks)",
            "mRequestDisplayStateRunnable"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "notifyDisplayEventAsync(int, int)",
            "DisplayManagerService$CallbackRecord(com.android.server.display.DisplayManagerService, int, android.hardware.display.IDisplayManagerCallback)",
            "binderDied()",
            "mWifiDisplayScanRequested",
            "mCallback",
            "mPid",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$CallbackRecord",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDLNADeviceUid()",
            "isKDDIServiceConnected()",
            "getDisplayIds()",
            "setVirtualDisplayFixedOrientation(android.hardware.display.IVirtualDisplayCallback, int)",
            "setScanningChannel(int)",
            "getLastConnectedDisplay(boolean)",
            "requestColorTransform(int, int)",
            "startWifiDisplayScan()",
            "isWifiDisplayBridgeAvailable()",
            "isWfdEngineRunning()",
            "enableOverlayMagnifier(boolean)",
            "removeLastConnectedDLNADevice()",
            "disableWifiDisplay()",
            "enableWifiDisplayEx(java.lang.String, java.lang.String, int, java.lang.String)",
            "getWifiDisplayBridgeStatus()",
            "resumeWifiDisplay()",
            "getDisplayInfo(int)",
            "registerCallback(android.hardware.display.IDisplayManagerCallback)",
            "this$0",
            "getDLNADeviceName()",
            "isSinkAvailable()",
            "canProjectVideo(android.media.projection.IMediaProjection)",
            "disconnectWifiDisplay()",
            "connectWifiDisplayWithModeEx(int, java.lang.String, boolean)",
            "connectWifiDisplayWithPin(java.lang.String)",
            "releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)",
            "resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)",
            "DisplayManagerService$BinderService(com.android.server.display.DisplayManagerService)",
            "getDisplayInfoEx(int, android.os.IBinder, boolean)",
            "notifyEnterHomeSyncApp()",
            "enableWifiDisplayEx2(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, boolean)",
            "setCurrentDisplayIdMagnifier(int)",
            "getDLNADeviceAddress()",
            "setMagnificationSpec(android.view.MagnificationSpec)",
            "restartWifiDisplay()",
            "scanWifiDisplays()",
            "canProjectSecureVideo(android.media.projection.IMediaProjection)",
            "setMagnificationSettings(int, int, float)",
            "connectWifiDisplayWithMode(int, java.lang.String)",
            "getDisplayIdOfDevice(int)",
            "renameWifiDisplay(java.lang.String, java.lang.String)",
            "setParameter(int, int, java.lang.String)",
            "forgetWifiDisplay(java.lang.String)",
            "isConnWithPinSupported(java.lang.String)",
            "setVirtualDisplayMirroringDisplay(android.hardware.display.IVirtualDisplayCallback, int)",
            "stopScanWifiDisplays()",
            "notifyExitHomeSyncApp()",
            "pauseWifiDisplay()",
            "connectWifiDisplay(java.lang.String)",
            "getLastConnectedDLNADevice()",
            "disconnectForMirroringSwitching()",
            "setScreenSharingStatus(int)",
            "getDLNAType()",
            "stopWifiDisplayScan()",
            "getWifiDisplayStatus()",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)",
            "enableWifiDisplay(android.net.wifi.p2p.WifiP2pDevice, int)",
            "isDLNADeviceConnected()",
            "renameDongle(java.lang.String)",
            "isSourceAvailable()",
            "validatePackageName(int, java.lang.String)",
            "createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)",
            "getScreenSharingStatus()",
            "isDongleRenameAvailable()",
            "DisplayManagerService$BinderService(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$BinderService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayEvent(int, int)",
            "asBinder()"
          ],
          "added": [],
          "name": "android.hardware.display.IDisplayManagerCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$1",
            "DisplayManagerService$LocalService$3(com.android.server.display.DisplayManagerService$LocalService)",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "access$4400(com.android.server.display.DisplayManagerService$LocalService, int)",
            "access$4700(com.android.server.display.DisplayManagerService$LocalService)",
            "getCurrentScreenBrightnessBeforeFinal()",
            "getDisplayBitById(int)",
            "performTraversalInTransactionFromWindowManager()",
            "setDisplayProperties(int, boolean, float, int, boolean)",
            "access$4202(com.android.server.display.DisplayManagerService$LocalService, int)",
            "isValidDisplayId(int)",
            "DisplayManagerService$LocalService(com.android.server.display.DisplayManagerService)",
            "requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)",
            "setDisplayInfoOverrideFromWindowManager(int, android.view.DisplayInfo)",
            "blankUnblankRunnableExcuteTimeMeasurement",
            "mForceBlankDisplayStateRunnable",
            "DisplayManagerService$LocalService(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)",
            "mRequestingID",
            "mRequestingState",
            "unregisterDisplayTransactionListener(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "removeScaledPidsFromWindowManager()",
            "registerDisplayTransactionListener(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)",
            "setDisplayOffsets(int, int, int)",
            "getDisplayInfo(int)",
            "mRequestingSubBrightness",
            "unblankAllDisplaysFromPowerManager()",
            "access$4302(com.android.server.display.DisplayManagerService$LocalService, int)",
            "access$4500(com.android.server.display.DisplayManagerService$LocalService)",
            "sendForceDisplayStateLocked(int)",
            "addScaledPidFromWindowManager(int, java.lang.String)",
            "isProximitySensorAvailable()",
            "mRequestingBrightness",
            "mForceUnblankDisplayStateRunnable",
            "initPowerManagement(android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager)",
            "setInputMethodDisplayEnabled(boolean, int)",
            "access$4200(com.android.server.display.DisplayManagerService$LocalService)",
            "blankAllDisplaysFromPowerManager()",
            "removeScaledPidFromWindowManager(int)",
            "access$4502(com.android.server.display.DisplayManagerService$LocalService, int)",
            "access$4300(com.android.server.display.DisplayManagerService$LocalService)",
            "this$0",
            "isForceUnblankDisplay()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$LocalService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "type",
            "appHeight",
            "DisplayInfo(android.view.DisplayInfo)",
            "equals(android.view.DisplayInfo)",
            "logicalHeight",
            "defaultColorTransformId",
            "logicalDensityDpi",
            "smallestNominalAppWidth",
            "alphaScreenAppWidth",
            "overscanLeft",
            "ownerPackageName",
            "uniqueId",
            "presentationDeadlineNanos",
            "layerStack",
            "logicalWidth",
            "ownerUid",
            "DisplayInfo()",
            "physicalXDpi",
            "appWidth",
            "defaultModeId",
            "findDefaultModeByRefreshRate(float)",
            "getNaturalHeight()",
            "overscanTop",
            "getLogicalMetrics(android.util.DisplayMetrics, android.content.res.CompatibilityInfo, android.content.res.Configuration)",
            "toggleDisplay()",
            "supportedColorTransforms",
            "largestNominalAppHeight",
            "supportedModes",
            "alphaScreenAppHeight",
            "overscanRight",
            "rotation",
            "colorTransformId",
            "getMode()",
            "name",
            "copyFrom(android.view.DisplayInfo)",
            "getAppMetrics(android.util.DisplayMetrics)",
            "overscanBottom",
            "getNaturalWidth()",
            "state",
            "address",
            "appVsyncOffsetNanos",
            "hasAccess(int)",
            "largestNominalAppWidth",
            "flags",
            "modeId",
            "physicalYDpi",
            "smallestNominalAppHeight"
          ],
          "added": [],
          "name": "android.view.DisplayInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mIsPrinted",
            "PowerManagerUtil$TimeMeasurement()",
            "printTotalTime(java.lang.String, long)",
            "mStartTime",
            "mLapTime",
            "resetTime()",
            "printLapTime(java.lang.String, long)"
          ],
          "added": [],
          "name": "com.android.server.power.PowerManagerUtil$TimeMeasurement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayTransaction()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayManagerInternal$DisplayTransactionListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayManagerService$SyncRoot()"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayManagerService$SyncRoot",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "Display$ColorTransform(int, int)",
            "getColorTransform()",
            "EMPTY_ARRAY",
            "getId()"
          ],
          "added": [],
          "name": "android.view.Display$ColorTransform",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "requestColorTransformAndModeInTransactionLocked(int, int)",
            "setLayerStackInTransactionLocked(int)",
            "DisplayDevice(com.android.server.display.DisplayAdapter, android.os.IBinder, java.lang.String)",
            "applyPendingDisplayDeviceInfoChangesLocked()",
            "mCurrentDisplayRect",
            "mCurrentLayerStackRect",
            "mDebugLastLoggedDeviceInfo",
            "mUniqueId",
            "setProjectionInTransactionLocked(int, android.graphics.Rect, android.graphics.Rect)",
            "getDisplayDeviceInfoLocked()",
            "mDisplayAdapter",
            "setSurfaceInTransactionLocked(android.view.Surface)",
            "getUniqueId()",
            "performTraversalInTransactionLocked()",
            "populateViewportLocked(android.hardware.display.DisplayViewport)",
            "mDisplayToken",
            "mCurrentLayerStack",
            "mCurrentSurface",
            "getLayerStack()",
            "dumpLocked(java.io.PrintWriter)",
            "requestDisplayStateLocked(int, int)",
            "getAdapterLocked()",
            "getDisplayTokenLocked()",
            "getNameLocked()",
            "mCurrentOrientation"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "fixedOrientation",
            "hashCode()",
            "FLAG_NEVER_BLANK",
            "FLAG_ROTATES_WITH_CONTENT",
            "height",
            "flags",
            "colorTransformId",
            "densityDpi",
            "copyFrom(com.android.server.display.DisplayDeviceInfo)",
            "address",
            "defaultModeId",
            "equals(java.lang.Object)",
            "toString()",
            "TOUCH_NONE",
            "defaultColorTransformId",
            "touch",
            "FLAG_SUPPORTS_PROTECTED_BUFFERS",
            "yDpi",
            "DIFF_OTHER",
            "DisplayDeviceInfo()",
            "FLAG_DEFAULT_DISPLAY",
            "FLAG_VIRTUAL_SCREEN",
            "FLAG_PRIVATE",
            "ownerPackageName",
            "diff(com.android.server.display.DisplayDeviceInfo)",
            "state",
            "type",
            "presentationDeadlineNanos",
            "touchToString(int)",
            "FLAG_SECURE",
            "rotation",
            "supportedColorTransforms",
            "xDpi",
            "width",
            "setAssumedDensityForExternalDisplay(int, int)",
            "name",
            "ownerUid",
            "FLAG_ROUND",
            "FLAG_OWN_CONTENT_ONLY",
            "supportedModes",
            "flagsToString(int)",
            "displayToMirror",
            "modeId",
            "equals(com.android.server.display.DisplayDeviceInfo)",
            "TOUCH_EXTERNAL",
            "TOUCH_INTERNAL",
            "uniqueId",
            "DIFF_STATE",
            "FLAG_PRESENTATION",
            "appVsyncOffsetNanos"
          ],
          "added": [],
          "name": "com.android.server.display.DisplayDeviceInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "logicalFrame",
            "physicalFrame",
            "deviceWidth",
            "orientation",
            "copyFrom(android.hardware.display.DisplayViewport)",
            "displayId",
            "deviceHeight",
            "valid",
            "DisplayViewport()"
          ],
          "added": [],
          "name": "android.hardware.display.DisplayViewport",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "equal(java.lang.Object, java.lang.Object)"
          ],
          "added": [],
          "name": "libcore.util.Objects",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "canProjectSecureVideo()",
            "asBinder()",
            "canProjectVideo()",
            "registerCallback(android.media.projection.IMediaProjectionCallback)",
            "applyVirtualDisplayFlags(int)"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getFrequency()",
            "getNetworkName()",
            "getClientList()",
            "contains(android.net.wifi.p2p.WifiP2pDevice)",
            "getOwner()",
            "isGroupOwner()",
            "toString()",
            "getInterface()",
            "getPassphrase()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pGroup",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0",
            "WifiDisplayController$30(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$30",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$width",
            "run()",
            "val$display",
            "val$oldDisplay",
            "WifiDisplayController$29(com.android.server.display.WifiDisplayController, android.view.Surface, android.view.Surface, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay, int, int, boolean, int, int, int)",
            "val$oldDisplayHeight",
            "val$surface",
            "val$oldDisplayWidth",
            "val$height",
            "val$flags",
            "val$oldSurface",
            "val$requestPendingSetup",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$29",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "WifiDisplayController$14(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$14",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSuccess()",
            "onFailure(int)",
            "this$0",
            "val$oldDevice",
            "next()",
            "WifiDisplayController$16(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$16",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$26(com.android.server.display.WifiDisplayController)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$26",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayDisconnected()",
            "onDisplayConnected(android.view.Surface, int, int, int, int)",
            "onDisplayError(int)",
            "this$0",
            "WifiDisplayController$19(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "val$oldDevice"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$19",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "next()",
            "onFailure(int)",
            "onSuccess()",
            "WifiDisplayController$15(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "val$oldDevice"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$15",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "run()",
            "WifiDisplayController$24(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$24",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "val$oldDevice",
            "this$0",
            "WifiDisplayController$28(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$28",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "deviceAddress",
            "netId",
            "WifiP2pConfig()",
            "groupOwnerIntent",
            "wps"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pConfig",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$27(com.android.server.display.WifiDisplayController)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$27",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onQoSLevelChanged(int)",
            "WifiDisplayController$18(com.android.server.display.WifiDisplayController)",
            "onWeakNetwork()",
            "onHeadSetConnected()",
            "onTransportChanged(int)",
            "this$0",
            "onTerminateRequested()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$18",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "val$featureState",
            "run()",
            "WifiDisplayController$7(com.android.server.display.WifiDisplayController, int)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$7",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ChannelListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "onFailure(int)",
            "WifiDisplayController$17(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "onSuccess()",
            "val$newDevice",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$17",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$22(com.android.server.display.WifiDisplayController)",
            "onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$22",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSuccess()",
            "onFailure(int)",
            "WifiDisplayController$6$1(com.android.server.display.WifiDisplayController$6)",
            "this$1"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$6$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayController$12(com.android.server.display.WifiDisplayController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$12",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mRequestPendingSetup",
            "requestConnect(java.lang.String)",
            "access$5700(com.android.server.display.WifiDisplayController, android.net.NetworkInfo)",
            "mAdvertisedDisplay",
            "mRequestedScanChannel",
            "isWifiConnected(android.content.Context)",
            "requestPause()",
            "INFO_TYPE_DPM_WIFI",
            "access$2500(com.android.server.display.WifiDisplayController)",
            "requestDisconnectForMirroringSwitching()",
            "mWifiP2pManager",
            "handleScanFinished()",
            "requestDisconnect()",
            "access$1700(com.android.server.display.WifiDisplayController)",
            "describeWifiP2pDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "mWifiP2pPrevState",
            "mPartialScanningInProgress",
            "access$3300(com.android.server.display.WifiDisplayController)",
            "CONNECT_RETRY_DELAY_MILLIS",
            "MAX_THROUGHPUT",
            "TAG",
            "access$6400(com.android.server.display.WifiDisplayController)",
            "mKDDIServiceConnected",
            "restartWifiDisplay()",
            "connect(android.net.wifi.p2p.WifiP2pDevice)",
            "getSessionInfo(android.net.wifi.p2p.WifiP2pGroup, int)",
            "DEBUG",
            "access$5802(com.android.server.display.WifiDisplayController, boolean)",
            "handleConnectionFailure(boolean)",
            "access$3100(com.android.server.display.WifiDisplayController, boolean)",
            "createWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "access$1000(com.android.server.display.WifiDisplayController)",
            "mZeroSettingsConcept",
            "access$600(com.android.server.display.WifiDisplayController)",
            "setUDP(java.lang.String, java.lang.Object)",
            "access$702(com.android.server.display.WifiDisplayController, boolean)",
            "notifyExitHomeSyncApp()",
            "access$3800(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup, int)",
            "mDongleUpdateResult",
            "access$4000(com.android.server.display.WifiDisplayController, android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "computeFeatureState()",
            "mConnectingDevice",
            "mDesiredDevice",
            "access$502(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "notifyEnterHomeSyncApp()",
            "access$1600(com.android.server.display.WifiDisplayController)",
            "mNetworkInfo",
            "access$5600(com.android.server.display.WifiDisplayController)",
            "handleScanStarted()",
            "access$602(com.android.server.display.WifiDisplayController, boolean)",
            "access$4700(com.android.server.display.WifiDisplayController)",
            "access$700(com.android.server.display.WifiDisplayController)",
            "access$6500(com.android.server.display.WifiDisplayController)",
            "mWfdEnabled",
            "retryConnection()",
            "handleStateChanged(boolean)",
            "getPowerSavingMode()",
            "mIsBootCompleted",
            "access$5100(com.android.server.display.WifiDisplayController)",
            "KDDI_SOURCE_CONNECT_SUCCESS_ACTION",
            "handlePeersChanged()",
            "access$3702(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup)",
            "FULLSCAN_TIME_DELAY_MILLIS",
            "mAvailableWifiDisplayPeers",
            "mContext",
            "mWaitTillSideSyncClosed",
            "access$2202(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "mWifiDisplayWpsConfig",
            "getCPUPowerSavingMode()",
            "requestStopScan()",
            "describeWifiP2pGroup(android.net.wifi.p2p.WifiP2pGroup)",
            "mWfdFrequency",
            "access$3002(com.android.server.display.WifiDisplayController, boolean)",
            "POPUP_CAUSE_OXYGEN_NETWORK_ENABLED",
            "getPortNumber(android.net.wifi.p2p.WifiP2pDevice)",
            "updateConnection()",
            "access$5900(com.android.server.display.WifiDisplayController)",
            "access$2900(com.android.server.display.WifiDisplayController, java.lang.String, java.lang.Object)",
            "requestClearConnectedDisplayInfo()",
            "requestScreenMirroringEnable(boolean)",
            "access$400(com.android.server.display.WifiDisplayController)",
            "mAdvertisedDisplayWidth",
            "mHandler",
            "access$6600(com.android.server.display.WifiDisplayController)",
            "requestSaveConnectedDisplayInfo()",
            "access$6000(com.android.server.display.WifiDisplayController)",
            "getInterfaceAddress(android.net.wifi.p2p.WifiP2pGroup)",
            "isWifiIbssEnabled()",
            "access$100(com.android.server.display.WifiDisplayController)",
            "stopPeerDiscovery()",
            "requestResume()",
            "mConnectionTimeout",
            "access$2400(com.android.server.display.WifiDisplayController)",
            "access$4200(com.android.server.display.WifiDisplayController)",
            "handleScanResults()",
            "access$1800(com.android.server.display.WifiDisplayController)",
            "CONNECT_MAX_RETRIES",
            "disconnect()",
            "access$2700(com.android.server.display.WifiDisplayController)",
            "syncRemoteDisplayStatus(int, boolean)",
            "mThisDevice",
            "mUpdateURL",
            "access$900(com.android.server.display.WifiDisplayController)",
            "access$4500(com.android.server.display.WifiDisplayController)",
            "mAdvertisedDisplayFlags",
            "DEFAULT_SCAN_CHANNEL",
            "access$3600(com.android.server.display.WifiDisplayController)",
            "access$5400(com.android.server.display.WifiDisplayController)",
            "isSideSyncAppRunning()",
            "access$5020(com.android.server.display.WifiDisplayController, int)",
            "access$4402(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "access$6300(com.android.server.display.WifiDisplayController)",
            "updateWfdEnableState()",
            "mRestrictionPolicy",
            "mWifiManager",
            "mLimitedContentsEnabled",
            "mRestartTriggered",
            "CONNECTION_TIMEOUT_SECONDS",
            "access$1300(com.android.server.display.WifiDisplayController)",
            "access$6100(com.android.server.display.WifiDisplayController)",
            "mP2pClientsList",
            "mConnectedDeviceGroupInfo",
            "mWfdConnectedDevice",
            "access$2100(com.android.server.display.WifiDisplayController)",
            "makeConnConfig(android.net.wifi.p2p.WifiP2pDevice)",
            "access$200(com.android.server.display.WifiDisplayController)",
            "mOnPowerSavingMode",
            "access$5300(com.android.server.display.WifiDisplayController)",
            "access$5302(com.android.server.display.WifiDisplayController, boolean)",
            "access$3402(com.android.server.display.WifiDisplayController, boolean)",
            "requestDisableWiFiP2P()",
            "DISCOVER_PEERS_INTERVAL_MILLIS",
            "access$3900(android.net.wifi.p2p.WifiP2pDevice)",
            "isKDDIServiceConnected()",
            "advertiseDisplay(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "DEFAULT_CONTROL_PORT",
            "access$5500(com.android.server.display.WifiDisplayController, boolean)",
            "access$3700(com.android.server.display.WifiDisplayController)",
            "mRemoteDisplay",
            "mWifiP2pChannel",
            "access$4100(android.net.wifi.p2p.WifiP2pGroup)",
            "requestStartScan()",
            "access$2800(com.android.server.display.WifiDisplayController)",
            "access$6102(com.android.server.display.WifiDisplayController, java.lang.String)",
            "RTSP_TIMEOUT_SECONDS_CERT_MODE",
            "access$6800(com.android.server.display.WifiDisplayController)",
            "mDisconnectingDevice",
            "tryDiscoverPeers()",
            "mDiscoverPeersInProgress",
            "mLimitedContentsType",
            "isAuSLServiceRunning()",
            "getChangedClientDevice(android.net.wifi.p2p.WifiP2pGroup)",
            "isRunningHomeSync",
            "RESTART_SCANNING_TIME_MILLIS",
            "mFullScanTimer",
            "WifiDisplayController(android.content.Context, android.os.Handler, com.android.server.display.WifiDisplayController$Listener)",
            "mRemoteDisplayInterface",
            "access$2200(com.android.server.display.WifiDisplayController)",
            "mHDMIConnected",
            "access$4202(com.android.server.display.WifiDisplayController, int)",
            "access$6200(com.android.server.display.WifiDisplayController)",
            "access$3000(com.android.server.display.WifiDisplayController)",
            "mDisconnectByUser",
            "mRemoteIP",
            "access$1200(com.android.server.display.WifiDisplayController)",
            "access$4400(com.android.server.display.WifiDisplayController)",
            "access$5902(com.android.server.display.WifiDisplayController, boolean)",
            "requestConnectWithPin(java.lang.String)",
            "mDiscoverPeers",
            "KDDI_SOURCE_DISCONNECT_SUCCESS_ACTION",
            "mScanRequestedInConnected",
            "BROKER_CLOSING_TIME_MILLIS",
            "mCancelingDevice",
            "access$5200(com.android.server.display.WifiDisplayController)",
            "mAdvertisedDisplayHeight",
            "updateDesiredDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "mRtspTimeout",
            "access$300(com.android.server.display.WifiDisplayController, int)",
            "SCANNING_TIME_MILLIS",
            "isHotspotOn()",
            "mWifiP2pReceiver",
            "EXTRA_INFO_TYPE",
            "mWifiP2pEnabled",
            "RTSP_TIMEOUT_SECONDS",
            "reportFeatureState()",
            "mConnectionRetriesLeft",
            "access$6502(com.android.server.display.WifiDisplayController, java.lang.String)",
            "isConnWithPinSupported(java.lang.String)",
            "access$102(com.android.server.display.WifiDisplayController, boolean)",
            "access$6802(com.android.server.display.WifiDisplayController, boolean)",
            "access$1500(android.net.wifi.p2p.WifiP2pDevice)",
            "mPinRequired",
            "access$2300(com.android.server.display.WifiDisplayController)",
            "isDongleRenameAvailable()",
            "readvertiseDisplay(android.hardware.display.WifiDisplay)",
            "mRemoteDisplayConnected",
            "dump(java.io.PrintWriter, java.lang.String)",
            "mSupportsProtectedBuffers",
            "SCAN_MAX_RETRIES",
            "mMirroringSwitching",
            "mWifiP2pConnected",
            "updateSettings()",
            "access$4300(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pGroup)",
            "isWifiDisplay(android.net.wifi.p2p.WifiP2pDevice)",
            "setScanningChannel(int)",
            "access$000(com.android.server.display.WifiDisplayController)",
            "access$3500(com.android.server.display.WifiDisplayController)",
            "isSideSyncConnected()",
            "isPrimarySinkDeviceType(int)",
            "access$800(com.android.server.display.WifiDisplayController)",
            "mWaitTillBrokerClosed",
            "access$1900(com.android.server.display.WifiDisplayController)",
            "access$4600(com.android.server.display.WifiDisplayController)",
            "handleConnectionChanged(android.net.NetworkInfo)",
            "mEDM",
            "access$5402(com.android.server.display.WifiDisplayController, boolean)",
            "broadcastWfdState(int)",
            "mFullScanningInProgress",
            "access$3200(com.android.server.display.WifiDisplayController)",
            "access$3302(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "access$6602(com.android.server.display.WifiDisplayController, boolean)",
            "access$1802(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "mListener",
            "access$2600(com.android.server.display.WifiDisplayController, boolean)",
            "access$1400(android.net.wifi.p2p.WifiP2pDevice)",
            "mWfdEnabling",
            "mScanRequested",
            "mWifiDisplayCertMode",
            "access$1902(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "requestConnect(int, java.lang.String, boolean)",
            "requestStartSettings()",
            "mConnectState",
            "mDongleUpdateOnGoing",
            "updateScanState()",
            "renameDongle(java.lang.String)",
            "mWifiDisplayOnSetting",
            "isP2pConnected()",
            "access$5000(com.android.server.display.WifiDisplayController)",
            "requestConnect(int, java.lang.String)",
            "AP_CONNECTED",
            "access$4802(com.android.server.display.WifiDisplayController, boolean)",
            "SIDESYNC_CLOSING_TIME_MILLIS",
            "mDPM",
            "DB_PSM_SWITCH",
            "mAdvertisedDisplaySurface",
            "mWfdUibcManager",
            "unadvertiseDisplay()",
            "access$2000(com.android.server.display.WifiDisplayController)",
            "access$4900(com.android.server.display.WifiDisplayController)",
            "access$1602(com.android.server.display.WifiDisplayController, android.net.wifi.p2p.WifiP2pDevice)",
            "access$500(com.android.server.display.WifiDisplayController)",
            "mWaitForAction",
            "access$1100(com.android.server.display.WifiDisplayController)",
            "requestPeers()",
            "requestPopup(int)",
            "mConnectedDevice",
            "access$6700(com.android.server.display.WifiDisplayController)",
            "access$5800(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "WifiDisplayController$3(com.android.server.display.WifiDisplayController)",
            "onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$displays",
            "this$0",
            "run()",
            "WifiDisplayController$13(com.android.server.display.WifiDisplayController, android.hardware.display.WifiDisplay[])"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$13",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$25(com.android.server.display.WifiDisplayController)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$25",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$Channel",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "onSuccess()",
            "onFailure(int)",
            "WifiDisplayController$8(com.android.server.display.WifiDisplayController)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$8",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$PeerListListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "setWfdEnabled(boolean)",
            "setSessionAvailable(boolean)",
            "WifiP2pWfdInfo()",
            "isSessionAvailable()",
            "setMaxThroughput(int)",
            "setControlPort(int)",
            "setDeviceType(int)",
            "getDeviceType()",
            "setContentProtection(boolean)",
            "isWfdEnabled()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pWfdInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onChange(boolean, android.net.Uri)",
            "this$0",
            "WifiDisplayController$1(com.android.server.display.WifiDisplayController, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$5(com.android.server.display.WifiDisplayController)",
            "onFailure(int)",
            "this$0",
            "onSuccess()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setup"
          ],
          "added": [],
          "name": "android.net.wifi.WpsInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "disableP2p(android.net.wifi.p2p.WifiP2pManager$Channel)",
            "setMiracastMode(int)",
            "enableP2p(android.net.wifi.p2p.WifiP2pManager$Channel)",
            "requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)",
            "setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pWfdInfo, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "callSECApi(android.net.wifi.p2p.WifiP2pManager$Channel, android.os.Message)",
            "requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)",
            "requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$PeerListListener)",
            "initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager$ChannelListener)",
            "connect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel, int, android.net.wifi.p2p.WifiP2pManager$ActionListener)",
            "removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener)"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onChange(boolean, android.net.Uri)",
            "WifiDisplayController$2(com.android.server.display.WifiDisplayController, android.os.Handler, android.content.ContentResolver)",
            "this$0",
            "val$resolver"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$GroupInfoListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$23(com.android.server.display.WifiDisplayController)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$23",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pManager$ActionListener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "onFailure(int)",
            "this$0",
            "WifiDisplayController$4(com.android.server.display.WifiDisplayController)",
            "onSuccess()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)",
            "WifiDisplayController$21(com.android.server.display.WifiDisplayController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$21",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "WifiDisplayController$6(com.android.server.display.WifiDisplayController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$6",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getInt(android.content.ContentResolver, java.lang.String)",
            "getFloat(android.content.ContentResolver, java.lang.String, float)",
            "getUriFor(java.lang.String)",
            "isValidZenMode(int)",
            "putInt(android.content.ContentResolver, java.lang.String, int)",
            "zenModeToString(int)",
            "getStringForUser(android.content.ContentResolver, java.lang.String, int)",
            "putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)",
            "CONTENT_URI",
            "putFloat(android.content.ContentResolver, java.lang.String, float)",
            "putString(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "getInt(android.content.ContentResolver, java.lang.String, int)",
            "getLong(android.content.ContentResolver, java.lang.String, long)",
            "getString(android.content.ContentResolver, java.lang.String)"
          ],
          "added": [],
          "name": "android.provider.Settings$Global",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)",
            "getDisplay(int)",
            "getDisplays()",
            "registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler)",
            "getWifiDisplayStatus()"
          ],
          "added": [
            "isDLNADeviceConnected()"
          ],
          "name": "android.hardware.display.DisplayManager",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "getConnectedState()",
            "getFeatureState()",
            "WifiDisplayStatus(int, int, int, android.hardware.display.WifiDisplay, android.hardware.display.WifiDisplay[], android.hardware.display.WifiDisplaySessionInfo, int, int)",
            "getActiveDisplayState()",
            "getScanState()",
            "WifiDisplayStatus()"
          ],
          "added": [],
          "name": "android.hardware.display.WifiDisplayStatus",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "deviceAddress",
            "toString()",
            "wfdInfo",
            "GOdeviceName",
            "wpsKeypadSupported()",
            "wpsPbcSupported()",
            "WifiP2pDevice(android.net.wifi.p2p.WifiP2pDevice)",
            "iconIdx",
            "wpsDisplaySupported()",
            "status",
            "groupownerAddress",
            "WifiP2pDevice()",
            "equals(java.lang.Object)",
            "update(android.net.wifi.p2p.WifiP2pDevice)",
            "deviceName",
            "primaryDeviceType"
          ],
          "added": [
            "ssDevInfo"
          ],
          "name": "android.net.wifi.p2p.WifiP2pDevice",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplay(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String)",
            "setDeviceInfo(int)",
            "equals(android.hardware.display.WifiDisplay)",
            "isRemembered()",
            "getDeviceName()",
            "EMPTY_ARRAY",
            "canConnect()",
            "getPrimaryDeviceType()",
            "getDeviceAlias()",
            "getFriendlyDisplayName()",
            "CREATOR",
            "isAvailable()",
            "getDeviceAddress()",
            "hasSameAddress(android.hardware.display.WifiDisplay)"
          ],
          "added": [
            "getDeviceInfo()"
          ],
          "name": "android.hardware.display.WifiDisplay",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.media.RemoteDisplay$Listener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "setUIBCNegotiagedResolution(float, float)",
            "WFDUibcManager(android.content.Context)",
            "setCoupleShotMode(boolean)",
            "stop()",
            "start()"
          ],
          "added": [],
          "name": "android.media.WFDUibcManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setContext(android.content.Context, android.media.RemoteDisplayCallback$Listener)"
          ],
          "added": [],
          "name": "android.media.RemoteDisplayCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.media.RemoteDisplayCallback$Listener",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "toString()",
            "WifiDisplaySessionInfo(boolean, int, java.lang.String, java.lang.String, java.lang.String)"
          ],
          "added": [],
          "name": "android.hardware.display.WifiDisplaySessionInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onDisplayConnecting(android.hardware.display.WifiDisplay, int)",
            "onScanFinished()",
            "onDisplayConnecting(android.hardware.display.WifiDisplay)",
            "onDisplayDisconnecting()",
            "onDisplaySessionInfo(android.hardware.display.WifiDisplaySessionInfo)",
            "onP2pConnected(java.net.InetAddress)",
            "onScanStarted()",
            "onFeatureStateChanged(int)",
            "onDisplayDisconnected()",
            "onDisplayChanged(android.hardware.display.WifiDisplay)",
            "onClientUpdated(android.net.wifi.p2p.WifiP2pDevice)",
            "onScanResults(android.hardware.display.WifiDisplay[])",
            "onDisplayConnected(android.hardware.display.WifiDisplay, android.view.Surface, int, int, int)",
            "onDisplayConnectionFailed()",
            "onP2pDisconnected()"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$Listener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "LocalDisplayAdapter$HotplugDisplayEventReceiver(com.android.server.display.LocalDisplayAdapter, android.os.Looper)",
            "onHotplug(long, int, boolean)"
          ],
          "added": [],
          "name": "com.android.server.display.LocalDisplayAdapter$HotplugDisplayEventReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DisplayEventReceiver(android.os.Looper)"
          ],
          "added": [],
          "name": "android.view.DisplayEventReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onStop()",
            "VirtualDisplayAdapter$MediaProjectionCallback(com.android.server.display.VirtualDisplayAdapter, android.os.IBinder)",
            "this$0",
            "mAppToken"
          ],
          "added": [],
          "name": "com.android.server.display.VirtualDisplayAdapter$MediaProjectionCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IMediaProjectionCallback$Stub()"
          ],
          "added": [],
          "name": "android.media.projection.IMediaProjectionCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "OverlayDisplayWindow$5(com.android.server.display.OverlayDisplayWindow)",
            "onScale(android.view.ScaleGestureDetector)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.OverlayDisplayWindow$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "ScaleGestureDetector$SimpleOnScaleGestureListener()"
          ],
          "added": [],
          "name": "android.view.ScaleGestureDetector$SimpleOnScaleGestureListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSContextChanged(android.hardware.scontext.SContextEvent)",
            "this$0",
            "AutomaticBrightnessController$5(com.android.server.display.AutomaticBrightnessController)"
          ],
          "added": [],
          "name": "com.android.server.display.AutomaticBrightnessController$5",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAmbientLux()",
            "getCandela()"
          ],
          "added": [],
          "name": "android.hardware.scontext.SContextAutoBrightness",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "enable(boolean)",
            "getSyncRoot()",
            "mDisplayInfo",
            "registerLocked()",
            "mPolicy",
            "MagnifierDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot, android.content.Context, android.os.Handler, com.android.server.display.DisplayAdapter$Listener, android.os.Handler)",
            "mTempSpec",
            "getHandler()",
            "dump(java.io.PrintWriter, java.lang.String)",
            "onChangeSurface(android.view.Surface)",
            "DEBUG",
            "updateMagnificationSpec(android.view.MagnificationSpec)",
            "mScale",
            "setMagnificationSettings(int, int, float)",
            "dumpLocked(java.io.PrintWriter)",
            "TAG",
            "getContext()",
            "mSurfaceCtl",
            "onCreateSurface(android.view.Surface, int, int)",
            "sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice, int)",
            "mDevice",
            "mEnabled",
            "mCurrentDisplayId",
            "mUiHandler",
            "setCurrentDisplayIdMagnifier(int)"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDisplayAdapter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDisplayDeviceInfoLocked()",
            "mCurrentDisplayId",
            "mSurface",
            "getDisplayTokenLocked()",
            "mPolicy",
            "DEBUG",
            "setSurface(android.view.Surface)",
            "mInfo",
            "setSurfaceInTransactionLocked(android.view.Surface)",
            "MagnifierDevice(com.android.server.display.DisplayAdapter, android.os.IBinder, android.view.Surface, java.lang.String, com.android.server.display.MagnifierDisplayPolicy, int)",
            "performTraversalInTransactionLocked()",
            "TAG",
            "mName"
          ],
          "added": [],
          "name": "com.android.server.display.MagnifierDevice",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDeviceList()"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pDeviceList",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)",
            "WifiDisplayController$11(com.android.server.display.WifiDisplayController)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$11",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WifiDisplayController$20(com.android.server.display.WifiDisplayController)",
            "onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.display.WifiDisplayController$20",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "groupOwnerAddress",
            "isGroupOwner"
          ],
          "added": [],
          "name": "android.net.wifi.p2p.WifiP2pInfo",
          "change_type": 2
        }
      ],
      "name": "com.android.server.display"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "onChange(boolean)",
            "this$0",
            "PrivateKidsMode$KidsModeObserver(com.android.server.cocktailbar.mode.PrivateKidsMode, android.os.Handler)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKidsMode$KidsModeObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isEnableMode()",
            "mKidsModeObserver",
            "DEBUG",
            "mContext",
            "access$000()",
            "getDefinedCocktailType()",
            "PrivateKidsMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "static {}",
            "getDefinedPrivateModeName()",
            "mListener",
            "TAG",
            "access$100()",
            "getCocktailBarType()",
            "getModeId()",
            "renewMode(int)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKidsMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "PrivateAuthLockMode$AuthLockObserver(com.android.server.cocktailbar.mode.PrivateAuthLockMode, android.os.Handler)",
            "this$0",
            "onChange(boolean)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateAuthLockMode$AuthLockObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDefinedPrivateModeName()",
            "access$000()",
            "TAG",
            "PrivateAuthLockMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "getCocktailBarType()",
            "mContext",
            "isEnableMode()",
            "static {}",
            "renewMode(int)",
            "mListener",
            "getDefinedCocktailType()",
            "access$100()",
            "getModeId()",
            "mAuthLockObserver",
            "DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateAuthLockMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDefinedPrivateModeName()",
            "TAG",
            "isEnableMode()",
            "onBroadcastReceived(android.content.Intent)",
            "PrivateCarMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "getDefinedCocktailType()",
            "DEBUG",
            "getCocktailBarType()",
            "static {}"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateCarMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "COCKTAIL_BAR_CLASS_NAME",
            "PrivateEmergencyMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "static {}",
            "getDefinedCocktailType()",
            "getDefinedPrivateModeName()",
            "onBroadcastReceived(android.content.Intent)",
            "getCocktailBarType()",
            "DEBUG",
            "TAG",
            "COCKTAIL_BAR_PACKAGE_NAME",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "mContext",
            "isEnableMode()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateEmergencyMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "renewMode(int)",
            "getCocktailType()",
            "getModeId()",
            "onBroadcastReceived(android.content.Intent)",
            "getCocktailBarType()",
            "NormalMode()",
            "getModeName()",
            "getRegistrationType()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.NormalMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "DEBUG",
            "mActivityManager",
            "mContext",
            "getDefinedCocktailType()",
            "ACTION_LOCK_TASK_MODE",
            "PrivateRestrictMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "static {}",
            "getCocktailBarType()",
            "onBroadcastReceived(android.content.Intent)",
            "TAG",
            "getDefinedPrivateModeName()",
            "isEnableMode()",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateRestrictMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getCocktailBarMode(java.lang.String)",
            "onSetModeForcely(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "resetMode(int, int)",
            "restrictMode(boolean, int)",
            "COCKTAIL_MODE_KNOX",
            "COCKTAIL_MODE_PRIVATE_MODE",
            "mKnoxMode",
            "mPrivateModes",
            "setMode(int, int)",
            "refreshCocktailBarMode()",
            "static {}",
            "setupPrivateMode(com.android.server.cocktailbar.mode.CocktailBarMode)",
            "COCKTAIL_MODE_UNKNOWN",
            "getCocktailBarMode(int)",
            "mListener",
            "getCurrentModeId()",
            "onBroadcastReceived(android.content.Intent)",
            "COCKTAIL_MODE_NORMAL",
            "onResetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "COCKTAIL_MODE_KNOX_COM",
            "mNextPrivateModeId",
            "COCKTAIL_TYPE_OVERLAY",
            "CocktailBarModeManager(android.content.Context, com.android.server.cocktailbar.CocktailBarManagerServiceListener, android.content.BroadcastReceiver, android.os.Handler)",
            "DEBUG",
            "isDisableCocktailBarMode(int)",
            "mNormalMode",
            "getCocktailBarModeName(int)",
            "TAG",
            "COCKTAIL_TYPE_ALONE",
            "mCocktailBarModeId",
            "mContext",
            "mPrivateModeMap",
            "onSetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarModeManager",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "PrivateKioskMDMMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "isEnableMode()",
            "static {}",
            "TAG",
            "getDefinedPrivateModeName()",
            "onBroadcastReceived(android.content.Intent)",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "DEBUG",
            "getCocktailBarType()",
            "mContext",
            "getDefinedCocktailType()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKioskMDMMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getCocktailBarType()",
            "static {}",
            "isEnableMode()",
            "PrivateMirroLinkMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "onBroadcastReceived(android.content.Intent)",
            "getDefinedCocktailType()",
            "DEBUG",
            "getDefinedPrivateModeName()",
            "TAG",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateMirroLinkMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getDefinedPrivateModeName()",
            "PrivateKnoxMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener, com.android.server.cocktailbar.CocktailBarManagerServiceListener)",
            "onBroadcastReceived(android.content.Intent)",
            "getCocktailBarType()",
            "TAG",
            "isEnableMode()",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "mCurrentUserId",
            "mServiceListener",
            "getDefinedCocktailType()",
            "mContext",
            "static {}",
            "DEBUG"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.PrivateKnoxMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "match(android.content.ContentResolver, android.content.Intent, boolean, java.lang.String)",
            "IntentFilter(java.lang.String)",
            "getPriority()",
            "countDataTypes()",
            "getAutoVerify()",
            "getDataSchemeSpecificPart(int)",
            "addDataPath(java.lang.String, int)",
            "writeToXml(org.xmlpull.v1.XmlSerializer)",
            "addDataSchemeSpecificPart(java.lang.String, int)",
            "countDataSchemes()",
            "match(java.lang.String, java.lang.String, java.lang.String, android.net.Uri, java.util.Set, java.lang.String)",
            "addDataAuthority(android.content.IntentFilter$AuthorityEntry)",
            "countDataPaths()",
            "hasExactDataType(java.lang.String)",
            "hasAction(java.lang.String)",
            "hasDataAuthority(android.content.IntentFilter$AuthorityEntry)",
            "getDataType(int)",
            "typesIterator()",
            "hasDataSchemeSpecificPart(android.os.PatternMatcher)",
            "setPriority(int)",
            "addDataAuthority(java.lang.String, java.lang.String)",
            "dump(android.util.Printer, java.lang.String)",
            "addAction(java.lang.String)",
            "addDataType(java.lang.String)",
            "countCategories()",
            "getDataPath(int)",
            "actionsIterator()",
            "addDataPath(android.os.PatternMatcher)",
            "countDataAuthorities()",
            "isVerified()",
            "addCategory(java.lang.String)",
            "matchAction(java.lang.String)",
            "IntentFilter()",
            "getDataScheme(int)",
            "IntentFilter(android.content.IntentFilter)",
            "getAction(int)",
            "getHostsList()",
            "countDataSchemeSpecificParts()",
            "countActions()",
            "schemesIterator()",
            "addDataScheme(java.lang.String)",
            "getDataAuthority(int)",
            "hasDataScheme(java.lang.String)",
            "getCategory(int)",
            "hasCategory(java.lang.String)",
            "hasDataPath(android.os.PatternMatcher)"
          ],
          "added": [],
          "name": "android.content.IntentFilter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getCaller()",
            "saveDumpstate(java.lang.String)",
            "getMemInfo(long[])",
            "isProductShip()",
            "dumpNativeBacktraceToFile(int, java.lang.String)",
            "getPss(int, long[], long[])",
            "getCallers(int)",
            "getPssSwapPss(int, long[], long[])",
            "isDebuggerConnected()",
            "getCallers(int, java.lang.String)",
            "dumpResetReason(java.lang.String, java.lang.String)",
            "getMemoryInfo(int, android.os.Debug$MemoryInfo)"
          ],
          "added": [],
          "name": "android.os.Debug",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSetMode(int, int, java.lang.String, int)",
            "onSwitchUser(int, int, int, int, int, android.os.IRemoteCallback)",
            "onUnsetMode(int, int, java.lang.String)",
            "onRestrictMode(boolean, int)",
            "onResetMode(int, int, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.CocktailBarManagerServiceListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "COCKTAIL_TYPE_UNKNOWN",
            "renewMode(int)",
            "PRIVATE_MODE_ACTION_TYPE_RESET",
            "REGISTRATION_TYPE_NONE",
            "getModeName()",
            "REGISTRATION_TYPE_CONTENT_OBSERVER",
            "PRIVATE_MODE_ACTION_TYPE_RESTRICT_OFF",
            "getModeId()",
            "REGISTRATION_TYPE_BROADCAST_RECEIVER",
            "getRegistrationType()",
            "PRIVATE_MODE_ACTION_TYPE_SET",
            "COCKTAIL_BAR_TYPE_DISABLE",
            "COCKTAIL_BAR_TYPE_ENABLE",
            "COCKTAIL_TYPE_ALONE",
            "getCocktailBarType()",
            "PRIVATE_MODE_ACTION_TYPE_INVALID",
            "COCKTAIL_TYPE_OVERLAY",
            "PRIVATE_MODE_ACTION_TYPE_RESTRICT_ON",
            "getCocktailType()",
            "PRIVATE_MODE_ACTION_TYPE_NONE",
            "onBroadcastReceived(android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mPrivateModeName",
            "AbsPrivateMode(android.content.Context, int, android.os.Handler, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "getModeName()",
            "AbsPrivateMode(android.content.Context, int, android.content.BroadcastReceiver, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "unregisterBroadcastReceiver(android.content.BroadcastReceiver)",
            "mCocktailType",
            "registerBroadcastReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)",
            "getRegistrationType()",
            "mRegistratonType",
            "getCocktailType()",
            "AbsPrivateMode(android.content.Context, int, com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener)",
            "getModeId()",
            "renewMode(int)",
            "mListener",
            "getDefinedCocktailType()",
            "onBroadcastReceived(android.content.Intent)",
            "mContext",
            "isEnableMode()",
            "getDefinedPrivateModeName()",
            "mPrivateModeId"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.AbsPrivateMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "onSetModeForcely(int, com.android.server.cocktailbar.mode.CocktailBarMode)",
            "getCurrentModeId()",
            "onResetMode(int, com.android.server.cocktailbar.mode.CocktailBarMode)"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.mode.CocktailBarMode$OnCocktailBarModeListener",
          "change_type": 2
        }
      ],
      "name": "com.android.server.cocktailbar.mode"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "this$0",
            "compare(com.android.server.enterprise.general.Typeface, com.android.server.enterprise.general.Typeface)",
            "compare(java.lang.Object, java.lang.Object)",
            "TypefaceFinder$TypefaceSortByName(com.android.server.enterprise.general.TypefaceFinder)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.TypefaceFinder$TypefaceSortByName",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "startDocument()",
            "in_monospace",
            "NODE_DROIDNAME",
            "getParsedData()",
            "in_file",
            "endDocument()",
            "mFont",
            "in_filename",
            "NODE_FILE",
            "ATTR_NAME",
            "endElement(java.lang.String, java.lang.String, java.lang.String)",
            "NODE_SERIF",
            "characters(char[], int, int)",
            "TypefaceParser()",
            "NODE_FILENAME",
            "NODE_FONT",
            "NODE_MONOSPACE",
            "in_droidname",
            "NODE_SANS",
            "in_font",
            "in_sans",
            "mFontFile",
            "startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)",
            "in_serif"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.TypefaceParser",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mTypefaces",
            "getSerifEntries(java.util.Vector, java.util.Vector)",
            "getMonospaceEntries(java.util.Vector, java.util.Vector)",
            "getSansEntries(java.util.Vector, java.util.Vector, java.util.Vector)",
            "TypefaceFinder()",
            "context",
            "findTypefaces(android.content.res.AssetManager, java.lang.String)",
            "parseTypefaceXml(java.lang.String, java.io.InputStream, java.lang.String)",
            "findMatchingTypeface(java.lang.String)",
            "findMatchingTypefaceByName(java.lang.String)",
            "DEFAULT_FONT_VALUE",
            "TAG",
            "FONT_ASSET_DIR"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.TypefaceFinder",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getName()",
            "mFontPackageName",
            "mName",
            "getMonospaceName()",
            "setTypefaceFilename(java.lang.String)",
            "setFontPackageName(java.lang.String)",
            "getTypefaceFilename()",
            "mSansFonts",
            "mSerifFonts",
            "getFontPackageName()",
            "mMonospaceFonts",
            "mTypefaceFilename",
            "Typeface()",
            "getSerifName()",
            "setName(java.lang.String)",
            "getSansName()"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.Typeface",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getFileName()",
            "TypefaceFile(java.lang.String, java.lang.String)",
            "setDroidName(java.lang.String)",
            "getDroidName()",
            "setFileName(java.lang.String)",
            "droidName",
            "TypefaceFile()",
            "fileName",
            "toString()"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.TypefaceFile",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setClipboardDataListChange(int)",
            "MiscPolicy$ClearClipboardData(com.android.server.enterprise.general.MiscPolicy$1)",
            "asBinder()",
            "mBinder",
            "MiscPolicy$ClearClipboardData()",
            "setClipboardDataMgr(android.sec.clipboard.data.IClipboardDataList)",
            "setClipboardDataUiEvent(android.sec.clipboard.IClipboardDataUiEvent)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$ClearClipboardData",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "countryIso",
            "serialNumber",
            "operatorName",
            "SimInfo()",
            "operator",
            "phoneNumber"
          ],
          "added": [],
          "name": "android.app.enterprise.SimInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setSystemActiveFont(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "SBROWSER_BOOKMARKS_URI",
            "getClipboardData()",
            "floatToIndex(float)",
            "MIN_PORT_NUMBER",
            "MiscPolicy(android.content.Context)",
            "allowNFCStateChange(android.app.enterprise.ContextInfo, boolean)",
            "addBookmarkToAndroidBrowser(android.content.ContentResolver, java.lang.String, java.lang.String, android.graphics.Bitmap)",
            "mSystemFontChanger",
            "ACTION_USER_ADDED",
            "addBookmarkToSBrowser(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "getGlobalProxyEnforcingFirewallPermission(android.app.enterprise.ContextInfo)",
            "mEdmStorageProvider",
            "onAdminAdded(int)",
            "clearGlobalProxyEnableEnforcingSecurityPermission(android.app.enterprise.ContextInfo)",
            "setRingerBytes(android.app.enterprise.ContextInfo, byte[], java.lang.String)",
            "enforceFirewallPermission(android.app.enterprise.ContextInfo)",
            "FONT_PACKAGE",
            "clearClipboardData(android.app.enterprise.ContextInfo)",
            "copyFileFromParcel(android.os.ParcelFileDescriptor, java.lang.String)",
            "bitmapToBytes(android.graphics.Bitmap)",
            "setGlobalProxyEnforcingSecurityPermission(android.app.enterprise.ContextInfo, java.lang.String, int, java.util.List)",
            "SBROWSER_PROJECTION",
            "TAG",
            "onAdminRemoved(int)",
            "enforceOwnerOnlyAndSecurityPermission(android.app.enterprise.ContextInfo)",
            "getVisitedLike(android.content.ContentResolver, java.lang.String, android.net.Uri, java.lang.String[])",
            "removeBookmarkFromSBrowser(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "GetSystemFontChanger()",
            "addBookmarkToChrome(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "addWebBookmarkByteBuffer(android.app.enterprise.ContextInfo, android.net.Uri, java.lang.String, byte[])",
            "setGlobalProxyOnBoot()",
            "startNFC(android.app.enterprise.ContextInfo, boolean)",
            "getLockSettings()",
            "mEDM",
            "access$700(com.android.server.enterprise.general.MiscPolicy)",
            "removeFromBookmarks(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "getCurrentLockScreenString(android.app.enterprise.ContextInfo)",
            "removeBookmarkFromChrome(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "getConnectivityManagerService()",
            "setGlobalProxy(android.app.enterprise.ContextInfo, java.lang.String, int, java.util.List)",
            "setGlobalProxyEnforcingFirewallPermission(android.app.enterprise.ContextInfo, java.lang.String, int, java.util.List)",
            "addBookmark(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String, android.graphics.Bitmap)",
            "readFile(java.lang.String)",
            "access$500(com.android.server.enterprise.general.MiscPolicy)",
            "onPreAdminRemoval(int)",
            "static {}",
            "getEDM()",
            "isNFCStateChangeAllowed()",
            "retrieveSystemFontSizes()",
            "clearAllGlobalProxy()",
            "updateDatabase(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "getSystemFonts(android.app.enterprise.ContextInfo)",
            "mContext",
            "addClipboardData(android.content.ClipData)",
            "enforceOwnerOnlyAndWriteSettingsPermission(android.app.enterprise.ContextInfo)",
            "removeBookmarkFromAndroidBrowser(android.content.ContentResolver, java.lang.String, java.lang.String)",
            "getGlobalProxyEnforcingSecurityPermission(android.app.enterprise.ContextInfo)",
            "addWebBookmarkBitmap(android.app.enterprise.ContextInfo, android.net.Uri, java.lang.String, android.graphics.Bitmap)",
            "getSystemActiveFont(android.app.enterprise.ContextInfo)",
            "getLastSimChangeInfo(android.app.enterprise.ContextInfo)",
            "isRingToneEntryExist(android.app.enterprise.ContextInfo, java.lang.String, android.net.Uri)",
            "systemReady()",
            "isAdminLockScreenStringSet(int)",
            "clearGlobalProxyEnableEnforcingFirewallPermission(android.app.enterprise.ContextInfo)",
            "enforceSecurityPermission(android.app.enterprise.ContextInfo)",
            "mBootReceiver",
            "mCon",
            "FONT_NOTSUPPORT_PACKAGE",
            "deleteWebBookmark(android.app.enterprise.ContextInfo, android.net.Uri, java.lang.String)",
            "changeLockScreenString(android.app.enterprise.ContextInfo, java.lang.String)",
            "enforceOwnerOnlyAndHwPermission(android.app.enterprise.ContextInfo)",
            "addClipboardTextData(android.app.enterprise.ContextInfo, java.lang.String)",
            "isGlobalProxyAllowed()",
            "isNFCStarted()",
            "mFontSizes",
            "setRingerFilePath(android.app.enterprise.ContextInfo, java.lang.String, android.os.ParcelFileDescriptor, java.lang.String)",
            "SBROWSER_PROJECTION_ID_INDEX",
            "enforceOwnerOnlyAndFirewallPermission(android.app.enterprise.ContextInfo)",
            "getSystemActiveFontSize(android.app.enterprise.ContextInfo)",
            "mLockSettingsService",
            "SETTINGS_APP_PKGNAME",
            "mSIMInfo",
            "getGlobalProxy(android.app.enterprise.ContextInfo)",
            "getSystemFontSizes(android.app.enterprise.ContextInfo)",
            "CHROME_BOOKMARKS_URI",
            "clearGlobalProxyEnable(android.app.enterprise.ContextInfo)",
            "access$800(com.android.server.enterprise.general.MiscPolicy)",
            "addOrUrlEquals(java.lang.StringBuilder)",
            "setSystemActiveFontSize(android.app.enterprise.ContextInfo, float)",
            "MAX_PORT_NUMBER",
            "validateIp(java.lang.String)",
            "validateHostName(java.lang.String)",
            "getClipboardTextData(android.app.enterprise.ContextInfo)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "HISTORY_PROJECTION",
            "BOOKMARKS_URI"
          ],
          "added": [],
          "name": "android.provider.Browser",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "MiscPolicy$ClearClipboardData$1(com.android.server.enterprise.general.MiscPolicy$ClearClipboardData)",
            "this$0",
            "setClipboardDataListChange(int)",
            "setClipboardDataMgr(android.sec.clipboard.data.IClipboardDataList)",
            "setClipboardDataUiEvent(android.sec.clipboard.IClipboardDataUiEvent)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$ClearClipboardData$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TAG",
            "saveSimState()",
            "this$0",
            "SIM_CHANGE_OPERATION",
            "CURRENT_SIM_SERIAL_NUMBER",
            "mTelephonyManager",
            "mCtxt",
            "PREVIOUS_SIM_COUNTRY_ISO",
            "access$300(com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor)",
            "MiscPolicy$SIMCardUpdateMonitor(com.android.server.enterprise.general.MiscPolicy, android.content.Context)",
            "PREVIOUS_SIM_OPERATOR_NAME",
            "PREVIOUS_SIM_PHONE_NUMBER",
            "CURRENT_SIM_COUNTRY_ISO",
            "SIM_CARD_PREF",
            "mIntentReceiver",
            "startSIMCardUpdates()",
            "CURRENT_SIM_PHONE_NUMBER",
            "CURRENT_SIM_OPERATOR",
            "SIM_CHANGE_TIME",
            "access$200(com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor)",
            "PREVIOUS_SIM_OPERATOR",
            "access$100(com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor)",
            "PREVIOUS_SIM_SERIAL_NUMBER",
            "CURRENT_SIM_OPERATOR_NAME"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IMiscPolicy$Stub()"
          ],
          "added": [],
          "name": "android.app.enterprise.IMiscPolicy$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "validate(java.lang.String, java.lang.String, java.lang.String)"
          ],
          "added": [],
          "name": "android.net.Proxy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "SimChangeInfo()",
            "previousSimInfo",
            "changeTime",
            "currentSimInfo",
            "changeOperation"
          ],
          "added": [],
          "name": "android.app.enterprise.SimChangeInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "MiscPolicy$SIMCardUpdateMonitor$SIMCardBroadcastReceiver(com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor)",
            "MiscPolicy$SIMCardUpdateMonitor$SIMCardBroadcastReceiver(com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor, com.android.server.enterprise.general.MiscPolicy$1)",
            "onReceive(android.content.Context, android.content.Intent)",
            "this$1"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$SIMCardUpdateMonitor$SIMCardBroadcastReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IClipboardWorkingFormUiInterface$Stub()"
          ],
          "added": [],
          "name": "android.sec.clipboard.IClipboardWorkingFormUiInterface$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "MiscPolicy$1(com.android.server.enterprise.general.MiscPolicy)",
            "onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getContentUriForPath(java.lang.String)"
          ],
          "added": [],
          "name": "android.provider.MediaStore$Audio$Media",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "appendEscapedSQLString(java.lang.StringBuilder, java.lang.String)",
            "longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])"
          ],
          "added": [],
          "name": "android.database.DatabaseUtils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IClipboard$Stub()",
            "asInterface(android.os.IBinder)",
            "onTransact(int, android.os.Parcel, android.os.Parcel, int)"
          ],
          "added": [],
          "name": "android.content.IClipboard$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getPrimaryClip(java.lang.String)",
            "setPrimaryClip(android.content.ClipData, java.lang.String)"
          ],
          "added": [],
          "name": "android.content.IClipboard",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setClipboardDataListChange(int)",
            "setClipboardDataUiEvent(android.sec.clipboard.IClipboardDataUiEvent)",
            "asBinder()",
            "setClipboardDataMgr(android.sec.clipboard.data.IClipboardDataList)"
          ],
          "added": [],
          "name": "android.sec.clipboard.IClipboardWorkingFormUiInterface",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "SetText(java.lang.CharSequence)",
            "getText()",
            "ClipboardDataText()",
            "GetFomat()"
          ],
          "added": [],
          "name": "android.sec.clipboard.data.list.ClipboardDataText",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "size()",
            "removeData(int)"
          ],
          "added": [],
          "name": "android.sec.clipboard.data.IClipboardDataList",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.sec.clipboard.IClipboardDataUiEvent",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "READY",
            "name()",
            "PUK_REQUIRED",
            "UNKNOWN",
            "PIN_REQUIRED",
            "ABSENT",
            "PERSO_LOCKED"
          ],
          "added": [],
          "name": "com.android.internal.telephony.IccCardConstants$State",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isNonWildcardSet(java.util.Set, java.lang.Object)",
            "getNumWildcardSets(java.util.Set, java.util.Set, java.lang.Object)",
            "makeEffectiveLists(java.util.Map, java.util.Map, java.lang.Object)",
            "serializeObject(java.lang.Object)",
            "readPropertyValue(java.lang.String, java.lang.String)",
            "static {}",
            "BLACKLIST",
            "writePropertyValue(java.lang.String, java.lang.String, java.lang.String)",
            "serializeObjectToString(java.lang.Object)",
            "deserializeObjectFromString(java.lang.String)",
            "convertStringToList(java.lang.String, java.lang.String)",
            "TAG",
            "isInteger(java.lang.String)",
            "Utils()",
            "deserializeObject(byte[])",
            "WHITELIST",
            "convertListToString(java.util.Collection, java.lang.String)",
            "isBlacklisted(java.util.Map, java.lang.Object, java.lang.Object)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.utils.Utils",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "changeFilePermission(java.lang.String)",
            "deleteFolder(java.io.File, java.lang.String)",
            "copyFontFile(java.io.File, java.io.InputStream, java.lang.String)",
            "bos",
            "static {}",
            "FONT_DIRECTORY",
            "TAG",
            "createFontDirectory(android.content.Context, java.lang.String)",
            "SANS_LOC_NAME",
            "CHMOD_COMMAND",
            "osw",
            "fOut",
            "CHMOD_EXECUTE_COMMAND",
            "CHMOD_READ_COMMAND",
            "writeLoc(android.content.Context, java.lang.String, java.lang.String)",
            "SERIF_LOC_NAME",
            "FontWriter()",
            "copyFontFile1(java.io.File, java.io.InputStream, java.lang.String)",
            "MONOSPACE_LOC_NAME",
            "LOC_DIRECTORY"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.FontWriter",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "savePreferences(java.lang.String, int)",
            "MiscPolicy$SystemFontChanger(com.android.server.enterprise.general.MiscPolicy)",
            "getActiveFontPosition()",
            "getFontsVector()",
            "getSystemFonts()",
            "mTypefaceFinder",
            "MiscPolicy$SystemFontChanger(com.android.server.enterprise.general.MiscPolicy, com.android.server.enterprise.general.MiscPolicy$1)",
            "KEY_PREFERENCE",
            "getFontString()",
            "getSystemActiveFont()",
            "this$0",
            "changeFont(java.lang.String, java.lang.String)",
            "setSystemActiveFont(java.lang.String, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.general.MiscPolicy$SystemFontChanger",
          "change_type": 2
        }
      ],
      "name": "com.android.server.enterprise.general"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "singleton",
            "WMLDOMImplementationImpl()",
            "static {}",
            "createDocument(mf.org.w3c.dom.DocumentType)",
            "getDOMImplementation()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLDOMImplementationImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLDOMImplementation",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "WMLDocumentImpl(mf.org.w3c.dom.DocumentType)",
            "_elemClassSigWML",
            "canRenameElements(java.lang.String, java.lang.String, mf.org.apache.xerces.dom.ElementImpl)",
            "serialVersionUID",
            "_elementTypesWML",
            "createElement(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLDocumentImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLDocument",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getClassName()",
            "setId(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "getClassName()",
            "setAttribute(java.lang.String, boolean)",
            "getAttribute(java.lang.String, int)",
            "getXmlLang()",
            "getAttribute(java.lang.String, boolean)",
            "getId()",
            "WMLElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setClassName(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "setAttribute(java.lang.String, int)",
            "getAttribute(java.lang.String)",
            "serialVersionUID"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttributeNodeNS(java.lang.String, java.lang.String)",
            "getAttributes()",
            "hasAttributes()",
            "removeAttributeNode(mf.org.w3c.dom.Attr)",
            "getAttribute(java.lang.String)",
            "getNodeName()",
            "getTagName()",
            "setAttributeNode(mf.org.w3c.dom.Attr)",
            "getParentNode()",
            "setAttributeNodeNS(mf.org.w3c.dom.Attr)",
            "getAttributeNode(java.lang.String)",
            "getFirstChild()"
          ],
          "added": [],
          "name": "mf.org.w3c.dom.Element",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "getXmlLang()",
            "serialVersionUID",
            "getClassName()",
            "WMLSmallElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLSmallElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLSmallElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "getClassName()",
            "getXmlLang()",
            "WMLBrElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getAttribute(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "setId(java.lang.String)",
            "setClassName(java.lang.String)",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLBrElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLBrElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getId()",
            "WMLFieldsetElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setId(java.lang.String)",
            "getXmlLang()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "setTitle(java.lang.String)",
            "getTitle()",
            "setXmlLang(java.lang.String)",
            "getClassName()",
            "serialVersionUID",
            "getAttribute(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLFieldsetElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setTitle(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "getXmlLang()",
            "getTitle()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLFieldsetElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "serialVersionUID",
            "getAlign()",
            "getTitle()",
            "getId()",
            "setColumns(int)",
            "getClassName()",
            "getXmlLang()",
            "setAttribute(java.lang.String, java.lang.String)",
            "getColumns()",
            "setTitle(java.lang.String)",
            "getAttribute(java.lang.String)",
            "setAttribute(java.lang.String, int)",
            "setId(java.lang.String)",
            "WMLTableElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setClassName(java.lang.String)",
            "getAttribute(java.lang.String, int)",
            "setXmlLang(java.lang.String)",
            "setAlign(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLTableElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getColumns()",
            "setTitle(java.lang.String)",
            "getTitle()",
            "getXmlLang()",
            "setXmlLang(java.lang.String)",
            "setAlign(java.lang.String)",
            "getAlign()",
            "setColumns(int)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLTableElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLEmElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getId()",
            "getXmlLang()",
            "getAttribute(java.lang.String)",
            "serialVersionUID",
            "setId(java.lang.String)",
            "getClassName()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setXmlLang(java.lang.String)",
            "WMLEmElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setClassName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLEmElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLRefreshElement",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "serialVersionUID",
            "setClassName(java.lang.String)",
            "WMLRefreshElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLRefreshElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setAttribute(java.lang.String, java.lang.String)",
            "setOnEnterBackward(java.lang.String)",
            "getOnEnterForward()",
            "getOrdered()",
            "setOrdered(boolean)",
            "setOnEnterForward(java.lang.String)",
            "serialVersionUID",
            "getAttribute(java.lang.String)",
            "WMLCardElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setId(java.lang.String)",
            "setOnTimer(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "setTitle(java.lang.String)",
            "getAttribute(java.lang.String, boolean)",
            "getXmlLang()",
            "getId()",
            "setClassName(java.lang.String)",
            "setNewContext(boolean)",
            "setAttribute(java.lang.String, boolean)",
            "getClassName()",
            "getOnTimer()",
            "getNewContext()",
            "getOnEnterBackward()",
            "getTitle()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLCardElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "setOnTimer(java.lang.String)",
            "getTitle()",
            "getXmlLang()",
            "setNewContext(boolean)",
            "setOnEnterBackward(java.lang.String)",
            "getOrdered()",
            "setTitle(java.lang.String)",
            "getNewContext()",
            "getOnEnterBackward()",
            "setOnEnterForward(java.lang.String)",
            "getOnTimer()",
            "getOnEnterForward()",
            "setOrdered(boolean)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLCardElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "serialVersionUID",
            "setId(java.lang.String)",
            "setValue(java.lang.String)",
            "getClassName()",
            "getValue()",
            "getAttribute(java.lang.String)",
            "getName()",
            "WMLTimerElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLTimerElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getValue()",
            "setValue(java.lang.String)",
            "setName(java.lang.String)",
            "getName()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLTimerElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLIElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setClassName(java.lang.String)",
            "getXmlLang()",
            "setAttribute(java.lang.String, java.lang.String)",
            "WMLIElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "serialVersionUID",
            "getClassName()",
            "setXmlLang(java.lang.String)",
            "setId(java.lang.String)",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLIElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getId()",
            "getScheme()",
            "getContent()",
            "setContent(java.lang.String)",
            "getAttribute(java.lang.String, boolean)",
            "getHttpEquiv()",
            "WMLMetaElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "getForua()",
            "getAttribute(java.lang.String)",
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "setName(java.lang.String)",
            "getName()",
            "setClassName(java.lang.String)",
            "setScheme(java.lang.String)",
            "setHttpEquiv(java.lang.String)",
            "setForua(boolean)",
            "setAttribute(java.lang.String, boolean)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLMetaElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getHttpEquiv()",
            "getScheme()",
            "getName()",
            "setForua(boolean)",
            "setContent(java.lang.String)",
            "setScheme(java.lang.String)",
            "getContent()",
            "setName(java.lang.String)",
            "getForua()",
            "setHttpEquiv(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLMetaElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getClassName()",
            "getAttribute(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "setId(java.lang.String)",
            "getXmlLang()",
            "setAttribute(java.lang.String, java.lang.String)",
            "WMLStrongElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setXmlLang(java.lang.String)",
            "serialVersionUID"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLStrongElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLStrongElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setId(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "getXmlLang()",
            "setTitle(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "getTitle()",
            "WMLOptgroupElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "serialVersionUID",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLOptgroupElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setTitle(java.lang.String)",
            "getTitle()",
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLOptgroupElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setId(java.lang.String)",
            "getAttribute(java.lang.String)",
            "getClassName()",
            "getId()",
            "setClassName(java.lang.String)",
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "getType()",
            "setType(java.lang.String)",
            "WMLOneventElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLOneventElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getType()",
            "setType(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLOneventElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getId()",
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "setPath(java.lang.String)",
            "setDomain(java.lang.String)",
            "WMLAccessElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getPath()",
            "getAttribute(java.lang.String)",
            "getClassName()",
            "setClassName(java.lang.String)",
            "setId(java.lang.String)",
            "getDomain()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLAccessElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getPath()",
            "getDomain()",
            "setDomain(java.lang.String)",
            "setPath(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLAccessElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setOptional(java.lang.String)",
            "setLabel(java.lang.String)",
            "serialVersionUID",
            "setXmlLang(java.lang.String)",
            "getAttribute(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setType(java.lang.String)",
            "WMLDoElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getOptional()",
            "getLabel()",
            "setName(java.lang.String)",
            "setId(java.lang.String)",
            "getType()",
            "getName()",
            "getXmlLang()",
            "getClassName()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLDoElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setLabel(java.lang.String)",
            "getLabel()",
            "setOptional(java.lang.String)",
            "getType()",
            "getName()",
            "setXmlLang(java.lang.String)",
            "getOptional()",
            "getXmlLang()",
            "setName(java.lang.String)",
            "setType(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLDoElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getName()",
            "setValue(java.lang.String)",
            "setTabIndex(int)",
            "setName(java.lang.String)",
            "getMaxLength()",
            "getAttribute(java.lang.String)",
            "getTabIndex()",
            "setEmptyOk(boolean)",
            "setId(java.lang.String)",
            "setAttribute(java.lang.String, boolean)",
            "getXmlLang()",
            "getAttribute(java.lang.String, boolean)",
            "serialVersionUID",
            "getTitle()",
            "setSize(int)",
            "getSize()",
            "WMLInputElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setXmlLang(java.lang.String)",
            "getFormat()",
            "getId()",
            "setMaxLength(int)",
            "getType()",
            "getClassName()",
            "getEmptyOk()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setFormat(java.lang.String)",
            "getValue()",
            "setAttribute(java.lang.String, int)",
            "setClassName(java.lang.String)",
            "getAttribute(java.lang.String, int)",
            "setTitle(java.lang.String)",
            "setType(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLInputElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setType(java.lang.String)",
            "getName()",
            "getType()",
            "getTitle()",
            "getValue()",
            "getSize()",
            "setTabIndex(int)",
            "setEmptyOk(boolean)",
            "setMaxLength(int)",
            "getFormat()",
            "setValue(java.lang.String)",
            "setName(java.lang.String)",
            "getEmptyOk()",
            "getMaxLength()",
            "setFormat(java.lang.String)",
            "setSize(int)",
            "getTabIndex()",
            "setTitle(java.lang.String)",
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLInputElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAlt()",
            "getWidth()",
            "WMLImgElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setClassName(java.lang.String)",
            "setHeight(java.lang.String)",
            "setLocalSrc(java.lang.String)",
            "getSrc()",
            "getAttribute(java.lang.String)",
            "setWidth(java.lang.String)",
            "setHspace(java.lang.String)",
            "getClassName()",
            "getXmlLang()",
            "getId()",
            "serialVersionUID",
            "setAlign(java.lang.String)",
            "setVspace(java.lang.String)",
            "getHeight()",
            "setSrc(java.lang.String)",
            "getLocalSrc()",
            "setXmlLang(java.lang.String)",
            "getVspace()",
            "setAlt(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "getHspace()",
            "setId(java.lang.String)",
            "getAlign()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLImgElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getLocalSrc()",
            "setAlt(java.lang.String)",
            "getWidth()",
            "getHeight()",
            "setXmlLang(java.lang.String)",
            "setSrc(java.lang.String)",
            "getAlign()",
            "setAlign(java.lang.String)",
            "getSrc()",
            "setWidth(java.lang.String)",
            "setVspace(java.lang.String)",
            "setLocalSrc(java.lang.String)",
            "getAlt()",
            "setHeight(java.lang.String)",
            "getHspace()",
            "getVspace()",
            "setHspace(java.lang.String)",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLImgElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setId(java.lang.String)",
            "getId()",
            "WMLBElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getAttribute(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "getClassName()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "serialVersionUID",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLBElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLBElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "WMLTdElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "getClassName()",
            "getXmlLang()",
            "getAttribute(java.lang.String)",
            "serialVersionUID",
            "setId(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLTdElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLTdElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLUElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getId()",
            "setXmlLang(java.lang.String)",
            "getXmlLang()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "getAttribute(java.lang.String)",
            "WMLUElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "setId(java.lang.String)",
            "serialVersionUID"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLUElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setId(java.lang.String)",
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "WMLAnchorElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setTitle(java.lang.String)",
            "getClassName()",
            "getTitle()",
            "getAttribute(java.lang.String)",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLAnchorElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "setTitle(java.lang.String)",
            "getTitle()",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLAnchorElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLHeadElement",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getClassName()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "getId()",
            "serialVersionUID",
            "getAttribute(java.lang.String)",
            "WMLHeadElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setId(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLHeadElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setOnEnterForward(java.lang.String)",
            "setOnTimer(java.lang.String)",
            "setOnEnterBackward(java.lang.String)",
            "getOnEnterForward()",
            "getOnEnterBackward()",
            "getOnTimer()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLTemplateElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setOnTimer(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "setClassName(java.lang.String)",
            "getOnEnterForward()",
            "WMLTemplateElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setOnEnterForward(java.lang.String)",
            "getId()",
            "getOnTimer()",
            "getClassName()",
            "getOnEnterBackward()",
            "serialVersionUID",
            "getAttribute(java.lang.String)",
            "setOnEnterBackward(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLTemplateElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLNoopElement",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "WMLNoopElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "serialVersionUID",
            "setAttribute(java.lang.String, java.lang.String)",
            "getClassName()",
            "setClassName(java.lang.String)",
            "setId(java.lang.String)",
            "getAttribute(java.lang.String)",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLNoopElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setAlign(java.lang.String)",
            "getMode()",
            "setMode(java.lang.String)",
            "getAlign()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLPElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "getAttribute(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "getId()",
            "getMode()",
            "setXmlLang(java.lang.String)",
            "getAlign()",
            "serialVersionUID",
            "setAlign(java.lang.String)",
            "setMode(java.lang.String)",
            "WMLPElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "setClassName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLPElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setHref(java.lang.String)",
            "setId(java.lang.String)",
            "setClassName(java.lang.String)",
            "setTitle(java.lang.String)",
            "getAttribute(java.lang.String)",
            "serialVersionUID",
            "setXmlLang(java.lang.String)",
            "WMLAElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "getId()",
            "setAttribute(java.lang.String, java.lang.String)",
            "getHref()",
            "getTitle()",
            "getXmlLang()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLAElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getTitle()",
            "setHref(java.lang.String)",
            "getXmlLang()",
            "setXmlLang(java.lang.String)",
            "setTitle(java.lang.String)",
            "getHref()",
            "setId(java.lang.String)",
            "getId()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLAElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "serialVersionUID",
            "getXmlLang()",
            "setClassName(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "WMLBigElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getId()",
            "setAttribute(java.lang.String, java.lang.String)",
            "getClassName()",
            "setId(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLBigElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLBigElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "WMLGoElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "getMethod()",
            "serialVersionUID",
            "getId()",
            "setSendreferer(java.lang.String)",
            "getClassName()",
            "setHref(java.lang.String)",
            "getAcceptCharset()",
            "getAttribute(java.lang.String)",
            "setMethod(java.lang.String)",
            "getSendreferer()",
            "setAcceptCharset(java.lang.String)",
            "getHref()",
            "setClassName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLGoElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getSendreferer()",
            "setMethod(java.lang.String)",
            "getMethod()",
            "getHref()",
            "getAcceptCharset()",
            "setHref(java.lang.String)",
            "setAcceptCharset(java.lang.String)",
            "setSendreferer(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLGoElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setValue(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "getOnPick()",
            "getTitle()",
            "setOnPick(java.lang.String)",
            "setTitle(java.lang.String)",
            "getValue()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLOptionElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setClassName(java.lang.String)",
            "getId()",
            "getOnPick()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setId(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "getTitle()",
            "getValue()",
            "getClassName()",
            "serialVersionUID",
            "setOnPick(java.lang.String)",
            "setValue(java.lang.String)",
            "getXmlLang()",
            "WMLOptionElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setTitle(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLOptionElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setClassName(java.lang.String)",
            "serialVersionUID",
            "setValue(java.lang.String)",
            "getClassName()",
            "WMLSetvarElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setId(java.lang.String)",
            "getValue()",
            "getId()",
            "getName()",
            "setAttribute(java.lang.String, java.lang.String)",
            "setName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLSetvarElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setValue(java.lang.String)",
            "getValue()",
            "setName(java.lang.String)",
            "getName()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLSetvarElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLPrevElement",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "setClassName(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "getAttribute(java.lang.String)",
            "getId()",
            "setId(java.lang.String)",
            "WMLPrevElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "serialVersionUID"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLPrevElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "mf.org.apache.wml.WMLTrElement",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "getAttribute(java.lang.String)",
            "setId(java.lang.String)",
            "getId()",
            "setClassName(java.lang.String)",
            "getClassName()",
            "setAttribute(java.lang.String, java.lang.String)",
            "WMLTrElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "serialVersionUID"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLTrElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getValue()",
            "getName()",
            "setName(java.lang.String)",
            "setValue(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLPostfieldElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getValue()",
            "serialVersionUID",
            "WMLPostfieldElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "setId(java.lang.String)",
            "setValue(java.lang.String)",
            "getId()",
            "getAttribute(java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setName(java.lang.String)",
            "getName()",
            "setClassName(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLPostfieldElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getIValue()",
            "setValue(java.lang.String)",
            "getName()",
            "setTitle(java.lang.String)",
            "setXmlLang(java.lang.String)",
            "setMultiple(boolean)",
            "getXmlLang()",
            "getTabIndex()",
            "setIValue(java.lang.String)",
            "getTitle()",
            "getIName()",
            "getMultiple()",
            "setName(java.lang.String)",
            "setIName(java.lang.String)",
            "setTabIndex(int)",
            "getValue()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLSelectElement",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setValue(java.lang.String)",
            "getValue()",
            "setName(java.lang.String)",
            "getAttribute(java.lang.String, boolean)",
            "getIValue()",
            "setIName(java.lang.String)",
            "getXmlLang()",
            "setXmlLang(java.lang.String)",
            "getAttribute(java.lang.String)",
            "getTitle()",
            "setIValue(java.lang.String)",
            "setTitle(java.lang.String)",
            "WMLSelectElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "getClassName()",
            "getIName()",
            "getAttribute(java.lang.String, int)",
            "setAttribute(java.lang.String, java.lang.String)",
            "setClassName(java.lang.String)",
            "getName()",
            "setAttribute(java.lang.String, boolean)",
            "getTabIndex()",
            "setTabIndex(int)",
            "getId()",
            "setId(java.lang.String)",
            "serialVersionUID",
            "getMultiple()",
            "setMultiple(boolean)",
            "setAttribute(java.lang.String, int)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLSelectElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setXmlLang(java.lang.String)",
            "setClassName(java.lang.String)",
            "getAttribute(java.lang.String)",
            "getId()",
            "WMLWmlElementImpl(mf.org.apache.wml.dom.WMLDocumentImpl, java.lang.String)",
            "setAttribute(java.lang.String, java.lang.String)",
            "getXmlLang()",
            "serialVersionUID",
            "setId(java.lang.String)",
            "getClassName()"
          ],
          "added": [],
          "name": "mf.org.apache.wml.dom.WMLWmlElementImpl",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getXmlLang()",
            "setXmlLang(java.lang.String)"
          ],
          "added": [],
          "name": "mf.org.apache.wml.WMLWmlElement",
          "change_type": 2
        }
      ],
      "name": "mf.org.apache.wml.dom"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "CocktailBarSettingObserver$1(com.android.server.cocktailbar.settings.CocktailBarSettingObserver)",
            "run()",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.settings.CocktailBarSettingObserver$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mLastActiveEdgeArea",
            "mLastIsTurnOverLightingOn",
            "mLastIsInformationStreamOn",
            "mContext",
            "CocktailBarSettingObserver(android.content.Context, android.os.Handler)",
            "mHandler",
            "mInitialized",
            "stop()",
            "ACTION_COCKTAILBAR_SETTING_CHANGED",
            "onBroadcastReceived(android.content.Intent)",
            "PEOPLE_PACKAGE_NAME",
            "observe()",
            "access$000(com.android.server.cocktailbar.settings.CocktailBarSettingObserver)",
            "mLastIsNightModeOn",
            "startService(java.lang.String, java.lang.String, java.lang.String)",
            "NIGHTCLOCK_PACKAGE_NAME",
            "setupWakeup()",
            "TAG",
            "NIGHTCLOCK_CLASS_NAME",
            "startPeopleStripeServiceIfNeed()",
            "PEOPLE_CLASS_NAME",
            "mLastIsPeopleStripeOn",
            "mLastIsTaskEdgeOn",
            "onChange(boolean)",
            "startNightClockServiceIfNeed()",
            "updateSetting()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.settings.CocktailBarSettingObserver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CocktailBarSettings$CocktailInfo()",
            "cocktailId"
          ],
          "added": [
            "packageName",
            "CocktailBarSettings$CocktailInfo(int, java.lang.String)"
          ],
          "name": "com.android.server.cocktailbar.settings.CocktailBarSettings$CocktailInfo",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "mContext",
            "getEnabledCocktailsStr()",
            "updateEnabledCocktailListLocked()",
            "mCocktailMap",
            "mEnabledCocktailsSplitter",
            "TAG",
            "setEnabledCocktailsLocked(java.util.ArrayList)",
            "updateInstalledCocktails(android.util.SparseArray)",
            "mCurrentUserId",
            "mEnabledCocktailListCache",
            "CocktailBarSettings(android.content.Context, android.util.SparseArray, int)",
            "initCocktailMap(android.util.SparseArray)",
            "getEnableCocktailIds()",
            "COCKTAIL_BAR_SEPARATER",
            "static {}",
            "updateEnabledCocktailList()",
            "putEnabledCocktailsStr(java.lang.String)",
            "getChangedCocktailIdsListLocked(java.util.ArrayList, java.util.ArrayList)",
            "mEnabledCocktailsStrCache",
            "mResolver",
            "isEnabledCocktail(int)",
            "isLocalBinder()",
            "access$000(com.android.server.cocktailbar.settings.CocktailBarSettings)",
            "access$100(com.android.server.cocktailbar.settings.CocktailBarSettings)",
            "mHandler",
            "setCurrentUserId(int)"
          ],
          "added": [
            "isEnabledCocktail(java.lang.String)"
          ],
          "name": "com.android.server.cocktailbar.settings.CocktailBarSettings",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "CocktailBarSettings$1(com.android.server.cocktailbar.settings.CocktailBarSettings)",
            "this$0",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.cocktailbar.settings.CocktailBarSettings$1",
          "change_type": 2
        }
      ],
      "name": "com.android.server.cocktailbar.settings"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0",
            "UniversalCredentialManagerService$2(com.android.server.enterprise.ucm.UniversalCredentialManagerService)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onReceive(android.content.Context, android.content.Intent)",
            "UniversalCredentialManagerService$1(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "UcmKeystoreProvider(java.lang.String, android.os.Bundle)"
          ],
          "added": [],
          "name": "com.sec.enterprise.knox.ucm.core.jcajce.UcmKeystoreProvider",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "UniversalCredentialManagerService$UcsReceiver(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "onReceive(android.content.Context, android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService$UcsReceiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CACertificateInfo()",
            "certificate"
          ],
          "added": [],
          "name": "com.sec.enterprise.knox.ucm.configurator.CACertificateInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "randInt(int, int)",
            "UniversalCredentialManagerService$RequestIdGenerator()",
            "fraction",
            "getNextContainerRequestId()",
            "random"
          ],
          "added": [],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService$RequestIdGenerator",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "deleteCACertificateUsingAdminId(int, int, java.lang.String)",
            "BOOT_PLUGIN_PACKAGE",
            "deleteCertificate(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.lang.String)",
            "performStorageCleanup(java.lang.String)",
            "mEDM",
            "mBReciever",
            "access$2000(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "mUniversalCredentialUtil",
            "getUcmService()",
            "systemReady()",
            "CRED_PACKAGE_NAME",
            "addOrUpdateDefaultInstallStorage(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "access$1500(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "installCACertificate(android.app.enterprise.ContextInfo, byte[], java.lang.String, android.os.Bundle)",
            "mPkgReciever",
            "getAllCertificateAliases(com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "getStorageAuthenticationType(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "CRED_VENDOR_INFO",
            "deleteCACertificate(android.app.enterprise.ContextInfo, java.lang.String)",
            "isCredentialStorageManagedAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "mPm",
            "manageCredentialStorage(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, boolean)",
            "mUcseService",
            "access$1700(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "getCACertLocation(int, int, java.lang.String)",
            "getCertificateAliases(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "compareSignatures(android.content.pm.Signature[], android.content.pm.Signature[])",
            "processPackagesForPlugin(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "getManagedProviders()",
            "checkDefaultInstallCredentialStorageExists(int, java.lang.String, java.lang.String)",
            "expiredAdmins",
            "installCACertOnBoot()",
            "performAdminCleanup(int)",
            "EVENT_LICENSE_EXPIRED",
            "getEDM()",
            "getStoragesRelatedToAdminId(int)",
            "access$1000(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "getValidString(java.lang.String)",
            "isAccessAllowed(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "insertOrUpdateExemptPackages(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, int, int, int)",
            "access$1300(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "isCertificateAccessAllowed(java.lang.String, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "isValidAuthType(int)",
            "access$200(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "getAdminIdRelatedToStorageAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "installCertificate(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, byte[], java.lang.String, java.lang.String, android.os.Bundle)",
            "setAuthTypeInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "onAdminRemoved(int)",
            "installCertificateInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, byte[], java.lang.String, android.os.Bundle, boolean)",
            "getUniversalCredentialUtil()",
            "KNOX_UCM_PLUGIN_PERMISSION",
            "getAdminIdRelatedToStorage(java.lang.String)",
            "onAdminAdded(int)",
            "performCredentialStorageCleanup(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "access$1600(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int, java.lang.String)",
            "getAliases(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "addPackagesToWhiteListInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, android.os.Bundle)",
            "addPackagesToExemptList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int, java.util.List)",
            "ESE_PLUGIN_UNIQUE_ID",
            "getDefaultInstallStorageAsUser(int)",
            "isValidStorageOption(int)",
            "notifyLicenseStatus(int, java.lang.String)",
            "clearWhiteList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "KNOX_UCM_OTHER_PERMISSION",
            "exemptedAppsCache",
            "isCertificateAccessAllowedInternal(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.lang.String, int)",
            "access$1400(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int, java.lang.String)",
            "getAuthType(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "isValidCredentialStorage(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "performWhitelistAppCleanup(int, java.lang.String)",
            "static {}",
            "ESE_PLUGIN_PACKAGE",
            "isPackageFromExemptList(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "lockCredentialStorageInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, boolean)",
            "DBG",
            "getWhitelistedData(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int, java.lang.String)",
            "mContext",
            "access$1100(com.android.server.enterprise.ucm.UniversalCredentialManagerService, java.lang.String)",
            "access$600(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "setDefaultInstallStorage(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "getPackagesFromExemptListAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "getDefaultInstallStorage(android.app.enterprise.ContextInfo)",
            "getPackagesFromExemptList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "addPackagesToWhiteList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, android.os.Bundle)",
            "isSystemApp(java.lang.String)",
            "isValidExemptType(int)",
            "installCertificateInTIMA(byte[], java.lang.String, android.os.Bundle, int, int)",
            "TAG",
            "access$100(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "clearWhiteListPackages(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int, int, int, java.lang.String)",
            "removePackagesFromWhiteList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, android.os.Bundle)",
            "access$1200(com.android.server.enterprise.ucm.UniversalCredentialManagerService, java.lang.String)",
            "getPackageSetting(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, com.sec.enterprise.AppIdentity)",
            "getPackagesFromWhiteList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "getPackagesFromWhiteListAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "KNOX_UCM_ESE_PERMISSION",
            "access$700(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "performExemptedAppCleanup(int, java.lang.String)",
            "access$2100(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int)",
            "installCertificateInProvider(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, byte[], java.lang.String, java.lang.String, android.os.Bundle, int, int, boolean, boolean)",
            "access$900(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int)",
            "convertStringToSignature(java.lang.String)",
            "insertOrUpdateCertificateProfile(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int, int, java.lang.String)",
            "isPluginActive(com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "addOrUpdateSecureStorageConfig(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, boolean)",
            "isValidParam(com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "access$300(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "getAvailableCredentialStorages(android.app.enterprise.ContextInfo)",
            "mEdmStorageProvider",
            "removeCertificatefromTIMA(java.lang.String, int, int, java.lang.String)",
            "isCredentialStorageLocked(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "configureCredentialStorageForODESettings(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "installCertificateMain(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, byte[], java.lang.String, java.lang.String, android.os.Bundle, boolean, boolean)",
            "lockCredentialStorage(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, boolean)",
            "getCACertificateAliases(android.app.enterprise.ContextInfo, android.os.Bundle)",
            "deleteCertificateUsingAdminId(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.lang.String)",
            "removeExemptPackages(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, int, int, int)",
            "isCredentialStorageManagedInternal(int, int, java.lang.String, java.lang.String)",
            "getSupportedAlgorithmsInternal(com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "getCACertificate(android.app.enterprise.ContextInfo, java.lang.String)",
            "getAvailableCredentialStorageInternal()",
            "removeWhiteListPackages(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, int, int, android.os.Bundle, int, java.lang.String)",
            "activePluginsCache",
            "EVENT_LICENSE_ACTIVATE",
            "getAllAdmins()",
            "whitelistedAppsCache",
            "checkCredentialStorageExistsForAdmin(int, int, java.lang.String, java.lang.String)",
            "performUserCleanup(int)",
            "sContext",
            "isValidAccessType(int)",
            "access$000()",
            "getCredentialStorages(android.app.enterprise.ContextInfo, java.lang.String)",
            "configureCredentialStorageInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, boolean)",
            "ucsCertLocation",
            "adminIds",
            "setAuthType(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int)",
            "access$800(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int)",
            "checkCallerPermissionFor(java.lang.String)",
            "CA_CERT_FILE_NAME",
            "getActivePlugin()",
            "deleteCertificateMain(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.lang.String)",
            "mTADriver",
            "systemPlugin",
            "checkDefaultInstallCredentialStorageExistsForAdmin(int, int, java.lang.String, java.lang.String)",
            "getAliasesInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "setPackageSetting(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle, com.sec.enterprise.AppIdentity)",
            "configureCredentialStoragePlugin(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, android.os.Bundle)",
            "access$500(com.android.server.enterprise.ucm.UniversalCredentialManagerService, int)",
            "isSystemStorage(java.lang.String)",
            "getCredentialStorageProvider(com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "notifyAdminUninstall(int)",
            "insertOrUpdateCACertificateProfile(int, int, java.lang.String, java.lang.String)",
            "removeCertificatefromProvider(java.lang.String, java.lang.String, java.lang.String, int, int)",
            "access$1900(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "UniversalCredentialManagerService(android.content.Context)",
            "addPackagesToWhiteListMain(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, android.os.Bundle)",
            "processAdminLicenseExpiry(int)",
            "ALL_PACKAGES",
            "checkCredentialStorageExists(int, java.lang.String, java.lang.String)",
            "insertOrUpdateWhiteListPackages(com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.util.List, int, int, android.os.Bundle, int, java.lang.String)",
            "isAdminLicenseActive(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "onPreAdminRemoval(int)",
            "checkCACertAliasForAdmin(int, int, java.lang.String)",
            "getAllUsers()",
            "isCredentialStorageManaged(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "removePackagesFromExemptList(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, int, java.util.List)",
            "isCredentialStorageLockedAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "setDefaultInstallStorageInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "deleteCertificateInternal(int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage, java.lang.String)",
            "enforceSecurityPermission(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "getODESettingsConfiguration(android.app.enterprise.ContextInfo)",
            "getAllWhitelistedApps()",
            "CAC_PLUGIN_PACKAGE",
            "getSupportedAlgorithms(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "notifyToPlugin(int, int, int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "mRIdGenerator",
            "access$1800(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "access$400(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "getCredentialStoragePluginConfiguration(android.app.enterprise.ContextInfo, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)",
            "mUCSMHandler",
            "checkCredentialStorageAliasForAdmin(int, int, java.lang.String, java.lang.String, java.lang.String)",
            "getAllExemptedApps()",
            "getCertificateAliasesAsUser(int, com.sec.enterprise.knox.ucm.configurator.CredentialStorage)"
          ],
          "added": [
            "ucsODECertLocation",
            "insertOrUpdateCACertificateProfile(int, int, java.lang.String, java.lang.String, boolean)",
            "restoreCACertificate()",
            "findOwnerOfODECACert()",
            "ODE_CA_CERT_LOCATION"
          ],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService",
          "change_type": 3
        },
        {
          "size": 1,
          "removed": [
            "MSG_REINSTALL_CA_CERT",
            "MSG_LOCK_STATUS_UPDATE",
            "MSG_SYNC_UP_DATA",
            "MSG_LOAD_PLUGINS",
            "this$0",
            "MSG_CLEAN_INFO",
            "UniversalCredentialManagerService$UCSMHandler(com.android.server.enterprise.ucm.UniversalCredentialManagerService)",
            "sendMessage(android.os.Message)",
            "MSG_LOAD_WHITELIST_AND_EXEMPT_APPS",
            "obtainMessage(int)",
            "MSG_CLEAN_USER_INFO",
            "MSG_LOAD_ADMINS",
            "handleMessage(android.os.Message)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.ucm.UniversalCredentialManagerService$UCSMHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setPackageSetting(int, java.lang.String, java.lang.String, java.lang.String, android.os.Bundle, int)",
            "listAllProviders()",
            "notifyLicenseStatus(java.lang.String, java.lang.String, int)",
            "setAdminConfigureBundleForCs(int, int, java.lang.String, android.os.Bundle, int)",
            "configureODESettings(java.lang.String)",
            "getPackageSetting(int, java.lang.String, java.lang.String, java.lang.String, int)",
            "deleteCertificate(java.lang.String, int)",
            "getODESettingsConfiguration()",
            "installCertificate(java.lang.String, byte[], byte[], android.os.Bundle)",
            "getAdminConfigureBundleFromCs(int, int, java.lang.String)",
            "notifyChangeToPlugin(java.lang.String, int, android.os.Bundle)"
          ],
          "added": [],
          "name": "com.sec.enterprise.knox.ucm.core.IUcmService",
          "change_type": 2
        }
      ],
      "name": "com.android.server.enterprise.ucm"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "elapsedTimestamp",
            "message",
            "agent",
            "duration",
            "userId",
            "managingTrust",
            "TrustArchive$Event(int, int, android.content.ComponentName, java.lang.String, long, int, boolean)",
            "TrustArchive$Event(int, int, android.content.ComponentName, java.lang.String, long, int, boolean, com.android.server.trust.TrustArchive$1)",
            "type",
            "flags"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustArchive$Event",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "com.android.server.trust.TrustArchive$1",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "formatElapsed(long)",
            "dumpType(int)",
            "TYPE_TRUST_TIMEOUT",
            "TYPE_AGENT_STOPPED",
            "HISTORY_LIMIT",
            "logRevokeTrust(int, android.content.ComponentName)",
            "TYPE_AGENT_DIED",
            "TYPE_MANAGING_TRUST",
            "logAgentDied(int, android.content.ComponentName)",
            "logGrantTrust(int, android.content.ComponentName, java.lang.String, long, int)",
            "logAgentConnected(int, android.content.ComponentName)",
            "TrustArchive()",
            "dumpGrantFlags(int)",
            "logAgentStopped(int, android.content.ComponentName)",
            "logManagingTrust(int, android.content.ComponentName, boolean)",
            "TYPE_AGENT_CONNECTED",
            "mEvents",
            "addEvent(com.android.server.trust.TrustArchive$Event)",
            "dump(java.io.PrintWriter, int, int, java.lang.String, boolean)",
            "TYPE_GRANT_TRUST",
            "TYPE_REVOKE_TRUST",
            "logTrustTimeout(int, android.content.ComponentName)",
            "formatDuration(long)",
            "getSimpleName(android.content.ComponentName)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustArchive",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TrustAgentWrapper$2(com.android.server.trust.TrustAgentWrapper)",
            "handleMessage(android.os.Message)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustAgentWrapper$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.service.trust.ITrustAgentServiceCallback",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "onUnlockAttempt(boolean)",
            "onTrustTimeout()",
            "onConfigure(java.util.List, android.os.IBinder)",
            "onDeviceLocked()",
            "setCallback(android.service.trust.ITrustAgentServiceCallback)",
            "onDeviceUnlocked()"
          ],
          "added": [],
          "name": "android.service.trust.ITrustAgentService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TrustAgentWrapper$1(com.android.server.trust.TrustAgentWrapper)",
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustAgentWrapper$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$000(com.android.server.trust.TrustAgentWrapper)",
            "mTrusted",
            "PERMISSION",
            "isConnected()",
            "mMaximumTimeToLock",
            "mContext",
            "mAlarmPendingIntent",
            "onDeviceLocked()",
            "mManagingTrust",
            "getMessage()",
            "mHandler",
            "isBound()",
            "access$1900(com.android.server.trust.TrustAgentWrapper)",
            "access$900(com.android.server.trust.TrustAgentWrapper)",
            "access$700(com.android.server.trust.TrustAgentWrapper)",
            "DEBUG",
            "getScheduledRestartUptimeMillis()",
            "MSG_SET_TRUST_AGENT_FEATURES_COMPLETED",
            "access$1000(com.android.server.trust.TrustAgentWrapper)",
            "access$302(com.android.server.trust.TrustAgentWrapper, java.lang.CharSequence)",
            "onDeviceUnlocked()",
            "access$500(com.android.server.trust.TrustAgentWrapper)",
            "DATA_DURATION",
            "mTrustDisabledByDpm",
            "access$300(com.android.server.trust.TrustAgentWrapper)",
            "access$1300(com.android.server.trust.TrustAgentWrapper)",
            "mName",
            "mAlarmIntent",
            "onUnlockAttempt(boolean)",
            "mBroadcastReceiver",
            "mConnection",
            "MSG_TRUST_TIMEOUT",
            "access$1800(com.android.server.trust.TrustAgentWrapper)",
            "destroy()",
            "access$502(com.android.server.trust.TrustAgentWrapper, android.app.PendingIntent)",
            "mTrustAgentService",
            "access$100(com.android.server.trust.TrustAgentWrapper)",
            "mBound",
            "setCallback(android.service.trust.ITrustAgentServiceCallback)",
            "access$800(com.android.server.trust.TrustAgentWrapper)",
            "MSG_RESTART_TIMEOUT",
            "RESTART_TIMEOUT_MILLIS",
            "mTrustManagerService",
            "onError(java.lang.Exception)",
            "TRUST_EXPIRED_ACTION",
            "onTrustTimeout()",
            "access$1100(com.android.server.trust.TrustAgentWrapper)",
            "mCallback",
            "access$600(com.android.server.trust.TrustAgentWrapper)",
            "isTrusted()",
            "MSG_GRANT_TRUST",
            "mUserId",
            "access$202(com.android.server.trust.TrustAgentWrapper, boolean)",
            "access$1302(com.android.server.trust.TrustAgentWrapper, boolean)",
            "TAG",
            "access$1400(com.android.server.trust.TrustAgentWrapper)",
            "access$400(com.android.server.trust.TrustAgentWrapper)",
            "mMessage",
            "mSetTrustAgentFeaturesToken",
            "MSG_MANAGING_TRUST",
            "access$1200(com.android.server.trust.TrustAgentWrapper)",
            "MSG_REVOKE_TRUST",
            "access$1700(com.android.server.trust.TrustAgentWrapper, android.service.trust.ITrustAgentServiceCallback)",
            "scheduleRestart()",
            "mScheduledRestartUptimeMillis",
            "access$1202(com.android.server.trust.TrustAgentWrapper, android.os.IBinder)",
            "updateDevicePolicyFeatures()",
            "TrustAgentWrapper(android.content.Context, com.android.server.trust.TrustManagerService, android.content.Intent, android.os.UserHandle)",
            "EXTRA_COMPONENT_NAME",
            "isManagingTrust()",
            "access$1502(com.android.server.trust.TrustAgentWrapper, android.service.trust.ITrustAgentService)",
            "mAlarmManager",
            "access$1402(com.android.server.trust.TrustAgentWrapper, boolean)",
            "access$1600(com.android.server.trust.TrustAgentWrapper)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustAgentWrapper",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "TrustManagerService$4(com.android.server.trust.TrustManagerService)",
            "onStrongAuthRequiredChanged(int)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onTrustManagedChanged(boolean, int)",
            "onTrustChanged(boolean, int, int)",
            "asBinder()"
          ],
          "added": [],
          "name": "android.app.trust.ITrustListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onSomePackagesChanged()",
            "onPackageDisappeared(java.lang.String, int)",
            "this$0",
            "onPackageChanged(java.lang.String, int, java.lang.String[])",
            "TrustManagerService$3(com.android.server.trust.TrustManagerService)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isTrustAllowedForUser(int)",
            "LockPatternUtils$StrongAuthTracker()",
            "getStrongAuthForUser(int)"
          ],
          "added": [],
          "name": "com.android.internal.widget.LockPatternUtils$StrongAuthTracker",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "agent",
            "TrustManagerService$AgentInfo()",
            "icon",
            "settings",
            "equals(java.lang.Object)",
            "userId",
            "component",
            "label",
            "TrustManagerService$AgentInfo(com.android.server.trust.TrustManagerService$1)",
            "hashCode()"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$AgentInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "this$0",
            "TrustManagerService$2(com.android.server.trust.TrustManagerService)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "this$0",
            "TrustManagerService$Receiver(com.android.server.trust.TrustManagerService)",
            "onReceive(android.content.Context, android.content.Intent)",
            "getSendingUserId()",
            "register(android.content.Context)",
            "TrustManagerService$Receiver(com.android.server.trust.TrustManagerService, com.android.server.trust.TrustManagerService$1)",
            "getUserId(android.content.Intent)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$Receiver",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$userInfos",
            "this$1",
            "TrustManagerService$1$1(com.android.server.trust.TrustManagerService$1, java.io.PrintWriter, java.util.List)",
            "val$fout",
            "run()"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "access$1200(com.android.server.trust.TrustManagerService)",
            "access$1700(com.android.server.trust.TrustManagerService, java.lang.String)",
            "onSwitchUser(int)",
            "access$2100(com.android.server.trust.TrustManagerService)",
            "MSG_SWITCH_USER",
            "mArchive",
            "addListener(android.app.trust.ITrustListener)",
            "isSafeMode()",
            "removeAgentsOfPackage(java.lang.String)",
            "access$300(com.android.server.trust.TrustManagerService, int)",
            "dispatchUnlockAttempt(boolean, int)",
            "DEBUG",
            "MSG_START_USER",
            "access$1100(com.android.server.trust.TrustManagerService)",
            "access$2000(com.android.server.trust.TrustManagerService)",
            "isDeviceLockedInner(int)",
            "dispatchOnTrustManagedChanged(boolean, int)",
            "MSG_UNREGISTER_LISTENER",
            "refreshDeviceLockedForUser(int)",
            "resolveAllowedTrustAgents(android.content.pm.PackageManager, int)",
            "static {}",
            "access$1400(com.android.server.trust.TrustManagerService, android.app.trust.ITrustListener)",
            "access$200(com.android.server.trust.TrustManagerService)",
            "mReceiver",
            "access$1000(com.android.server.trust.TrustManagerService, int)",
            "mTrustListeners",
            "dispatchDeviceLocked(int, boolean)",
            "mTrustAgentsCanRun",
            "TRUST_AGENT_INTENT",
            "TrustManagerService(android.content.Context)",
            "access$1900(com.android.server.trust.TrustManagerService, com.android.internal.widget.LockPatternUtils, int)",
            "updateTrust(int, int)",
            "mDeviceLockedForUser",
            "mLockPatternUtils",
            "maybeEnableFactoryTrustAgents(com.android.internal.widget.LockPatternUtils, int)",
            "refreshAgentList(int)",
            "removeListener(android.app.trust.ITrustListener)",
            "access$400(com.android.server.trust.TrustManagerService)",
            "dispatchOnTrustChanged(boolean, int, int)",
            "onBootPhase(int)",
            "updateTrustAll()",
            "MSG_REGISTER_LISTENER",
            "MSG_CLEANUP_USER",
            "access$700(com.android.server.trust.TrustManagerService)",
            "access$600(com.android.server.trust.TrustManagerService)",
            "mPackageMonitor",
            "getComponentName(android.content.pm.ResolveInfo)",
            "aggregateIsTrusted(int)",
            "access$500(com.android.server.trust.TrustManagerService)",
            "aggregateIsTrustManaged(int)",
            "mHandler",
            "access$1500(com.android.server.trust.TrustManagerService, boolean, int)",
            "access$1800(com.android.server.trust.TrustManagerService)",
            "onStart()",
            "mStrongAuthTracker",
            "onCleanupUser(int)",
            "mUserIsTrusted",
            "MSG_DISPATCH_UNLOCK_ATTEMPT",
            "mActivityManager",
            "mActiveAgents",
            "TAG",
            "access$1300(com.android.server.trust.TrustManagerService, android.app.trust.ITrustListener)",
            "resetAgent(android.content.ComponentName, int)",
            "mContext",
            "mCurrentUser",
            "resolveProfileParent(int)",
            "mService",
            "publishBinderService(java.lang.String, android.os.IBinder)",
            "mUserManager",
            "onStartUser(int)",
            "MSG_ENABLED_AGENTS_CHANGED",
            "PERMISSION_PROVIDE_AGENT",
            "access$1600(com.android.server.trust.TrustManagerService, int)",
            "access$702(com.android.server.trust.TrustManagerService, int)",
            "updateDevicePolicyFeatures()",
            "MSG_KEYGUARD_SHOWING_CHANGED",
            "access$900(com.android.server.trust.TrustManagerService, int)",
            "getSettingsComponentName(android.content.pm.PackageManager, android.content.pm.ResolveInfo)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "reportEnabledTrustAgentsChanged(int)",
            "dumpHex(int)",
            "dumpUser(java.io.PrintWriter, android.content.pm.UserInfo, boolean)",
            "dumpBool(boolean)",
            "reportUnlockAttempt(boolean, int)",
            "reportKeyguardShowingChanged()",
            "dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
            "TrustManagerService$1(com.android.server.trust.TrustManagerService)",
            "access$800(com.android.server.trust.TrustManagerService$1, java.io.PrintWriter, android.content.pm.UserInfo, boolean)",
            "enforceListenerPermission()",
            "isDeviceLocked(int)",
            "getCallingUid()",
            "getCallingPid()",
            "isDeviceSecure(int)",
            "this$0",
            "enforceReportPermission()",
            "registerTrustListener(android.app.trust.ITrustListener)",
            "unregisterTrustListener(android.app.trust.ITrustListener)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustManagerService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "put(int, boolean)",
            "setValueAt(int, boolean)",
            "size()",
            "removeAt(int)",
            "SparseBooleanArray(int)",
            "get(int, boolean)",
            "keyAt(int)",
            "get(int)",
            "SparseBooleanArray()",
            "toString()",
            "indexOfKey(int)",
            "valueAt(int)",
            "clear()",
            "delete(int)"
          ],
          "added": [],
          "name": "android.util.SparseBooleanArray",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "flags",
            "lastLoggedInTime",
            "hasCCMBeenProvisioned",
            "serialNumber",
            "iconPath",
            "isEnabled()",
            "supportsSwitchTo()",
            "getUserHandle()",
            "guestToRemove",
            "partial",
            "id",
            "isKnoxWorkspace()",
            "isRestricted()",
            "isBMode()",
            "name",
            "isManagedProfile()",
            "profileGroupId",
            "UserInfo(int, java.lang.String, java.lang.String, int)",
            "isGuest()",
            "creationTime",
            "isAdmin()",
            "isPrimary()"
          ],
          "added": [],
          "name": "android.content.pm.UserInfo",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [],
          "added": [],
          "name": "android.util.AttributeSet",
          "change_type": 0
        },
        {
          "size": 1,
          "removed": [
            "printStackTrace()"
          ],
          "added": [],
          "name": "android.os.DeadObjectException",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asInterface(android.os.IBinder)",
            "ITrustManager$Stub()"
          ],
          "added": [],
          "name": "android.app.trust.ITrustManager$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onServiceDisconnected(android.content.ComponentName)",
            "onServiceConnected(android.content.ComponentName, android.os.IBinder)",
            "TrustAgentWrapper$4(com.android.server.trust.TrustAgentWrapper)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustAgentWrapper$4",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "android.service.trust.ITrustAgentService$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "ITrustAgentServiceCallback$Stub()"
          ],
          "added": [],
          "name": "android.service.trust.ITrustAgentServiceCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TrustAgentWrapper$3(com.android.server.trust.TrustAgentWrapper)",
            "this$0",
            "revokeTrust()",
            "setManagingTrust(boolean)",
            "grantTrust(java.lang.CharSequence, long, int)",
            "onConfigureCompleted(boolean, android.os.IBinder)"
          ],
          "added": [],
          "name": "com.android.server.trust.TrustAgentWrapper$3",
          "change_type": 2
        }
      ],
      "name": "com.android.server.trust"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "newArray(int)",
            "CertKeyPair$1()",
            "createFromParcel(android.os.Parcel)"
          ],
          "added": [],
          "name": "com.ipsec.client.CertKeyPair$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "CREATOR",
            "mKey",
            "getPrivateKey()",
            "readFromParcel(android.os.Parcel)",
            "CertKeyPair(java.security.cert.Certificate)",
            "writeToParcel(android.os.Parcel, int)",
            "CertKeyPair(android.os.Parcel)",
            "mCertificate",
            "setPrivateKey(java.security.Key)",
            "describeContents()",
            "static {}",
            "CertKeyPair()",
            "setCertificate(java.security.cert.Certificate)",
            "getCertificate()"
          ],
          "added": [],
          "name": "com.ipsec.client.CertKeyPair",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "TAG",
            "newServiceIntent()",
            "REMOTE_SERVICE_CLS_NAME",
            "getServiceIntent(android.content.Context)",
            "REMOTE_SERVICE_PKG_NAME",
            "getInterface(android.os.IBinder)",
            "connectService(android.content.Context, android.content.ServiceConnection)",
            "COMPONENT",
            "IPsecServiceInterface()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecServiceInterface",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "addDialogAttribute(java.lang.String, java.lang.String)",
            "getSignatureScheme()",
            "mDialogMessage",
            "mOperationId",
            "getDataType()",
            "setSignatureScheme(java.lang.String)",
            "mSignatureInput",
            "getHashAlgorithm()",
            "toString()",
            "clearDialogAttributes()",
            "getOperationId()",
            "setDialogMessage(java.lang.String)",
            "setSignature(byte[])",
            "IPSEC_RELAY_SIGNATURE_DATA",
            "getSignatureInput()",
            "IPsecRelayData()",
            "getSignature()",
            "mDialogAttributes",
            "mSignatureScheme",
            "setOperationId(int)",
            "setSignatureData(byte[])",
            "getDialogMessage()",
            "setSignatureInput(byte[])",
            "mSignature",
            "IPSEC_RELAY_DIALOG",
            "getDialogAttributes()",
            "getSignatureData()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecRelayData",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPsecClient$IPsecServiceConnection(com.ipsec.client.IPsecClient)",
            "IPsecClient$IPsecServiceConnection(com.ipsec.client.IPsecClient, com.ipsec.client.IPsecClient$1)",
            "this$0",
            "onServiceConnected(android.content.ComponentName, android.os.IBinder)",
            "TAG",
            "onServiceDisconnected(android.content.ComponentName)",
            "COMPONENT"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$IPsecServiceConnection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$event",
            "val$eventListener",
            "this$1",
            "IPsecClient$1$1(com.ipsec.client.IPsecClient$1, com.ipsec.client.IIPsecListener, com.ipsec.client.IPsecEvent, com.ipsec.client.IPsecEventData)",
            "val$eventData",
            "run()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$1$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "run()",
            "this$1",
            "val$eventData",
            "val$eventListener",
            "val$eventError",
            "IPsecClient$1$2(com.ipsec.client.IPsecClient$1, com.ipsec.client.IIPsecListener, com.ipsec.client.IPsecError, com.ipsec.client.IPsecEventData)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$1$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "valueChanged(android.os.Bundle)",
            "IPsecClient$1(com.ipsec.client.IPsecClient)",
            "this$0"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "$SwitchMap$com$ipsec$client$IPsecEvent",
            "static {}"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$3",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "MAX_SIZE",
            "connect(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecEventData)",
            "isConnected(com.ipsec.client.IPsecConnection)",
            "COMPONENT",
            "disconnect(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecEventData)",
            "getServiceConnection()",
            "isServiceStarted()",
            "mServiceReadLock",
            "mServiceWriteLock",
            "encodeRelayData(android.os.Bundle, com.ipsec.client.IPsecRelayData)",
            "mActiveConnections",
            "IPsecClient(android.content.Context)",
            "disconnect(com.ipsec.client.IPsecConnection)",
            "encodeConnectBundle(com.ipsec.client.IPsecConnection, java.lang.StringBuilder)",
            "getLogReader()",
            "setServiceListener(com.ipsec.client.IIPsecListener)",
            "setQueryData(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecRelayData)",
            "access$600(com.ipsec.client.IPsecClient)",
            "mContext",
            "checkSize(int)",
            "sendKeepalive(com.ipsec.client.IPsecConnection)",
            "access$000(com.ipsec.client.IPsecClient)",
            "startService()",
            "access$300(com.ipsec.client.IPsecClient)",
            "mIPsecService",
            "TAG",
            "continueConnect(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecEventData, com.ipsec.client.IPsecRelayData)",
            "access$500(com.ipsec.client.IPsecClient)",
            "mIPsecServiceConnection",
            "getInstance(android.content.Context)",
            "mServiceReadWriteLock",
            "decodeRelayDataBundle(android.os.Bundle, com.ipsec.client.IPsecRelayData)",
            "static {}",
            "mListener",
            "decodeConnectionStateBundle(android.os.Bundle, com.ipsec.client.IPsecConnectionState)",
            "parseIPsecErrorString(java.lang.String, com.ipsec.client.IPsecError)",
            "connect(com.ipsec.client.IPsecConnection)",
            "doStopService()",
            "mInstance",
            "checkConnection(com.ipsec.client.IPsecConnection, int)",
            "access$100(com.ipsec.client.IPsecClient)",
            "access$400(com.ipsec.client.IPsecClient)",
            "access$402(com.ipsec.client.IPsecClient, com.ipsec.client.IIPsecService)",
            "clearLog()",
            "getServiceIntent()",
            "mConnectionLock",
            "mCallback",
            "getIPsecConnectionState(com.ipsec.client.IPsecConnection)",
            "queryData(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecRelayData)",
            "stopService()",
            "sendLocalConnectionEvent(com.ipsec.client.IPsecConnection, com.ipsec.client.IPsecEvent, java.lang.String, int)",
            "access$702(com.ipsec.client.IPsecClient, com.ipsec.client.IPsecClient$IPsecServiceConnection)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "val$event",
            "this$0",
            "run()",
            "IPsecClient$2(com.ipsec.client.IPsecClient, com.ipsec.client.IIPsecListener, com.ipsec.client.IPsecEvent, com.ipsec.client.IPsecEventData)",
            "val$eventListener",
            "val$eventData"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecClient$2",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "toString()",
            "IPsecRelayData$AuthenticationDialogAttribute(java.lang.String, java.lang.String)",
            "setAttributeValue(java.lang.String)",
            "IPsecRelayData$AuthenticationDialogAttribute(java.lang.String)",
            "attributeName",
            "getAttributeValue()",
            "attributeValue",
            "getAttributeName()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecRelayData$AuthenticationDialogAttribute",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPsecLogReader(java.io.Reader)",
            "IPsecLogReader(java.io.Reader, int)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecLogReader",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPsecServiceCallbackBinder()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecServiceCallbackBinder",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "i(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])",
            "d(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])",
            "w(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])",
            "Log()",
            "e(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])"
          ],
          "added": [],
          "name": "com.ipsec.Log",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "onUpdate(com.ipsec.client.IPsecEvent, com.ipsec.client.IPsecEventData)",
            "onServiceStatusChanged(com.ipsec.client.IPsecError, com.ipsec.client.IPsecEventData)"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecListener",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPSEC_SECURITY_MODULE_NOT_AVAILABLE",
            "IPSEC_ALREADY_CONNECTED",
            "IPSEC_RECEIVED_EVENT",
            "IPSEC_INVALID_IKE_DH_GROUP",
            "IPSEC_DAEMON_NOT_CONNECTED",
            "IPSEC_INVALID_CERTIFICATE",
            "IPSEC_INVALID_CA_CERTIFICATE",
            "IPSEC_FAILED",
            "values()",
            "IPSEC_INVALID_HOST_AUTHENTICATION",
            "IPSEC_INVALID_DPD_TIMEOUT",
            "IPSEC_INVALID_RAC_ATTRIBUTE",
            "IPSEC_INVALID_IPSEC_ALGORITHM_COMBINATION",
            "valueOf(java.lang.String)",
            "IPSEC_INVALID_IKE_ENCRYPTION",
            "IPSEC_INVALID_EAP_REAUTH_DATA",
            "IPSEC_CERTIFICATE_VALIDATION_FAILED",
            "IPSEC_INVALID_IM_CERTIFICATE",
            "IPSEC_INVALID_IPSEC_LIFETIME",
            "IPSEC_REMOTE_SERVICE_NOT_CONNECTED",
            "name()",
            "IPSEC_REMOTE_ERROR",
            "IPsecError(java.lang.String, int)",
            "IPSEC_INVALID_EAP_METHOD",
            "IPSEC_CONNECTION_LOST",
            "IPSEC_INVALID_GW_ADDRESS",
            "IPSEC_INVALID_VIRTUAL_ADAPTER_CONFIGURATION",
            "IPSEC_INVALID_IPSEC_ENCRYPTION",
            "IPSEC_OPERATION_FAILED",
            "IPSEC_OK",
            "IPSEC_INVALID_PARAMETER",
            "IPSEC_INVALID_INTERNAL_SUBNET",
            "IPSEC_INVALID_IKE_LIFETIME",
            "IPSEC_INVALID_PRIVATE_KEY",
            "IPSEC_INVALID_IKE_INTEGRITY",
            "IPSEC_IKE_NEGOTIATION_FAILED",
            "ordinal()",
            "IPSEC_SYSTEM_VPN_ALREADY_EXISTS",
            "IPSEC_INVALID_USERNAME",
            "static {}",
            "IPSEC_CONNECTION_LOST_DPD_TIMEOUT",
            "IPSEC_INVALID_VIRTUAL_ADAPTER_NAME",
            "IPSEC_CANNOT_CONFIGURE_GLOBAL_DNS",
            "IPSEC_INVALID_IPSEC_BOUNDARY",
            "IPSEC_INVALID_PRESHARED_KEY",
            "toString()",
            "$VALUES",
            "IPSEC_INVALID_INTERFACE",
            "IPSEC_INVALID_TUNNEL_MODE",
            "IPSEC_TIMEOUT",
            "IPSEC_INVALID_IKE_VERSION",
            "IPSEC_UNKNOWN_ERROR",
            "IPSEC_INVALID_PFS_DH_GROUP",
            "IPSEC_MESSAGE_DECODE_FAILED",
            "IPSEC_INVALID_REMOTE_IDENTITY",
            "IPSEC_NOT_CONNECTED",
            "IPSEC_INVALID_PASSWORD",
            "IPSEC_INVALID_IPSEC_INTEGRITY",
            "IPSEC_INVALID_NATT_KEEPALIVE_TIMEOUT",
            "IPSEC_INVALID_OWN_IDENTITY",
            "IPSEC_REMOTE_SERVICE_CANNOT_CONNECT",
            "IPSEC_INVALID_IKE_WINDOW_SIZE"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecError",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getError()",
            "mEvent",
            "getIPsecError()",
            "setConnection(com.ipsec.client.IPsecConnection)",
            "getEvent()",
            "setError(java.lang.String)",
            "IPsecEventData()",
            "setIkeErrorValue(int)",
            "getIkeErrorValue()",
            "mError",
            "getConnection()",
            "toString()",
            "mIkeErrorValue",
            "mConnection"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecEventData",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPSEC_EVENT_QUERY_DATA",
            "IPSEC_EVENT_CONNECTION_RESET",
            "IPSEC_EVENT_NONE",
            "IPSEC_EVENT_ERROR",
            "IPSEC_EVENT_CONNECTED",
            "IPSEC_EVENT_CREATING_CONNECTION",
            "IPSEC_EVENT_READY",
            "IPSEC_EVENT_DISCONNECTING",
            "valueOf(java.lang.String)",
            "IPSEC_EVENT_CANCELLING_CONNECTION",
            "$VALUES",
            "IPSEC_EVENT_MISSING_DATA",
            "ordinal()",
            "IPSEC_EVENT_NOT_OWNER",
            "IPsecEvent(java.lang.String, int)",
            "IPSEC_EVENT_PREPARING",
            "IPSEC_EVENT_DISCONNECTED",
            "static {}",
            "values()",
            "IPSEC_EVENT_PEER_DISCONNECTED",
            "IPSEC_EVENT_UNKNOWN",
            "IPSEC_EVENT_NOT_READY",
            "IPSEC_EVENT_CONNECTION_SETUP_FAILURE",
            "IPSEC_EVENT_CONNECTION_ACTIVE"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecEvent",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "checkConnection(android.os.Bundle)",
            "unregisterCallback(com.ipsec.client.IIPsecServiceCallback)",
            "connect(android.os.Bundle)",
            "getLog(android.os.Bundle)",
            "setQueryData(android.os.Bundle)",
            "startService(android.os.Bundle)",
            "clearLog(android.os.Bundle)",
            "registerCallback(com.ipsec.client.IIPsecServiceCallback)",
            "disconnect(android.os.Bundle)",
            "stopService(android.os.Bundle)",
            "connectionQuery(android.os.Bundle)",
            "connectionState(android.os.Bundle)",
            "isConnected(android.os.Bundle)",
            "sendKeepalive(android.os.Bundle)"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asBinder()",
            "getLog(android.os.Bundle)",
            "TRANSACTION_isConnected",
            "TRANSACTION_registerCallback",
            "disconnect(android.os.Bundle)",
            "registerCallback(com.ipsec.client.IIPsecServiceCallback)",
            "TRANSACTION_startService",
            "TRANSACTION_sendKeepalive",
            "TRANSACTION_connectionQuery",
            "TRANSACTION_setQueryData",
            "TRANSACTION_disconnect",
            "asInterface(android.os.IBinder)",
            "clearLog(android.os.Bundle)",
            "TRANSACTION_stopService",
            "stopService(android.os.Bundle)",
            "attachInterface(android.os.IInterface, java.lang.String)",
            "isConnected(android.os.Bundle)",
            "IIPsecService$Stub()",
            "connectionQuery(android.os.Bundle)",
            "connectionState(android.os.Bundle)",
            "sendKeepalive(android.os.Bundle)",
            "connect(android.os.Bundle)",
            "TRANSACTION_clearLog",
            "startService(android.os.Bundle)",
            "checkConnection(android.os.Bundle)",
            "TRANSACTION_connect",
            "TRANSACTION_checkConnection",
            "TRANSACTION_connectionState",
            "TRANSACTION_getLog",
            "DESCRIPTOR",
            "setQueryData(android.os.Bundle)",
            "onTransact(int, android.os.Parcel, android.os.Parcel, int)",
            "TRANSACTION_unregisterCallback",
            "unregisterCallback(com.ipsec.client.IIPsecServiceCallback)"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecService$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "stopService(android.os.Bundle)",
            "getInterfaceDescriptor()",
            "asBinder()",
            "mRemote",
            "unregisterCallback(com.ipsec.client.IIPsecServiceCallback)",
            "getLog(android.os.Bundle)",
            "sendKeepalive(android.os.Bundle)",
            "disconnect(android.os.Bundle)",
            "checkConnection(android.os.Bundle)",
            "connect(android.os.Bundle)",
            "registerCallback(com.ipsec.client.IIPsecServiceCallback)",
            "IIPsecService$Stub$Proxy(android.os.IBinder)",
            "connectionState(android.os.Bundle)",
            "connectionQuery(android.os.Bundle)",
            "setQueryData(android.os.Bundle)",
            "clearLog(android.os.Bundle)",
            "isConnected(android.os.Bundle)",
            "startService(android.os.Bundle)"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecService$Stub$Proxy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "valueChanged(android.os.Bundle)",
            "asBinder()"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecServiceCallback",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "valueChanged(android.os.Bundle)",
            "onTransact(int, android.os.Parcel, android.os.Parcel, int)",
            "IIPsecServiceCallback$Stub()",
            "attachInterface(android.os.IInterface, java.lang.String)",
            "TRANSACTION_valueChanged",
            "DESCRIPTOR",
            "asBinder()",
            "asInterface(android.os.IBinder)"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecServiceCallback$Stub",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "asBinder()",
            "IIPsecServiceCallback$Stub$Proxy(android.os.IBinder)",
            "mRemote",
            "valueChanged(android.os.Bundle)",
            "getInterfaceDescriptor()"
          ],
          "added": [],
          "name": "com.ipsec.client.IIPsecServiceCallback$Stub$Proxy",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setPrivateKey(java.security.PrivateKey)",
            "getAllCaCertificateDatas()",
            "getVirtualAdapterConfiguration()",
            "version",
            "getSecondUsername()",
            "setEapReAuthData(byte[])",
            "secondOwnIdentityType",
            "tunnelMode",
            "getEapMethod()",
            "isAggressiveMode()",
            "ownIdentityType",
            "certificate",
            "getConnectTimeout()",
            "dpdTimeout",
            "isMobike()",
            "getEapReAuthData()",
            "certificateData",
            "getOwnIdentityType()",
            "getDpdTimeout()",
            "getOwnIdentity()",
            "addInternalSubnet(java.lang.String)",
            "secondOwnIdentity",
            "setRequestedRacIPv6Address(java.lang.String)",
            "NIST_SP_800_131A_ACCEPTABLE_ALGORITHMS",
            "getInterfaces()",
            "setSecondEapMethod(com.ipsec.client.IPsecConnection$EapMethod)",
            "eapMethod",
            "getPrivateKey()",
            "getSecondOwnIdentity()",
            "setSecondPassword(java.lang.String)",
            "ikeWindowSize",
            "privateKey",
            "setCaCertificate(java.security.cert.X509Certificate)",
            "remoteIdentity",
            "setPrivateKey(byte[])",
            "setCertificate(java.security.cert.X509Certificate)",
            "getRemoteIdentityEnforce()",
            "ikeGroup",
            "addInterface(com.ipsec.client.IPsecNetworkInterface)",
            "getPrivateKeyData()",
            "username",
            "secondEapMethod",
            "setSplitTunnelingDisabled(boolean)",
            "setHybridMode(boolean)",
            "getPreSharedKey()",
            "getConnectionId()",
            "IKEV2_FRAGMENTATION_LIMIT",
            "setIPsecIntegrity(com.ipsec.client.IPsecConnection$IPsecIntegrity)",
            "caCertificateData",
            "setPerfectForwardSecrecy(boolean)",
            "clearEapMethods()",
            "getAllIPsecEncryptions()",
            "setUserAuthentication(boolean)",
            "getSecondOwnIdentityType()",
            "clearIkeEncryption()",
            "pmtuLimit",
            "IPsecConnection()",
            "setGateway(java.lang.String)",
            "aggressiveMode",
            "clearIPsecGroup()",
            "setPrivateKeyAlgorithm(java.lang.String)",
            "getAllImCertificateDatas()",
            "getVirtualAdapterName()",
            "clearIkeIntegrity()",
            "preSharedKey",
            "requestedRACIPv4",
            "requestIkeCfgAttrs",
            "setIkeVersion(com.ipsec.client.IPsecConnection$IkeVersion)",
            "setTunnelMode(com.ipsec.client.IPsecConnection$TunnelMode)",
            "requestedRACIPv6",
            "clearInterfaces()",
            "nattKeepaliveTimeout",
            "setGroup(com.ipsec.client.IPsecConnection$IkeGroup)",
            "getPassword()",
            "clearIPsecIntegrity()",
            "setRequestedRacIPv4Address(java.lang.String)",
            "setSubnetType(com.ipsec.client.IPsecConnection$IPVersion)",
            "gateway",
            "ikev2FragmentationLimit",
            "setIkev2FragmentationDisabled(boolean)",
            "getSecondPassword()",
            "ikeIntegrity",
            "secondUsername",
            "disableIkev2Fragmentation",
            "getRequestedRacIPv6Address()",
            "hybridModeConnection",
            "setIkeLife(int)",
            "setIkeEncryption(com.ipsec.client.IPsecConnection$IkeEncryption)",
            "setPreSharedKey(java.lang.String)",
            "addIPsecIntegrity(com.ipsec.client.IPsecConnection$IPsecIntegrity)",
            "setDpdTimeout(int)",
            "imCertificate",
            "imCertificateData",
            "setRemoteIdentity(com.ipsec.client.IPsecConnection$IdentityType, java.lang.String)",
            "getIPsecGroup()",
            "addCaCertificate(java.security.cert.X509Certificate)",
            "setIPsecGroup(com.ipsec.client.IPsecConnection$IPsecGroup)",
            "setIPsecEncryption(com.ipsec.client.IPsecConnection$IPsecEncryption)",
            "addIkeEncryption(com.ipsec.client.IPsecConnection$IkeEncryption)",
            "setPMTULimit(int)",
            "userAuthentication",
            "ipsecLifeValue",
            "getGlobalDnsConfiguration()",
            "name",
            "getGateway()",
            "setSecondUsername(java.lang.String)",
            "addGroup(com.ipsec.client.IPsecConnection$IkeGroup)",
            "getSubnetType()",
            "setIkeIntegrity(com.ipsec.client.IPsecConnection$IkeIntegrity)",
            "getAllRequestIkeCfgAttributes()",
            "clearImCertificates()",
            "ipsecEncryption",
            "isSplitTunnelingDisabled()",
            "remoteIdentityEnforce",
            "setCertCheckRevocation(boolean)",
            "clearCaCertificates()",
            "setGlobalDnsConfiguration(boolean)",
            "IPSEC_CONNECTION_VERSION",
            "setAlgorithmSecurityStrength(int)",
            "internalSubnet",
            "setIPsecLife(com.ipsec.client.IPsecConnection$IPsecLifeType, int)",
            "getIkeWindowSize()",
            "PMTU_MIN",
            "clearRequestIkeCfgAttributes()",
            "setIkeWindowSize(int)",
            "setVirtualAdapterName(java.lang.String)",
            "privateKeyData",
            "setEapMethod(com.ipsec.client.IPsecConnection$EapMethod)",
            "setConnectTimeout(int)",
            "setEapReAuthPassword(java.lang.String)",
            "password",
            "eapReAuthPassword",
            "setConnectionId(int)",
            "addIPsecEncryption(com.ipsec.client.IPsecConnection$IPsecEncryption)",
            "getAllImCertificates()",
            "addIkeIntegrity(com.ipsec.client.IPsecConnection$IkeIntegrity)",
            "setPrivateKeyLength(int)",
            "disableSplitTunneling",
            "setAggressiveMode(boolean)",
            "setUsername(java.lang.String)",
            "setHostAuthentication(com.ipsec.client.IPsecConnection$HostAuthentication)",
            "secondPassword",
            "setOwnIdentity(com.ipsec.client.IPsecConnection$IdentityType, java.lang.String)",
            "setIPsecAntiReplay(boolean)",
            "getUsername()",
            "privateKeyFormat",
            "getAlgorithmSecurityStrength()",
            "ownIdentity",
            "mobike",
            "DEFAULT_UPDATE_TIMEOUT",
            "networkInterface",
            "remoteIdentityType",
            "getIkeEncryption()",
            "caCertificate",
            "setIkev2FragmentationLimit(int)",
            "getIPsecEncryption()",
            "addEapMethod(com.ipsec.client.IPsecConnection$EapMethod)",
            "getRequestedRacIPv4Address()",
            "isIPsecAntiReplay()",
            "isPerfectForwardSecrecy()",
            "getAllIPsecIntegritys()",
            "toString()",
            "getTunnelMode()",
            "getIkev2FragmentationLimit()",
            "getEapReAuthPassword()",
            "getPrivateKeyFormat()",
            "ikeEncryption",
            "getHostAuthentication()",
            "getCertCheckRevocation()",
            "getNattKeepaliveTimeout()",
            "ikeLife",
            "getAllCaCertificates()",
            "isUserAuthentication()",
            "getName()",
            "getAllIPsecIntegrities()",
            "ipsecIntegrity",
            "virtualAdapterConfiguration",
            "clearGroup()",
            "getRemoteIdentity()",
            "setVirtualAdapterConfiguration(com.ipsec.client.IPsecConnection$VirtualAdapterConfigurationMethod)",
            "getIkeLife()",
            "clearIPsecEncryption()",
            "isIkev2FragmentationDisabled()",
            "getIkeIntegrity()",
            "getAllIPsecGroups()",
            "subnetType",
            "clearInternalSubnets()",
            "ipsecLifeType",
            "setRemoteIdentity(com.ipsec.client.IPsecConnection$IdentityType, java.lang.String, boolean)",
            "setNattKeepaliveTimeout(int)",
            "getIPsecLifeType()",
            "ikeVersion",
            "setMobike(boolean)",
            "eapReAuthData",
            "getAllIkeIntegrities()",
            "virtualAdapterName",
            "isHybridMode()",
            "getGroup()",
            "getAllIkeEncryptions()",
            "getIPsecIntegrity()",
            "getCaCertificate()",
            "globalDnsConfiguration",
            "hostAuthentication",
            "setSecondOwnIdentity(com.ipsec.client.IPsecConnection$IdentityType, java.lang.String)",
            "getCertificate()",
            "certCheckRevocation",
            "connectionId",
            "getSecondEapMethod()",
            "ipsecGroup",
            "addRequestIkeCfgAttribute(com.ipsec.client.IPsecIkeCfgAttribute)",
            "getIPsecLifeValue()",
            "getCertificateData()",
            "getAllGroups()",
            "addIPsecGroup(com.ipsec.client.IPsecConnection$IPsecGroup)",
            "connectTimeout",
            "getRemoteIdentityType()",
            "setPassword(java.lang.String)",
            "algorithmSecurityStrength",
            "setName(java.lang.String)",
            "getIkeVersion()",
            "getEapMethods()",
            "getAllIkeIntegritys()",
            "addImCertificate(java.security.cert.X509Certificate)",
            "getInternalSubnets()",
            "getPMTULimit()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "setOwnIdentity(java.lang.String)",
            "getSecondOwnIdentityType()",
            "mOwnIdentity",
            "mOwnIdentityType",
            "IPsecConnectionState(com.ipsec.client.IPsecConnection)",
            "mIP6RACSubnets",
            "addIkeConfigurationVendorAttribute(int, byte[])",
            "toString()",
            "getEapReAuthData()",
            "setRemoteIdentityType(com.ipsec.client.IPsecConnection$IdentityType)",
            "getRemoteAccessDnsAddress(com.ipsec.client.IPsecConnection$IPVersion)",
            "mSecondOwnIdentity",
            "getRemoteIdentityType()",
            "setSecondOwnIdentity(java.lang.String)",
            "getLocalIP()",
            "mRemoteIdentity",
            "setVirtualAdapterName(java.lang.String)",
            "addRemoteAccessDnsAddress(com.ipsec.client.IPsecConnection$IPVersion, java.lang.String)",
            "setVirtualAdapterMTU(int)",
            "getVirtualAdapterName()",
            "mRemoteIdentityType",
            "getOwnIdentity()",
            "mEapReAuthData",
            "setRemoteIdentity(java.lang.String)",
            "getRemoteAccessClientAddress(com.ipsec.client.IPsecConnection$IPVersion)",
            "mVirtualAdapterName",
            "setLocalIP(java.lang.String)",
            "addRemoteAccessClientAddress(com.ipsec.client.IPsecConnection$IPVersion, java.lang.String)",
            "getRemoteAccessSubnets(com.ipsec.client.IPsecConnection$IPVersion)",
            "mGatewayIP",
            "getSecondOwnIdentity()",
            "mVirtualAdapterConf",
            "setOwnIdentityType(com.ipsec.client.IPsecConnection$IdentityType)",
            "setSecondOwnIdentityType(com.ipsec.client.IPsecConnection$IdentityType)",
            "getIkeCfgAttributes(int)",
            "addRemoteAccessSubnet(com.ipsec.client.IPsecConnection$IPVersion, java.lang.String)",
            "mIP4RACDNS",
            "mIP4RACSubnets",
            "mLocalIP",
            "getGatewayIP()",
            "setEapReAuthData(byte[])",
            "mIkeCfgAttrs",
            "mIP6RACDNS",
            "mIP4RACAddresses",
            "getOwnIdentityType()",
            "mSecondOwnIdentityType",
            "mVirtualAdapterMtu",
            "mIP6RACAddresses",
            "getRemoteIdentity()",
            "getVirtualAdapterMTU()",
            "setGatewayIP(java.lang.String)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnectionState",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "$VALUES",
            "IPV6_ADDR",
            "name()",
            "KEY_ID",
            "valueOf(java.lang.String)",
            "values()",
            "DN",
            "FQDN",
            "static {}",
            "IPsecConnection$IdentityType(java.lang.String, int)",
            "ordinal()",
            "IPV4_ADDR",
            "USER_FQDN"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IdentityType",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "isAddressIPv4(java.lang.String)",
            "isNumber(java.lang.String)",
            "isEmailUsernameChar(int)",
            "splitDistinguishedName(java.lang.String)",
            "isValidFqdn(java.lang.String)",
            "isValidHostnamePart(java.lang.String)",
            "IPsecUtil()",
            "isAddressIPv6Subnet(java.lang.String)",
            "isAddressIPv4Subnet(java.lang.String)",
            "isValidUserFqdn(java.lang.String)",
            "isAddressIPv6(java.lang.String)",
            "isHostnameChar(int)",
            "isHexDigit(int)",
            "isNumber(java.lang.String, int, int)",
            "isValidDn(java.lang.String)",
            "isDigit(int)",
            "isValidIdentity(com.ipsec.client.IPsecConnection$IdentityType, java.lang.String)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecUtil",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "$VALUES",
            "IP_VERSION_4",
            "name()",
            "IP_VERSION_6",
            "ordinal()",
            "values()",
            "static {}",
            "IP_VERSION_UNSPECIFIED",
            "valueOf(java.lang.String)",
            "IPsecConnection$IPVersion(java.lang.String, int)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IPVersion",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "valueOf(java.lang.String)",
            "values()",
            "name()",
            "ordinal()",
            "EAP",
            "PRE_SHARED",
            "$VALUES",
            "PUBLIC_KEY",
            "IPsecConnection$HostAuthentication(java.lang.String, int)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$HostAuthentication",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getPrecedence()",
            "IPsecNetworkInterface(java.lang.String)",
            "interfaceName",
            "toString()",
            "getName()",
            "IPsecNetworkInterface(java.lang.String, int)",
            "precedence"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecNetworkInterface",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPsecConnection$EapMethod(java.lang.String, int, int)",
            "EAP_METHOD_SIM",
            "EAP_METHOD_AKA",
            "EAP_METHOD_GTC",
            "maskValue()",
            "maskValue",
            "valueOf(java.lang.String)",
            "$VALUES",
            "EAP_METHOD_MD5_CHALLENGE",
            "EAP_METHOD_MSCHAPV2",
            "static {}",
            "values()",
            "EAP_METHOD_NONE",
            "ordinal()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$EapMethod",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "values()",
            "ordinal()",
            "static {}",
            "$VALUES",
            "IPSEC_RAC",
            "IPsecConnection$TunnelMode(java.lang.String, int)",
            "name()",
            "valueOf(java.lang.String)",
            "L2TP_OVER_IPSEC"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$TunnelMode",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPSEC_GROUP_MODP_3072",
            "static {}",
            "IPsecConnection$IPsecGroup(java.lang.String, int)",
            "valueOf(java.lang.String)",
            "IPSEC_GROUP_MODP_6144",
            "IPSEC_GROUP_ANY",
            "IPSEC_GROUP_ECP_256",
            "ordinal()",
            "IPSEC_GROUP_BRAINPOOL_ECP_512",
            "IPSEC_GROUP_NONE",
            "IPSEC_GROUP_BRAINPOOL_ECP_256",
            "IPSEC_GROUP_MODP_2048",
            "IPSEC_GROUP_MODP_2048_256",
            "IPSEC_GROUP_MODP_1536",
            "IPSEC_GROUP_ANY_OR_NONE",
            "IPSEC_GROUP_MODP_4096",
            "IPSEC_GROUP_MODP_1024_160",
            "IPSEC_GROUP_MODP_8192",
            "IPSEC_GROUP_ECP_384",
            "IPSEC_GROUP_ECP_224",
            "IPSEC_GROUP_ECP_521",
            "IPSEC_GROUP_MODP_2048_224",
            "IPSEC_GROUP_ECP_192",
            "IPSEC_GROUP_MODP_1024",
            "IPSEC_GROUP_BRAINPOOL_ECP_224",
            "IPSEC_GROUP_MODP_768",
            "values()",
            "$VALUES",
            "IPSEC_GROUP_BRAINPOOL_ECP_384",
            "name()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IPsecGroup",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "values()",
            "IPSEC_LIFE_TYPE_KILOBYTES",
            "name()",
            "valueOf(java.lang.String)",
            "$VALUES",
            "IPSEC_LIFE_TYPE_SECONDS",
            "IPsecConnection$IPsecLifeType(java.lang.String, int)",
            "ordinal()"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IPsecLifeType",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "ordinal()",
            "IPSEC_ENCRYPTION_AES_CTR_256",
            "static {}",
            "IPSEC_ENCRYPTION_BASIC",
            "IPSEC_ENCRYPTION_AES_CBC_128",
            "$VALUES",
            "IPSEC_ENCRYPTION_AES_CTR_192",
            "IPSEC_ENCRYPTION_AES_GMAC_192",
            "valueOf(java.lang.String)",
            "IPSEC_ENCRYPTION_SUITE_B_GCM_128",
            "IPSEC_ENCRYPTION_AES_CCM_128",
            "IPSEC_ENCRYPTION_AES_GMAC_128",
            "name()",
            "IPSEC_ENCRYPTION_AES_GCM_256",
            "IPsecConnection$IPsecEncryption(java.lang.String, int)",
            "IPSEC_ENCRYPTION_ANY",
            "values()",
            "IPSEC_ENCRYPTION_AES_GCM_192",
            "IPSEC_ENCRYPTION_AES_CBC_256",
            "IPSEC_ENCRYPTION_AES_CCM_192",
            "IPSEC_ENCRYPTION_AES_GMAC_256",
            "IPSEC_ENCRYPTION_AES_CBC_192",
            "IPSEC_ENCRYPTION_AES_CCM_256",
            "IPSEC_ENCRYPTION_AES_CTR_128",
            "IPSEC_ENCRYPTION_AES_GCM_128",
            "IPSEC_ENCRYPTION_3DES_CBC",
            "IPSEC_ENCRYPTION_SUITE_B_GCM_256"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IPsecEncryption",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPSEC_INTEGRITY_HMAC_SHA_512_256",
            "IPSEC_INTEGRITY_HMAC_MD5_96",
            "IPSEC_INTEGRITY_SUITE_B_GCM_256",
            "IPSEC_INTEGRITY_HMAC_SHA1_96",
            "ordinal()",
            "$VALUES",
            "IPSEC_INTEGRITY_BASIC",
            "static {}",
            "name()",
            "valueOf(java.lang.String)",
            "IPSEC_INTEGRITY_AES_GMAC_192",
            "IPSEC_INTEGRITY_HMAC_SHA_384_192",
            "IPSEC_INTEGRITY_NULL",
            "values()",
            "IPSEC_INTEGRITY_ANY",
            "IPSEC_INTEGRITY_AES_GMAC_256",
            "IPSEC_INTEGRITY_AES_XCBC_MAC_96",
            "IPsecConnection$IPsecIntegrity(java.lang.String, int)",
            "IPSEC_INTEGRITY_AES_GMAC_128",
            "IPSEC_INTEGRITY_HMAC_SHA_256_128",
            "IPSEC_INTEGRITY_SUITE_B_GCM_128"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IPsecIntegrity",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IKE_GROUP_ECP_384",
            "IKE_GROUP_ECP_224",
            "IKE_GROUP_ECP_521",
            "IKE_GROUP_MODP_2048",
            "IKE_GROUP_MODP_1024_160",
            "IKE_GROUP_SUITE_B_GCM_128",
            "values()",
            "IKE_GROUP_MODP_1536",
            "ordinal()",
            "$VALUES",
            "IKE_GROUP_MODP_2048_224",
            "static {}",
            "IKE_GROUP_BRAINPOOL_ECP_256",
            "IKE_GROUP_MODP_6144",
            "IKE_GROUP_BRAINPOOL_ECP_512",
            "IKE_GROUP_MODP_3072",
            "IKE_GROUP_ECP_192",
            "name()",
            "IKE_GROUP_ANY",
            "IKE_GROUP_ECP_256",
            "IKE_GROUP_MODP_1024",
            "IKE_GROUP_SUITE_B_GCM_256",
            "IPsecConnection$IkeGroup(java.lang.String, int)",
            "IKE_GROUP_MODP_768",
            "IKE_GROUP_MODP_8192",
            "IKE_GROUP_BRAINPOOL_ECP_384",
            "IKE_GROUP_BRAINPOOL_ECP_224",
            "valueOf(java.lang.String)",
            "IKE_GROUP_MODP_2048_256",
            "IKE_GROUP_MODP_4096"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IkeGroup",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "IPsecConnection$IkeVersion(java.lang.String, int)",
            "$VALUES",
            "values()",
            "IKE_VERSION_2",
            "IKE_VERSION_1",
            "name()",
            "ordinal()",
            "valueOf(java.lang.String)"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IkeVersion",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IKE_ENCRYPTION_ANY",
            "IKE_ENCRYPTION_AES_CCM_192",
            "IKE_ENCRYPTION_AES_CTR_192",
            "IKE_ENCRYPTION_AES_GCM_192",
            "IKE_ENCRYPTION_AES_CCM_128",
            "IKE_ENCRYPTION_SUITE_B_GCM_128",
            "IKE_ENCRYPTION_3DES_CBC",
            "name()",
            "IKE_ENCRYPTION_AES_CTR_256",
            "IKE_ENCRYPTION_AES_GCM_256",
            "ordinal()",
            "valueOf(java.lang.String)",
            "static {}",
            "IPsecConnection$IkeEncryption(java.lang.String, int)",
            "IKE_ENCRYPTION_AES_CBC_192",
            "IKE_ENCRYPTION_BASIC",
            "IKE_ENCRYPTION_AES_CBC_256",
            "values()",
            "$VALUES",
            "IKE_ENCRYPTION_AES_CBC_128",
            "IKE_ENCRYPTION_AES_CTR_128",
            "IKE_ENCRYPTION_AES_GCM_128",
            "IKE_ENCRYPTION_AES_CCM_256",
            "IKE_ENCRYPTION_SUITE_B_GCM_256"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IkeEncryption",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "IPsecConnection$IkeIntegrity(java.lang.String, int)",
            "ordinal()",
            "values()",
            "IKE_INTEGRITY_SUITE_B_GCM_256",
            "IKE_INTEGRITY_HMAC_SHA_384_192",
            "valueOf(java.lang.String)",
            "IKE_INTEGRITY_HMAC_SHA1_96",
            "name()",
            "IKE_INTEGRITY_BASIC",
            "IKE_INTEGRITY_HMAC_SHA_256_128",
            "$VALUES",
            "IKE_INTEGRITY_ANY",
            "IKE_INTEGRITY_HMAC_MD5_96",
            "IKE_INTEGRITY_HMAC_SHA_512_256",
            "IKE_INTEGRITY_SUITE_B_GCM_128",
            "IKE_INTEGRITY_AES_XCBC_MAC_96"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$IkeIntegrity",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "static {}",
            "ordinal()",
            "valueOf(java.lang.String)",
            "name()",
            "IPsecConnection$VirtualAdapterConfigurationMethod(java.lang.String, int)",
            "VIRTUAL_ADAPTER_CONF_NONE",
            "values()",
            "VIRTUAL_ADAPTER_CONF_TUN",
            "$VALUES",
            "VIRTUAL_ADAPTER_CONF_INTERNAL",
            "VIRTUAL_ADAPTER_CONF_NONE_TUN"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecConnection$VirtualAdapterConfigurationMethod",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mData",
            "IPsecIkeCfgAttribute(int, byte[])",
            "getData()",
            "getType()",
            "IPsecIkeCfgAttribute(int)",
            "toString()",
            "mType"
          ],
          "added": [],
          "name": "com.ipsec.client.IPsecIkeCfgAttribute",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IPsecServiceBinder()"
          ],
          "added": [],
          "name": "com.ipsec.service.IPsecServiceBinder",
          "change_type": 2
        }
      ],
      "name": "com.ipsec.client"
    },
    {
      "children": [
        {
          "size": 1,
          "removed": [
            "LicenseLogService$1(com.android.server.enterprise.license.LicenseLogService)",
            "onReceive(android.content.Context, android.content.Intent)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.license.LicenseLogService$1",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getLog(java.lang.String)",
            "mEdmStorageProvider",
            "LicenseLogService(android.content.Context)",
            "log(android.app.enterprise.ContextInfo, java.lang.String)",
            "initializeHandlerThread()",
            "deleteLog(java.lang.String)",
            "onPreAdminRemoval(int)",
            "TAG",
            "_log(java.lang.String, int)",
            "mHandlerThread",
            "MSG_LOG_API",
            "access$100(com.android.server.enterprise.license.LicenseLogService)",
            "MSG_CLEAN_OLD_RECORDS",
            "onAdminRemoved(int)",
            "handleLicenseLogCleanNotification()",
            "mReceiver",
            "mContext",
            "access$000()",
            "access$200(com.android.server.enterprise.license.LicenseLogService, java.lang.String, int)",
            "mHandler",
            "onAdminAdded(int)",
            "ACTION_LICENSE_LOG_DELETE_OLD_RECORDS",
            "systemReady()",
            "getPackageNameForUid(int)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.license.LicenseLogService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "handleMessage(android.os.Message)",
            "obtainMessage(int)",
            "sendMessage(android.os.Message)",
            "LicenseLogService$LogHandler(com.android.server.enterprise.license.LicenseLogService, android.os.Looper)",
            "this$0"
          ],
          "added": [],
          "name": "com.android.server.enterprise.license.LicenseLogService$LogHandler",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getPermissions()"
          ],
          "added": [],
          "name": "android.app.enterprise.license.RightsObject",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "LicenseLog()",
            "getLog(java.lang.String)",
            "deleteLog(java.lang.String)",
            "log(android.app.enterprise.ContextInfo, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.license.LicenseLog",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "mPMS",
            "checkPackage(java.lang.String, java.lang.String)",
            "deleteApiCallData(java.lang.String, java.lang.String, android.app.enterprise.license.Error)",
            "resetLicenseByAdmin(java.lang.String)",
            "mContext",
            "activateKnoxLicenseForUMC(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "allowedCaller",
            "updateAdminPermissions()",
            "getApiCallDataByAdmin(android.app.enterprise.ContextInfo, java.lang.String)",
            "activateLicenseForUMC(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String, java.lang.String)",
            "EnterpriseLicenseService(android.content.Context, android.content.pm.IPackageManager)",
            "TAG",
            "getELMPermissions(java.lang.String)",
            "getRightsObject(java.lang.String)",
            "log(android.app.enterprise.ContextInfo, java.lang.String)",
            "mEdmStorageProvider",
            "deleteLicense(java.lang.String)",
            "deleteELMInfo(java.lang.String)",
            "processKnoxLicenseResponse(java.lang.String, java.lang.String, android.app.enterprise.license.Error, int, int, java.lang.String)",
            "onAdminRemoved(int)",
            "DEACTIVATE_LICENSE_PERMISSION",
            "resetELMInfo(java.lang.String)",
            "processLicenseValidationResult(java.lang.String, java.lang.String, android.app.enterprise.license.RightsObject, android.app.enterprise.license.Error, java.lang.String)",
            "getKLMLicenseKey(java.lang.String)",
            "systemReady()",
            "mKLMKeyMap",
            "getAllLicenseInfo()",
            "getPackageNameForUid(int)",
            "activateLicense(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String, java.lang.String)",
            "getKLMLicenseKeyForDeactivation(java.lang.String)",
            "enforcePermission()",
            "getPermissions(java.lang.String)",
            "MY_PID",
            "getELMLicenseKey(java.lang.String)",
            "resetLicense(java.lang.String)",
            "mKLMKeyDeactivateMap",
            "static {}",
            "mUcmeService",
            "mELMKeyMap",
            "onAdminAdded(int)",
            "getApiCallData(java.lang.String)",
            "getUcmService()",
            "UMCpackageName",
            "deActivateKnoxLicense(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "activateKnoxLicense(android.app.enterprise.ContextInfo, java.lang.String, java.lang.String)",
            "deleteLicenseByAdmin(java.lang.String)",
            "getLicenseInfo(java.lang.String)",
            "onPreAdminRemoval(int)",
            "processLicenseActivationResponse(java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.enterprise.license.RightsObject, android.app.enterprise.license.Error, java.lang.String, java.lang.String)"
          ],
          "added": [],
          "name": "com.android.server.enterprise.license.EnterpriseLicenseService",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "getErrorCode()"
          ],
          "added": [],
          "name": "android.app.enterprise.license.Error",
          "change_type": 2
        },
        {
          "size": 1,
          "removed": [
            "IEnterpriseLicense$Stub()"
          ],
          "added": [],
          "name": "android.app.enterprise.license.IEnterpriseLicense$Stub",
          "change_type": 2
        }
      ],
      "name": "com.android.server.enterprise.license"
    }
  ],
  "name": "android_framework"
}